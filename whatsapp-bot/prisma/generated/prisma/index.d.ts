
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model SchemeService
 * 
 */
export type SchemeService = $Result.DefaultSelection<Prisma.$SchemeServicePayload>
/**
 * Model ContactPerson
 * 
 */
export type ContactPerson = $Result.DefaultSelection<Prisma.$ContactPersonPayload>
/**
 * Model SupportiveDocument
 * 
 */
export type SupportiveDocument = $Result.DefaultSelection<Prisma.$SupportiveDocumentPayload>
/**
 * Model CertificateService
 * 
 */
export type CertificateService = $Result.DefaultSelection<Prisma.$CertificateServicePayload>
/**
 * Model CertificateContact
 * 
 */
export type CertificateContact = $Result.DefaultSelection<Prisma.$CertificateContactPayload>
/**
 * Model CertificateDocument
 * 
 */
export type CertificateDocument = $Result.DefaultSelection<Prisma.$CertificateDocumentPayload>
/**
 * Model CertificateProcessStep
 * 
 */
export type CertificateProcessStep = $Result.DefaultSelection<Prisma.$CertificateProcessStepPayload>
/**
 * Model CertificateEligibility
 * 
 */
export type CertificateEligibility = $Result.DefaultSelection<Prisma.$CertificateEligibilityPayload>
/**
 * Model ContactService
 * 
 */
export type ContactService = $Result.DefaultSelection<Prisma.$ContactServicePayload>
/**
 * Model ContactServiceContact
 * 
 */
export type ContactServiceContact = $Result.DefaultSelection<Prisma.$ContactServiceContactPayload>
/**
 * Model ContactServiceDocument
 * 
 */
export type ContactServiceDocument = $Result.DefaultSelection<Prisma.$ContactServiceDocumentPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model Grievance
 * 
 */
export type Grievance = $Result.DefaultSelection<Prisma.$GrievancePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.schemeService`: Exposes CRUD operations for the **SchemeService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SchemeServices
    * const schemeServices = await prisma.schemeService.findMany()
    * ```
    */
  get schemeService(): Prisma.SchemeServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contactPerson`: Exposes CRUD operations for the **ContactPerson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactPeople
    * const contactPeople = await prisma.contactPerson.findMany()
    * ```
    */
  get contactPerson(): Prisma.ContactPersonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.supportiveDocument`: Exposes CRUD operations for the **SupportiveDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SupportiveDocuments
    * const supportiveDocuments = await prisma.supportiveDocument.findMany()
    * ```
    */
  get supportiveDocument(): Prisma.SupportiveDocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificateService`: Exposes CRUD operations for the **CertificateService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CertificateServices
    * const certificateServices = await prisma.certificateService.findMany()
    * ```
    */
  get certificateService(): Prisma.CertificateServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificateContact`: Exposes CRUD operations for the **CertificateContact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CertificateContacts
    * const certificateContacts = await prisma.certificateContact.findMany()
    * ```
    */
  get certificateContact(): Prisma.CertificateContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificateDocument`: Exposes CRUD operations for the **CertificateDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CertificateDocuments
    * const certificateDocuments = await prisma.certificateDocument.findMany()
    * ```
    */
  get certificateDocument(): Prisma.CertificateDocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificateProcessStep`: Exposes CRUD operations for the **CertificateProcessStep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CertificateProcessSteps
    * const certificateProcessSteps = await prisma.certificateProcessStep.findMany()
    * ```
    */
  get certificateProcessStep(): Prisma.CertificateProcessStepDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificateEligibility`: Exposes CRUD operations for the **CertificateEligibility** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CertificateEligibilities
    * const certificateEligibilities = await prisma.certificateEligibility.findMany()
    * ```
    */
  get certificateEligibility(): Prisma.CertificateEligibilityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contactService`: Exposes CRUD operations for the **ContactService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactServices
    * const contactServices = await prisma.contactService.findMany()
    * ```
    */
  get contactService(): Prisma.ContactServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contactServiceContact`: Exposes CRUD operations for the **ContactServiceContact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactServiceContacts
    * const contactServiceContacts = await prisma.contactServiceContact.findMany()
    * ```
    */
  get contactServiceContact(): Prisma.ContactServiceContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contactServiceDocument`: Exposes CRUD operations for the **ContactServiceDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactServiceDocuments
    * const contactServiceDocuments = await prisma.contactServiceDocument.findMany()
    * ```
    */
  get contactServiceDocument(): Prisma.ContactServiceDocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.grievance`: Exposes CRUD operations for the **Grievance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grievances
    * const grievances = await prisma.grievance.findMany()
    * ```
    */
  get grievance(): Prisma.GrievanceDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    SchemeService: 'SchemeService',
    ContactPerson: 'ContactPerson',
    SupportiveDocument: 'SupportiveDocument',
    CertificateService: 'CertificateService',
    CertificateContact: 'CertificateContact',
    CertificateDocument: 'CertificateDocument',
    CertificateProcessStep: 'CertificateProcessStep',
    CertificateEligibility: 'CertificateEligibility',
    ContactService: 'ContactService',
    ContactServiceContact: 'ContactServiceContact',
    ContactServiceDocument: 'ContactServiceDocument',
    Post: 'Post',
    Employee: 'Employee',
    Feedback: 'Feedback',
    Grievance: 'Grievance'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "admin" | "schemeService" | "contactPerson" | "supportiveDocument" | "certificateService" | "certificateContact" | "certificateDocument" | "certificateProcessStep" | "certificateEligibility" | "contactService" | "contactServiceContact" | "contactServiceDocument" | "post" | "employee" | "feedback" | "grievance"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      SchemeService: {
        payload: Prisma.$SchemeServicePayload<ExtArgs>
        fields: Prisma.SchemeServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchemeServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemeServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchemeServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemeServicePayload>
          }
          findFirst: {
            args: Prisma.SchemeServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemeServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchemeServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemeServicePayload>
          }
          findMany: {
            args: Prisma.SchemeServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemeServicePayload>[]
          }
          create: {
            args: Prisma.SchemeServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemeServicePayload>
          }
          createMany: {
            args: Prisma.SchemeServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SchemeServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemeServicePayload>[]
          }
          delete: {
            args: Prisma.SchemeServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemeServicePayload>
          }
          update: {
            args: Prisma.SchemeServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemeServicePayload>
          }
          deleteMany: {
            args: Prisma.SchemeServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchemeServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SchemeServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemeServicePayload>[]
          }
          upsert: {
            args: Prisma.SchemeServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchemeServicePayload>
          }
          aggregate: {
            args: Prisma.SchemeServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchemeService>
          }
          groupBy: {
            args: Prisma.SchemeServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchemeServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchemeServiceCountArgs<ExtArgs>
            result: $Utils.Optional<SchemeServiceCountAggregateOutputType> | number
          }
        }
      }
      ContactPerson: {
        payload: Prisma.$ContactPersonPayload<ExtArgs>
        fields: Prisma.ContactPersonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactPersonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPersonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactPersonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPersonPayload>
          }
          findFirst: {
            args: Prisma.ContactPersonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPersonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactPersonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPersonPayload>
          }
          findMany: {
            args: Prisma.ContactPersonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPersonPayload>[]
          }
          create: {
            args: Prisma.ContactPersonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPersonPayload>
          }
          createMany: {
            args: Prisma.ContactPersonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactPersonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPersonPayload>[]
          }
          delete: {
            args: Prisma.ContactPersonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPersonPayload>
          }
          update: {
            args: Prisma.ContactPersonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPersonPayload>
          }
          deleteMany: {
            args: Prisma.ContactPersonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactPersonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactPersonUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPersonPayload>[]
          }
          upsert: {
            args: Prisma.ContactPersonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPersonPayload>
          }
          aggregate: {
            args: Prisma.ContactPersonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactPerson>
          }
          groupBy: {
            args: Prisma.ContactPersonGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactPersonGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactPersonCountArgs<ExtArgs>
            result: $Utils.Optional<ContactPersonCountAggregateOutputType> | number
          }
        }
      }
      SupportiveDocument: {
        payload: Prisma.$SupportiveDocumentPayload<ExtArgs>
        fields: Prisma.SupportiveDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupportiveDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportiveDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupportiveDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportiveDocumentPayload>
          }
          findFirst: {
            args: Prisma.SupportiveDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportiveDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupportiveDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportiveDocumentPayload>
          }
          findMany: {
            args: Prisma.SupportiveDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportiveDocumentPayload>[]
          }
          create: {
            args: Prisma.SupportiveDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportiveDocumentPayload>
          }
          createMany: {
            args: Prisma.SupportiveDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupportiveDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportiveDocumentPayload>[]
          }
          delete: {
            args: Prisma.SupportiveDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportiveDocumentPayload>
          }
          update: {
            args: Prisma.SupportiveDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportiveDocumentPayload>
          }
          deleteMany: {
            args: Prisma.SupportiveDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupportiveDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SupportiveDocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportiveDocumentPayload>[]
          }
          upsert: {
            args: Prisma.SupportiveDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportiveDocumentPayload>
          }
          aggregate: {
            args: Prisma.SupportiveDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupportiveDocument>
          }
          groupBy: {
            args: Prisma.SupportiveDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupportiveDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupportiveDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<SupportiveDocumentCountAggregateOutputType> | number
          }
        }
      }
      CertificateService: {
        payload: Prisma.$CertificateServicePayload<ExtArgs>
        fields: Prisma.CertificateServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificateServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificateServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateServicePayload>
          }
          findFirst: {
            args: Prisma.CertificateServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificateServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateServicePayload>
          }
          findMany: {
            args: Prisma.CertificateServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateServicePayload>[]
          }
          create: {
            args: Prisma.CertificateServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateServicePayload>
          }
          createMany: {
            args: Prisma.CertificateServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CertificateServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateServicePayload>[]
          }
          delete: {
            args: Prisma.CertificateServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateServicePayload>
          }
          update: {
            args: Prisma.CertificateServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateServicePayload>
          }
          deleteMany: {
            args: Prisma.CertificateServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificateServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CertificateServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateServicePayload>[]
          }
          upsert: {
            args: Prisma.CertificateServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateServicePayload>
          }
          aggregate: {
            args: Prisma.CertificateServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificateService>
          }
          groupBy: {
            args: Prisma.CertificateServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificateServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificateServiceCountArgs<ExtArgs>
            result: $Utils.Optional<CertificateServiceCountAggregateOutputType> | number
          }
        }
      }
      CertificateContact: {
        payload: Prisma.$CertificateContactPayload<ExtArgs>
        fields: Prisma.CertificateContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificateContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificateContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateContactPayload>
          }
          findFirst: {
            args: Prisma.CertificateContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificateContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateContactPayload>
          }
          findMany: {
            args: Prisma.CertificateContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateContactPayload>[]
          }
          create: {
            args: Prisma.CertificateContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateContactPayload>
          }
          createMany: {
            args: Prisma.CertificateContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CertificateContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateContactPayload>[]
          }
          delete: {
            args: Prisma.CertificateContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateContactPayload>
          }
          update: {
            args: Prisma.CertificateContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateContactPayload>
          }
          deleteMany: {
            args: Prisma.CertificateContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificateContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CertificateContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateContactPayload>[]
          }
          upsert: {
            args: Prisma.CertificateContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateContactPayload>
          }
          aggregate: {
            args: Prisma.CertificateContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificateContact>
          }
          groupBy: {
            args: Prisma.CertificateContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificateContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificateContactCountArgs<ExtArgs>
            result: $Utils.Optional<CertificateContactCountAggregateOutputType> | number
          }
        }
      }
      CertificateDocument: {
        payload: Prisma.$CertificateDocumentPayload<ExtArgs>
        fields: Prisma.CertificateDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificateDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificateDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateDocumentPayload>
          }
          findFirst: {
            args: Prisma.CertificateDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificateDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateDocumentPayload>
          }
          findMany: {
            args: Prisma.CertificateDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateDocumentPayload>[]
          }
          create: {
            args: Prisma.CertificateDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateDocumentPayload>
          }
          createMany: {
            args: Prisma.CertificateDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CertificateDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateDocumentPayload>[]
          }
          delete: {
            args: Prisma.CertificateDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateDocumentPayload>
          }
          update: {
            args: Prisma.CertificateDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateDocumentPayload>
          }
          deleteMany: {
            args: Prisma.CertificateDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificateDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CertificateDocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateDocumentPayload>[]
          }
          upsert: {
            args: Prisma.CertificateDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateDocumentPayload>
          }
          aggregate: {
            args: Prisma.CertificateDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificateDocument>
          }
          groupBy: {
            args: Prisma.CertificateDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificateDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificateDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<CertificateDocumentCountAggregateOutputType> | number
          }
        }
      }
      CertificateProcessStep: {
        payload: Prisma.$CertificateProcessStepPayload<ExtArgs>
        fields: Prisma.CertificateProcessStepFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificateProcessStepFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateProcessStepPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificateProcessStepFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateProcessStepPayload>
          }
          findFirst: {
            args: Prisma.CertificateProcessStepFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateProcessStepPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificateProcessStepFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateProcessStepPayload>
          }
          findMany: {
            args: Prisma.CertificateProcessStepFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateProcessStepPayload>[]
          }
          create: {
            args: Prisma.CertificateProcessStepCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateProcessStepPayload>
          }
          createMany: {
            args: Prisma.CertificateProcessStepCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CertificateProcessStepCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateProcessStepPayload>[]
          }
          delete: {
            args: Prisma.CertificateProcessStepDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateProcessStepPayload>
          }
          update: {
            args: Prisma.CertificateProcessStepUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateProcessStepPayload>
          }
          deleteMany: {
            args: Prisma.CertificateProcessStepDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificateProcessStepUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CertificateProcessStepUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateProcessStepPayload>[]
          }
          upsert: {
            args: Prisma.CertificateProcessStepUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateProcessStepPayload>
          }
          aggregate: {
            args: Prisma.CertificateProcessStepAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificateProcessStep>
          }
          groupBy: {
            args: Prisma.CertificateProcessStepGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificateProcessStepGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificateProcessStepCountArgs<ExtArgs>
            result: $Utils.Optional<CertificateProcessStepCountAggregateOutputType> | number
          }
        }
      }
      CertificateEligibility: {
        payload: Prisma.$CertificateEligibilityPayload<ExtArgs>
        fields: Prisma.CertificateEligibilityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificateEligibilityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateEligibilityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificateEligibilityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateEligibilityPayload>
          }
          findFirst: {
            args: Prisma.CertificateEligibilityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateEligibilityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificateEligibilityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateEligibilityPayload>
          }
          findMany: {
            args: Prisma.CertificateEligibilityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateEligibilityPayload>[]
          }
          create: {
            args: Prisma.CertificateEligibilityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateEligibilityPayload>
          }
          createMany: {
            args: Prisma.CertificateEligibilityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CertificateEligibilityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateEligibilityPayload>[]
          }
          delete: {
            args: Prisma.CertificateEligibilityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateEligibilityPayload>
          }
          update: {
            args: Prisma.CertificateEligibilityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateEligibilityPayload>
          }
          deleteMany: {
            args: Prisma.CertificateEligibilityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificateEligibilityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CertificateEligibilityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateEligibilityPayload>[]
          }
          upsert: {
            args: Prisma.CertificateEligibilityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateEligibilityPayload>
          }
          aggregate: {
            args: Prisma.CertificateEligibilityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificateEligibility>
          }
          groupBy: {
            args: Prisma.CertificateEligibilityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificateEligibilityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificateEligibilityCountArgs<ExtArgs>
            result: $Utils.Optional<CertificateEligibilityCountAggregateOutputType> | number
          }
        }
      }
      ContactService: {
        payload: Prisma.$ContactServicePayload<ExtArgs>
        fields: Prisma.ContactServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServicePayload>
          }
          findFirst: {
            args: Prisma.ContactServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServicePayload>
          }
          findMany: {
            args: Prisma.ContactServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServicePayload>[]
          }
          create: {
            args: Prisma.ContactServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServicePayload>
          }
          createMany: {
            args: Prisma.ContactServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServicePayload>[]
          }
          delete: {
            args: Prisma.ContactServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServicePayload>
          }
          update: {
            args: Prisma.ContactServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServicePayload>
          }
          deleteMany: {
            args: Prisma.ContactServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServicePayload>[]
          }
          upsert: {
            args: Prisma.ContactServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServicePayload>
          }
          aggregate: {
            args: Prisma.ContactServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactService>
          }
          groupBy: {
            args: Prisma.ContactServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ContactServiceCountAggregateOutputType> | number
          }
        }
      }
      ContactServiceContact: {
        payload: Prisma.$ContactServiceContactPayload<ExtArgs>
        fields: Prisma.ContactServiceContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactServiceContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactServiceContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceContactPayload>
          }
          findFirst: {
            args: Prisma.ContactServiceContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactServiceContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceContactPayload>
          }
          findMany: {
            args: Prisma.ContactServiceContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceContactPayload>[]
          }
          create: {
            args: Prisma.ContactServiceContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceContactPayload>
          }
          createMany: {
            args: Prisma.ContactServiceContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactServiceContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceContactPayload>[]
          }
          delete: {
            args: Prisma.ContactServiceContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceContactPayload>
          }
          update: {
            args: Prisma.ContactServiceContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactServiceContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactServiceContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactServiceContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactServiceContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceContactPayload>
          }
          aggregate: {
            args: Prisma.ContactServiceContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactServiceContact>
          }
          groupBy: {
            args: Prisma.ContactServiceContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactServiceContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactServiceContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactServiceContactCountAggregateOutputType> | number
          }
        }
      }
      ContactServiceDocument: {
        payload: Prisma.$ContactServiceDocumentPayload<ExtArgs>
        fields: Prisma.ContactServiceDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactServiceDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactServiceDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceDocumentPayload>
          }
          findFirst: {
            args: Prisma.ContactServiceDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactServiceDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceDocumentPayload>
          }
          findMany: {
            args: Prisma.ContactServiceDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceDocumentPayload>[]
          }
          create: {
            args: Prisma.ContactServiceDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceDocumentPayload>
          }
          createMany: {
            args: Prisma.ContactServiceDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactServiceDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceDocumentPayload>[]
          }
          delete: {
            args: Prisma.ContactServiceDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceDocumentPayload>
          }
          update: {
            args: Prisma.ContactServiceDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceDocumentPayload>
          }
          deleteMany: {
            args: Prisma.ContactServiceDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactServiceDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactServiceDocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceDocumentPayload>[]
          }
          upsert: {
            args: Prisma.ContactServiceDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactServiceDocumentPayload>
          }
          aggregate: {
            args: Prisma.ContactServiceDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactServiceDocument>
          }
          groupBy: {
            args: Prisma.ContactServiceDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactServiceDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactServiceDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<ContactServiceDocumentCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmployeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      Grievance: {
        payload: Prisma.$GrievancePayload<ExtArgs>
        fields: Prisma.GrievanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrievanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrievanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          findFirst: {
            args: Prisma.GrievanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrievanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          findMany: {
            args: Prisma.GrievanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>[]
          }
          create: {
            args: Prisma.GrievanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          createMany: {
            args: Prisma.GrievanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GrievanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>[]
          }
          delete: {
            args: Prisma.GrievanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          update: {
            args: Prisma.GrievanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          deleteMany: {
            args: Prisma.GrievanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GrievanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GrievanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>[]
          }
          upsert: {
            args: Prisma.GrievanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          aggregate: {
            args: Prisma.GrievanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrievance>
          }
          groupBy: {
            args: Prisma.GrievanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<GrievanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrievanceCountArgs<ExtArgs>
            result: $Utils.Optional<GrievanceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    admin?: AdminOmit
    schemeService?: SchemeServiceOmit
    contactPerson?: ContactPersonOmit
    supportiveDocument?: SupportiveDocumentOmit
    certificateService?: CertificateServiceOmit
    certificateContact?: CertificateContactOmit
    certificateDocument?: CertificateDocumentOmit
    certificateProcessStep?: CertificateProcessStepOmit
    certificateEligibility?: CertificateEligibilityOmit
    contactService?: ContactServiceOmit
    contactServiceContact?: ContactServiceContactOmit
    contactServiceDocument?: ContactServiceDocumentOmit
    post?: PostOmit
    employee?: EmployeeOmit
    feedback?: FeedbackOmit
    grievance?: GrievanceOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AdminCountOutputType
   */

  export type AdminCountOutputType = {
    schemeServices: number
    certificateServices: number
    contactServices: number
  }

  export type AdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schemeServices?: boolean | AdminCountOutputTypeCountSchemeServicesArgs
    certificateServices?: boolean | AdminCountOutputTypeCountCertificateServicesArgs
    contactServices?: boolean | AdminCountOutputTypeCountContactServicesArgs
  }

  // Custom InputTypes
  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     */
    select?: AdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountSchemeServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchemeServiceWhereInput
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountCertificateServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateServiceWhereInput
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountContactServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactServiceWhereInput
  }


  /**
   * Count Type SchemeServiceCountOutputType
   */

  export type SchemeServiceCountOutputType = {
    contacts: number
    documents: number
  }

  export type SchemeServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contacts?: boolean | SchemeServiceCountOutputTypeCountContactsArgs
    documents?: boolean | SchemeServiceCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * SchemeServiceCountOutputType without action
   */
  export type SchemeServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeServiceCountOutputType
     */
    select?: SchemeServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SchemeServiceCountOutputType without action
   */
  export type SchemeServiceCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactPersonWhereInput
  }

  /**
   * SchemeServiceCountOutputType without action
   */
  export type SchemeServiceCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupportiveDocumentWhereInput
  }


  /**
   * Count Type CertificateServiceCountOutputType
   */

  export type CertificateServiceCountOutputType = {
    contacts: number
    documents: number
    processSteps: number
    eligibilityItems: number
  }

  export type CertificateServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contacts?: boolean | CertificateServiceCountOutputTypeCountContactsArgs
    documents?: boolean | CertificateServiceCountOutputTypeCountDocumentsArgs
    processSteps?: boolean | CertificateServiceCountOutputTypeCountProcessStepsArgs
    eligibilityItems?: boolean | CertificateServiceCountOutputTypeCountEligibilityItemsArgs
  }

  // Custom InputTypes
  /**
   * CertificateServiceCountOutputType without action
   */
  export type CertificateServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateServiceCountOutputType
     */
    select?: CertificateServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CertificateServiceCountOutputType without action
   */
  export type CertificateServiceCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateContactWhereInput
  }

  /**
   * CertificateServiceCountOutputType without action
   */
  export type CertificateServiceCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateDocumentWhereInput
  }

  /**
   * CertificateServiceCountOutputType without action
   */
  export type CertificateServiceCountOutputTypeCountProcessStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateProcessStepWhereInput
  }

  /**
   * CertificateServiceCountOutputType without action
   */
  export type CertificateServiceCountOutputTypeCountEligibilityItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateEligibilityWhereInput
  }


  /**
   * Count Type ContactServiceCountOutputType
   */

  export type ContactServiceCountOutputType = {
    contacts: number
    documents: number
  }

  export type ContactServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contacts?: boolean | ContactServiceCountOutputTypeCountContactsArgs
    documents?: boolean | ContactServiceCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * ContactServiceCountOutputType without action
   */
  export type ContactServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceCountOutputType
     */
    select?: ContactServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContactServiceCountOutputType without action
   */
  export type ContactServiceCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactServiceContactWhereInput
  }

  /**
   * ContactServiceCountOutputType without action
   */
  export type ContactServiceCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactServiceDocumentWhereInput
  }


  /**
   * Count Type ContactServiceContactCountOutputType
   */

  export type ContactServiceContactCountOutputType = {
    posts: number
  }

  export type ContactServiceContactCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | ContactServiceContactCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * ContactServiceContactCountOutputType without action
   */
  export type ContactServiceContactCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContactCountOutputType
     */
    select?: ContactServiceContactCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContactServiceContactCountOutputType without action
   */
  export type ContactServiceContactCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    employees: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | PostCountOutputTypeCountEmployeesArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    schemeServices?: boolean | Admin$schemeServicesArgs<ExtArgs>
    certificateServices?: boolean | Admin$certificateServicesArgs<ExtArgs>
    contactServices?: boolean | Admin$contactServicesArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["admin"]>
  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schemeServices?: boolean | Admin$schemeServicesArgs<ExtArgs>
    certificateServices?: boolean | Admin$certificateServicesArgs<ExtArgs>
    contactServices?: boolean | Admin$contactServicesArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      schemeServices: Prisma.$SchemeServicePayload<ExtArgs>[]
      certificateServices: Prisma.$CertificateServicePayload<ExtArgs>[]
      contactServices: Prisma.$ContactServicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schemeServices<T extends Admin$schemeServicesArgs<ExtArgs> = {}>(args?: Subset<T, Admin$schemeServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    certificateServices<T extends Admin$certificateServicesArgs<ExtArgs> = {}>(args?: Subset<T, Admin$certificateServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contactServices<T extends Admin$contactServicesArgs<ExtArgs> = {}>(args?: Subset<T, Admin$contactServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly name: FieldRef<"Admin", 'String'>
    readonly role: FieldRef<"Admin", 'String'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly updatedAt: FieldRef<"Admin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin.schemeServices
   */
  export type Admin$schemeServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceInclude<ExtArgs> | null
    where?: SchemeServiceWhereInput
    orderBy?: SchemeServiceOrderByWithRelationInput | SchemeServiceOrderByWithRelationInput[]
    cursor?: SchemeServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchemeServiceScalarFieldEnum | SchemeServiceScalarFieldEnum[]
  }

  /**
   * Admin.certificateServices
   */
  export type Admin$certificateServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceInclude<ExtArgs> | null
    where?: CertificateServiceWhereInput
    orderBy?: CertificateServiceOrderByWithRelationInput | CertificateServiceOrderByWithRelationInput[]
    cursor?: CertificateServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CertificateServiceScalarFieldEnum | CertificateServiceScalarFieldEnum[]
  }

  /**
   * Admin.contactServices
   */
  export type Admin$contactServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceInclude<ExtArgs> | null
    where?: ContactServiceWhereInput
    orderBy?: ContactServiceOrderByWithRelationInput | ContactServiceOrderByWithRelationInput[]
    cursor?: ContactServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactServiceScalarFieldEnum | ContactServiceScalarFieldEnum[]
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model SchemeService
   */

  export type AggregateSchemeService = {
    _count: SchemeServiceCountAggregateOutputType | null
    _avg: SchemeServiceAvgAggregateOutputType | null
    _sum: SchemeServiceSumAggregateOutputType | null
    _min: SchemeServiceMinAggregateOutputType | null
    _max: SchemeServiceMaxAggregateOutputType | null
  }

  export type SchemeServiceAvgAggregateOutputType = {
    id: number | null
    adminId: number | null
  }

  export type SchemeServiceSumAggregateOutputType = {
    id: number | null
    adminId: number | null
  }

  export type SchemeServiceMinAggregateOutputType = {
    id: number | null
    name: string | null
    summary: string | null
    type: string | null
    applicationMode: string | null
    onlineUrl: string | null
    offlineAddress: string | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    adminId: number | null
    processNew: string | null
    processUpdate: string | null
    processLost: string | null
    processSurrender: string | null
    docNew: string | null
    docUpdate: string | null
    docLost: string | null
    docSurrender: string | null
  }

  export type SchemeServiceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    summary: string | null
    type: string | null
    applicationMode: string | null
    onlineUrl: string | null
    offlineAddress: string | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    adminId: number | null
    processNew: string | null
    processUpdate: string | null
    processLost: string | null
    processSurrender: string | null
    docNew: string | null
    docUpdate: string | null
    docLost: string | null
    docSurrender: string | null
  }

  export type SchemeServiceCountAggregateOutputType = {
    id: number
    name: number
    summary: number
    type: number
    targetAudience: number
    applicationMode: number
    onlineUrl: number
    offlineAddress: number
    status: number
    isActive: number
    createdAt: number
    updatedAt: number
    adminId: number
    eligibilityDetails: number
    schemeDetails: number
    processDetails: number
    processNew: number
    processUpdate: number
    processLost: number
    processSurrender: number
    docNew: number
    docUpdate: number
    docLost: number
    docSurrender: number
    _all: number
  }


  export type SchemeServiceAvgAggregateInputType = {
    id?: true
    adminId?: true
  }

  export type SchemeServiceSumAggregateInputType = {
    id?: true
    adminId?: true
  }

  export type SchemeServiceMinAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    type?: true
    applicationMode?: true
    onlineUrl?: true
    offlineAddress?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    processNew?: true
    processUpdate?: true
    processLost?: true
    processSurrender?: true
    docNew?: true
    docUpdate?: true
    docLost?: true
    docSurrender?: true
  }

  export type SchemeServiceMaxAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    type?: true
    applicationMode?: true
    onlineUrl?: true
    offlineAddress?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    processNew?: true
    processUpdate?: true
    processLost?: true
    processSurrender?: true
    docNew?: true
    docUpdate?: true
    docLost?: true
    docSurrender?: true
  }

  export type SchemeServiceCountAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    type?: true
    targetAudience?: true
    applicationMode?: true
    onlineUrl?: true
    offlineAddress?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    eligibilityDetails?: true
    schemeDetails?: true
    processDetails?: true
    processNew?: true
    processUpdate?: true
    processLost?: true
    processSurrender?: true
    docNew?: true
    docUpdate?: true
    docLost?: true
    docSurrender?: true
    _all?: true
  }

  export type SchemeServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchemeService to aggregate.
     */
    where?: SchemeServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemeServices to fetch.
     */
    orderBy?: SchemeServiceOrderByWithRelationInput | SchemeServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchemeServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemeServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemeServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SchemeServices
    **/
    _count?: true | SchemeServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchemeServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchemeServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchemeServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchemeServiceMaxAggregateInputType
  }

  export type GetSchemeServiceAggregateType<T extends SchemeServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateSchemeService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchemeService[P]>
      : GetScalarType<T[P], AggregateSchemeService[P]>
  }




  export type SchemeServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchemeServiceWhereInput
    orderBy?: SchemeServiceOrderByWithAggregationInput | SchemeServiceOrderByWithAggregationInput[]
    by: SchemeServiceScalarFieldEnum[] | SchemeServiceScalarFieldEnum
    having?: SchemeServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchemeServiceCountAggregateInputType | true
    _avg?: SchemeServiceAvgAggregateInputType
    _sum?: SchemeServiceSumAggregateInputType
    _min?: SchemeServiceMinAggregateInputType
    _max?: SchemeServiceMaxAggregateInputType
  }

  export type SchemeServiceGroupByOutputType = {
    id: number
    name: string
    summary: string
    type: string | null
    targetAudience: string[]
    applicationMode: string
    onlineUrl: string | null
    offlineAddress: string | null
    status: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    adminId: number
    eligibilityDetails: string[]
    schemeDetails: string[]
    processDetails: string[]
    processNew: string | null
    processUpdate: string | null
    processLost: string | null
    processSurrender: string | null
    docNew: string | null
    docUpdate: string | null
    docLost: string | null
    docSurrender: string | null
    _count: SchemeServiceCountAggregateOutputType | null
    _avg: SchemeServiceAvgAggregateOutputType | null
    _sum: SchemeServiceSumAggregateOutputType | null
    _min: SchemeServiceMinAggregateOutputType | null
    _max: SchemeServiceMaxAggregateOutputType | null
  }

  type GetSchemeServiceGroupByPayload<T extends SchemeServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchemeServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchemeServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchemeServiceGroupByOutputType[P]>
            : GetScalarType<T[P], SchemeServiceGroupByOutputType[P]>
        }
      >
    >


  export type SchemeServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    schemeDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    contacts?: boolean | SchemeService$contactsArgs<ExtArgs>
    documents?: boolean | SchemeService$documentsArgs<ExtArgs>
    _count?: boolean | SchemeServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schemeService"]>

  export type SchemeServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    schemeDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schemeService"]>

  export type SchemeServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    schemeDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schemeService"]>

  export type SchemeServiceSelectScalar = {
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    schemeDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
  }

  export type SchemeServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "summary" | "type" | "targetAudience" | "applicationMode" | "onlineUrl" | "offlineAddress" | "status" | "isActive" | "createdAt" | "updatedAt" | "adminId" | "eligibilityDetails" | "schemeDetails" | "processDetails" | "processNew" | "processUpdate" | "processLost" | "processSurrender" | "docNew" | "docUpdate" | "docLost" | "docSurrender", ExtArgs["result"]["schemeService"]>
  export type SchemeServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    contacts?: boolean | SchemeService$contactsArgs<ExtArgs>
    documents?: boolean | SchemeService$documentsArgs<ExtArgs>
    _count?: boolean | SchemeServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SchemeServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }
  export type SchemeServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }

  export type $SchemeServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SchemeService"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      contacts: Prisma.$ContactPersonPayload<ExtArgs>[]
      documents: Prisma.$SupportiveDocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      summary: string
      type: string | null
      targetAudience: string[]
      applicationMode: string
      onlineUrl: string | null
      offlineAddress: string | null
      status: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      adminId: number
      eligibilityDetails: string[]
      schemeDetails: string[]
      processDetails: string[]
      processNew: string | null
      processUpdate: string | null
      processLost: string | null
      processSurrender: string | null
      docNew: string | null
      docUpdate: string | null
      docLost: string | null
      docSurrender: string | null
    }, ExtArgs["result"]["schemeService"]>
    composites: {}
  }

  type SchemeServiceGetPayload<S extends boolean | null | undefined | SchemeServiceDefaultArgs> = $Result.GetResult<Prisma.$SchemeServicePayload, S>

  type SchemeServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SchemeServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SchemeServiceCountAggregateInputType | true
    }

  export interface SchemeServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SchemeService'], meta: { name: 'SchemeService' } }
    /**
     * Find zero or one SchemeService that matches the filter.
     * @param {SchemeServiceFindUniqueArgs} args - Arguments to find a SchemeService
     * @example
     * // Get one SchemeService
     * const schemeService = await prisma.schemeService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchemeServiceFindUniqueArgs>(args: SelectSubset<T, SchemeServiceFindUniqueArgs<ExtArgs>>): Prisma__SchemeServiceClient<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SchemeService that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SchemeServiceFindUniqueOrThrowArgs} args - Arguments to find a SchemeService
     * @example
     * // Get one SchemeService
     * const schemeService = await prisma.schemeService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchemeServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, SchemeServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchemeServiceClient<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SchemeService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemeServiceFindFirstArgs} args - Arguments to find a SchemeService
     * @example
     * // Get one SchemeService
     * const schemeService = await prisma.schemeService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchemeServiceFindFirstArgs>(args?: SelectSubset<T, SchemeServiceFindFirstArgs<ExtArgs>>): Prisma__SchemeServiceClient<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SchemeService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemeServiceFindFirstOrThrowArgs} args - Arguments to find a SchemeService
     * @example
     * // Get one SchemeService
     * const schemeService = await prisma.schemeService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchemeServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, SchemeServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchemeServiceClient<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SchemeServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemeServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SchemeServices
     * const schemeServices = await prisma.schemeService.findMany()
     * 
     * // Get first 10 SchemeServices
     * const schemeServices = await prisma.schemeService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schemeServiceWithIdOnly = await prisma.schemeService.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SchemeServiceFindManyArgs>(args?: SelectSubset<T, SchemeServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SchemeService.
     * @param {SchemeServiceCreateArgs} args - Arguments to create a SchemeService.
     * @example
     * // Create one SchemeService
     * const SchemeService = await prisma.schemeService.create({
     *   data: {
     *     // ... data to create a SchemeService
     *   }
     * })
     * 
     */
    create<T extends SchemeServiceCreateArgs>(args: SelectSubset<T, SchemeServiceCreateArgs<ExtArgs>>): Prisma__SchemeServiceClient<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SchemeServices.
     * @param {SchemeServiceCreateManyArgs} args - Arguments to create many SchemeServices.
     * @example
     * // Create many SchemeServices
     * const schemeService = await prisma.schemeService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchemeServiceCreateManyArgs>(args?: SelectSubset<T, SchemeServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SchemeServices and returns the data saved in the database.
     * @param {SchemeServiceCreateManyAndReturnArgs} args - Arguments to create many SchemeServices.
     * @example
     * // Create many SchemeServices
     * const schemeService = await prisma.schemeService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SchemeServices and only return the `id`
     * const schemeServiceWithIdOnly = await prisma.schemeService.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SchemeServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, SchemeServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SchemeService.
     * @param {SchemeServiceDeleteArgs} args - Arguments to delete one SchemeService.
     * @example
     * // Delete one SchemeService
     * const SchemeService = await prisma.schemeService.delete({
     *   where: {
     *     // ... filter to delete one SchemeService
     *   }
     * })
     * 
     */
    delete<T extends SchemeServiceDeleteArgs>(args: SelectSubset<T, SchemeServiceDeleteArgs<ExtArgs>>): Prisma__SchemeServiceClient<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SchemeService.
     * @param {SchemeServiceUpdateArgs} args - Arguments to update one SchemeService.
     * @example
     * // Update one SchemeService
     * const schemeService = await prisma.schemeService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchemeServiceUpdateArgs>(args: SelectSubset<T, SchemeServiceUpdateArgs<ExtArgs>>): Prisma__SchemeServiceClient<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SchemeServices.
     * @param {SchemeServiceDeleteManyArgs} args - Arguments to filter SchemeServices to delete.
     * @example
     * // Delete a few SchemeServices
     * const { count } = await prisma.schemeService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchemeServiceDeleteManyArgs>(args?: SelectSubset<T, SchemeServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchemeServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemeServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SchemeServices
     * const schemeService = await prisma.schemeService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchemeServiceUpdateManyArgs>(args: SelectSubset<T, SchemeServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchemeServices and returns the data updated in the database.
     * @param {SchemeServiceUpdateManyAndReturnArgs} args - Arguments to update many SchemeServices.
     * @example
     * // Update many SchemeServices
     * const schemeService = await prisma.schemeService.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SchemeServices and only return the `id`
     * const schemeServiceWithIdOnly = await prisma.schemeService.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SchemeServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, SchemeServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SchemeService.
     * @param {SchemeServiceUpsertArgs} args - Arguments to update or create a SchemeService.
     * @example
     * // Update or create a SchemeService
     * const schemeService = await prisma.schemeService.upsert({
     *   create: {
     *     // ... data to create a SchemeService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SchemeService we want to update
     *   }
     * })
     */
    upsert<T extends SchemeServiceUpsertArgs>(args: SelectSubset<T, SchemeServiceUpsertArgs<ExtArgs>>): Prisma__SchemeServiceClient<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SchemeServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemeServiceCountArgs} args - Arguments to filter SchemeServices to count.
     * @example
     * // Count the number of SchemeServices
     * const count = await prisma.schemeService.count({
     *   where: {
     *     // ... the filter for the SchemeServices we want to count
     *   }
     * })
    **/
    count<T extends SchemeServiceCountArgs>(
      args?: Subset<T, SchemeServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchemeServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SchemeService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemeServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchemeServiceAggregateArgs>(args: Subset<T, SchemeServiceAggregateArgs>): Prisma.PrismaPromise<GetSchemeServiceAggregateType<T>>

    /**
     * Group by SchemeService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemeServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchemeServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchemeServiceGroupByArgs['orderBy'] }
        : { orderBy?: SchemeServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchemeServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchemeServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SchemeService model
   */
  readonly fields: SchemeServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SchemeService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchemeServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contacts<T extends SchemeService$contactsArgs<ExtArgs> = {}>(args?: Subset<T, SchemeService$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends SchemeService$documentsArgs<ExtArgs> = {}>(args?: Subset<T, SchemeService$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SchemeService model
   */
  interface SchemeServiceFieldRefs {
    readonly id: FieldRef<"SchemeService", 'Int'>
    readonly name: FieldRef<"SchemeService", 'String'>
    readonly summary: FieldRef<"SchemeService", 'String'>
    readonly type: FieldRef<"SchemeService", 'String'>
    readonly targetAudience: FieldRef<"SchemeService", 'String[]'>
    readonly applicationMode: FieldRef<"SchemeService", 'String'>
    readonly onlineUrl: FieldRef<"SchemeService", 'String'>
    readonly offlineAddress: FieldRef<"SchemeService", 'String'>
    readonly status: FieldRef<"SchemeService", 'String'>
    readonly isActive: FieldRef<"SchemeService", 'Boolean'>
    readonly createdAt: FieldRef<"SchemeService", 'DateTime'>
    readonly updatedAt: FieldRef<"SchemeService", 'DateTime'>
    readonly adminId: FieldRef<"SchemeService", 'Int'>
    readonly eligibilityDetails: FieldRef<"SchemeService", 'String[]'>
    readonly schemeDetails: FieldRef<"SchemeService", 'String[]'>
    readonly processDetails: FieldRef<"SchemeService", 'String[]'>
    readonly processNew: FieldRef<"SchemeService", 'String'>
    readonly processUpdate: FieldRef<"SchemeService", 'String'>
    readonly processLost: FieldRef<"SchemeService", 'String'>
    readonly processSurrender: FieldRef<"SchemeService", 'String'>
    readonly docNew: FieldRef<"SchemeService", 'String'>
    readonly docUpdate: FieldRef<"SchemeService", 'String'>
    readonly docLost: FieldRef<"SchemeService", 'String'>
    readonly docSurrender: FieldRef<"SchemeService", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SchemeService findUnique
   */
  export type SchemeServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceInclude<ExtArgs> | null
    /**
     * Filter, which SchemeService to fetch.
     */
    where: SchemeServiceWhereUniqueInput
  }

  /**
   * SchemeService findUniqueOrThrow
   */
  export type SchemeServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceInclude<ExtArgs> | null
    /**
     * Filter, which SchemeService to fetch.
     */
    where: SchemeServiceWhereUniqueInput
  }

  /**
   * SchemeService findFirst
   */
  export type SchemeServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceInclude<ExtArgs> | null
    /**
     * Filter, which SchemeService to fetch.
     */
    where?: SchemeServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemeServices to fetch.
     */
    orderBy?: SchemeServiceOrderByWithRelationInput | SchemeServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchemeServices.
     */
    cursor?: SchemeServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemeServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemeServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchemeServices.
     */
    distinct?: SchemeServiceScalarFieldEnum | SchemeServiceScalarFieldEnum[]
  }

  /**
   * SchemeService findFirstOrThrow
   */
  export type SchemeServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceInclude<ExtArgs> | null
    /**
     * Filter, which SchemeService to fetch.
     */
    where?: SchemeServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemeServices to fetch.
     */
    orderBy?: SchemeServiceOrderByWithRelationInput | SchemeServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchemeServices.
     */
    cursor?: SchemeServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemeServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemeServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchemeServices.
     */
    distinct?: SchemeServiceScalarFieldEnum | SchemeServiceScalarFieldEnum[]
  }

  /**
   * SchemeService findMany
   */
  export type SchemeServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceInclude<ExtArgs> | null
    /**
     * Filter, which SchemeServices to fetch.
     */
    where?: SchemeServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchemeServices to fetch.
     */
    orderBy?: SchemeServiceOrderByWithRelationInput | SchemeServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SchemeServices.
     */
    cursor?: SchemeServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchemeServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchemeServices.
     */
    skip?: number
    distinct?: SchemeServiceScalarFieldEnum | SchemeServiceScalarFieldEnum[]
  }

  /**
   * SchemeService create
   */
  export type SchemeServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a SchemeService.
     */
    data: XOR<SchemeServiceCreateInput, SchemeServiceUncheckedCreateInput>
  }

  /**
   * SchemeService createMany
   */
  export type SchemeServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SchemeServices.
     */
    data: SchemeServiceCreateManyInput | SchemeServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SchemeService createManyAndReturn
   */
  export type SchemeServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * The data used to create many SchemeServices.
     */
    data: SchemeServiceCreateManyInput | SchemeServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SchemeService update
   */
  export type SchemeServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a SchemeService.
     */
    data: XOR<SchemeServiceUpdateInput, SchemeServiceUncheckedUpdateInput>
    /**
     * Choose, which SchemeService to update.
     */
    where: SchemeServiceWhereUniqueInput
  }

  /**
   * SchemeService updateMany
   */
  export type SchemeServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SchemeServices.
     */
    data: XOR<SchemeServiceUpdateManyMutationInput, SchemeServiceUncheckedUpdateManyInput>
    /**
     * Filter which SchemeServices to update
     */
    where?: SchemeServiceWhereInput
    /**
     * Limit how many SchemeServices to update.
     */
    limit?: number
  }

  /**
   * SchemeService updateManyAndReturn
   */
  export type SchemeServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * The data used to update SchemeServices.
     */
    data: XOR<SchemeServiceUpdateManyMutationInput, SchemeServiceUncheckedUpdateManyInput>
    /**
     * Filter which SchemeServices to update
     */
    where?: SchemeServiceWhereInput
    /**
     * Limit how many SchemeServices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SchemeService upsert
   */
  export type SchemeServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the SchemeService to update in case it exists.
     */
    where: SchemeServiceWhereUniqueInput
    /**
     * In case the SchemeService found by the `where` argument doesn't exist, create a new SchemeService with this data.
     */
    create: XOR<SchemeServiceCreateInput, SchemeServiceUncheckedCreateInput>
    /**
     * In case the SchemeService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchemeServiceUpdateInput, SchemeServiceUncheckedUpdateInput>
  }

  /**
   * SchemeService delete
   */
  export type SchemeServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceInclude<ExtArgs> | null
    /**
     * Filter which SchemeService to delete.
     */
    where: SchemeServiceWhereUniqueInput
  }

  /**
   * SchemeService deleteMany
   */
  export type SchemeServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchemeServices to delete
     */
    where?: SchemeServiceWhereInput
    /**
     * Limit how many SchemeServices to delete.
     */
    limit?: number
  }

  /**
   * SchemeService.contacts
   */
  export type SchemeService$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonInclude<ExtArgs> | null
    where?: ContactPersonWhereInput
    orderBy?: ContactPersonOrderByWithRelationInput | ContactPersonOrderByWithRelationInput[]
    cursor?: ContactPersonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactPersonScalarFieldEnum | ContactPersonScalarFieldEnum[]
  }

  /**
   * SchemeService.documents
   */
  export type SchemeService$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentInclude<ExtArgs> | null
    where?: SupportiveDocumentWhereInput
    orderBy?: SupportiveDocumentOrderByWithRelationInput | SupportiveDocumentOrderByWithRelationInput[]
    cursor?: SupportiveDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupportiveDocumentScalarFieldEnum | SupportiveDocumentScalarFieldEnum[]
  }

  /**
   * SchemeService without action
   */
  export type SchemeServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchemeService
     */
    select?: SchemeServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchemeService
     */
    omit?: SchemeServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchemeServiceInclude<ExtArgs> | null
  }


  /**
   * Model ContactPerson
   */

  export type AggregateContactPerson = {
    _count: ContactPersonCountAggregateOutputType | null
    _avg: ContactPersonAvgAggregateOutputType | null
    _sum: ContactPersonSumAggregateOutputType | null
    _min: ContactPersonMinAggregateOutputType | null
    _max: ContactPersonMaxAggregateOutputType | null
  }

  export type ContactPersonAvgAggregateOutputType = {
    id: number | null
    schemeServiceId: number | null
  }

  export type ContactPersonSumAggregateOutputType = {
    id: number | null
    schemeServiceId: number | null
  }

  export type ContactPersonMinAggregateOutputType = {
    id: number | null
    serviceName: string | null
    district: string | null
    subDistrict: string | null
    block: string | null
    name: string | null
    designation: string | null
    contact: string | null
    email: string | null
    schemeServiceId: number | null
  }

  export type ContactPersonMaxAggregateOutputType = {
    id: number | null
    serviceName: string | null
    district: string | null
    subDistrict: string | null
    block: string | null
    name: string | null
    designation: string | null
    contact: string | null
    email: string | null
    schemeServiceId: number | null
  }

  export type ContactPersonCountAggregateOutputType = {
    id: number
    serviceName: number
    district: number
    subDistrict: number
    block: number
    name: number
    designation: number
    contact: number
    email: number
    schemeServiceId: number
    _all: number
  }


  export type ContactPersonAvgAggregateInputType = {
    id?: true
    schemeServiceId?: true
  }

  export type ContactPersonSumAggregateInputType = {
    id?: true
    schemeServiceId?: true
  }

  export type ContactPersonMinAggregateInputType = {
    id?: true
    serviceName?: true
    district?: true
    subDistrict?: true
    block?: true
    name?: true
    designation?: true
    contact?: true
    email?: true
    schemeServiceId?: true
  }

  export type ContactPersonMaxAggregateInputType = {
    id?: true
    serviceName?: true
    district?: true
    subDistrict?: true
    block?: true
    name?: true
    designation?: true
    contact?: true
    email?: true
    schemeServiceId?: true
  }

  export type ContactPersonCountAggregateInputType = {
    id?: true
    serviceName?: true
    district?: true
    subDistrict?: true
    block?: true
    name?: true
    designation?: true
    contact?: true
    email?: true
    schemeServiceId?: true
    _all?: true
  }

  export type ContactPersonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactPerson to aggregate.
     */
    where?: ContactPersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactPeople to fetch.
     */
    orderBy?: ContactPersonOrderByWithRelationInput | ContactPersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactPersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactPeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactPeople.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactPeople
    **/
    _count?: true | ContactPersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactPersonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactPersonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactPersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactPersonMaxAggregateInputType
  }

  export type GetContactPersonAggregateType<T extends ContactPersonAggregateArgs> = {
        [P in keyof T & keyof AggregateContactPerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactPerson[P]>
      : GetScalarType<T[P], AggregateContactPerson[P]>
  }




  export type ContactPersonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactPersonWhereInput
    orderBy?: ContactPersonOrderByWithAggregationInput | ContactPersonOrderByWithAggregationInput[]
    by: ContactPersonScalarFieldEnum[] | ContactPersonScalarFieldEnum
    having?: ContactPersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactPersonCountAggregateInputType | true
    _avg?: ContactPersonAvgAggregateInputType
    _sum?: ContactPersonSumAggregateInputType
    _min?: ContactPersonMinAggregateInputType
    _max?: ContactPersonMaxAggregateInputType
  }

  export type ContactPersonGroupByOutputType = {
    id: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    schemeServiceId: number
    _count: ContactPersonCountAggregateOutputType | null
    _avg: ContactPersonAvgAggregateOutputType | null
    _sum: ContactPersonSumAggregateOutputType | null
    _min: ContactPersonMinAggregateOutputType | null
    _max: ContactPersonMaxAggregateOutputType | null
  }

  type GetContactPersonGroupByPayload<T extends ContactPersonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactPersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactPersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactPersonGroupByOutputType[P]>
            : GetScalarType<T[P], ContactPersonGroupByOutputType[P]>
        }
      >
    >


  export type ContactPersonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    schemeServiceId?: boolean
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactPerson"]>

  export type ContactPersonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    schemeServiceId?: boolean
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactPerson"]>

  export type ContactPersonSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    schemeServiceId?: boolean
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactPerson"]>

  export type ContactPersonSelectScalar = {
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    schemeServiceId?: boolean
  }

  export type ContactPersonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceName" | "district" | "subDistrict" | "block" | "name" | "designation" | "contact" | "email" | "schemeServiceId", ExtArgs["result"]["contactPerson"]>
  export type ContactPersonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }
  export type ContactPersonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }
  export type ContactPersonIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }

  export type $ContactPersonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactPerson"
    objects: {
      schemeService: Prisma.$SchemeServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      serviceName: string
      district: string
      subDistrict: string
      block: string
      name: string
      designation: string
      contact: string
      email: string
      schemeServiceId: number
    }, ExtArgs["result"]["contactPerson"]>
    composites: {}
  }

  type ContactPersonGetPayload<S extends boolean | null | undefined | ContactPersonDefaultArgs> = $Result.GetResult<Prisma.$ContactPersonPayload, S>

  type ContactPersonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactPersonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactPersonCountAggregateInputType | true
    }

  export interface ContactPersonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactPerson'], meta: { name: 'ContactPerson' } }
    /**
     * Find zero or one ContactPerson that matches the filter.
     * @param {ContactPersonFindUniqueArgs} args - Arguments to find a ContactPerson
     * @example
     * // Get one ContactPerson
     * const contactPerson = await prisma.contactPerson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactPersonFindUniqueArgs>(args: SelectSubset<T, ContactPersonFindUniqueArgs<ExtArgs>>): Prisma__ContactPersonClient<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContactPerson that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactPersonFindUniqueOrThrowArgs} args - Arguments to find a ContactPerson
     * @example
     * // Get one ContactPerson
     * const contactPerson = await prisma.contactPerson.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactPersonFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactPersonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactPersonClient<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactPerson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactPersonFindFirstArgs} args - Arguments to find a ContactPerson
     * @example
     * // Get one ContactPerson
     * const contactPerson = await prisma.contactPerson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactPersonFindFirstArgs>(args?: SelectSubset<T, ContactPersonFindFirstArgs<ExtArgs>>): Prisma__ContactPersonClient<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactPerson that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactPersonFindFirstOrThrowArgs} args - Arguments to find a ContactPerson
     * @example
     * // Get one ContactPerson
     * const contactPerson = await prisma.contactPerson.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactPersonFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactPersonFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactPersonClient<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContactPeople that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactPersonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactPeople
     * const contactPeople = await prisma.contactPerson.findMany()
     * 
     * // Get first 10 ContactPeople
     * const contactPeople = await prisma.contactPerson.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactPersonWithIdOnly = await prisma.contactPerson.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactPersonFindManyArgs>(args?: SelectSubset<T, ContactPersonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContactPerson.
     * @param {ContactPersonCreateArgs} args - Arguments to create a ContactPerson.
     * @example
     * // Create one ContactPerson
     * const ContactPerson = await prisma.contactPerson.create({
     *   data: {
     *     // ... data to create a ContactPerson
     *   }
     * })
     * 
     */
    create<T extends ContactPersonCreateArgs>(args: SelectSubset<T, ContactPersonCreateArgs<ExtArgs>>): Prisma__ContactPersonClient<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContactPeople.
     * @param {ContactPersonCreateManyArgs} args - Arguments to create many ContactPeople.
     * @example
     * // Create many ContactPeople
     * const contactPerson = await prisma.contactPerson.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactPersonCreateManyArgs>(args?: SelectSubset<T, ContactPersonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactPeople and returns the data saved in the database.
     * @param {ContactPersonCreateManyAndReturnArgs} args - Arguments to create many ContactPeople.
     * @example
     * // Create many ContactPeople
     * const contactPerson = await prisma.contactPerson.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactPeople and only return the `id`
     * const contactPersonWithIdOnly = await prisma.contactPerson.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactPersonCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactPersonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContactPerson.
     * @param {ContactPersonDeleteArgs} args - Arguments to delete one ContactPerson.
     * @example
     * // Delete one ContactPerson
     * const ContactPerson = await prisma.contactPerson.delete({
     *   where: {
     *     // ... filter to delete one ContactPerson
     *   }
     * })
     * 
     */
    delete<T extends ContactPersonDeleteArgs>(args: SelectSubset<T, ContactPersonDeleteArgs<ExtArgs>>): Prisma__ContactPersonClient<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContactPerson.
     * @param {ContactPersonUpdateArgs} args - Arguments to update one ContactPerson.
     * @example
     * // Update one ContactPerson
     * const contactPerson = await prisma.contactPerson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactPersonUpdateArgs>(args: SelectSubset<T, ContactPersonUpdateArgs<ExtArgs>>): Prisma__ContactPersonClient<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContactPeople.
     * @param {ContactPersonDeleteManyArgs} args - Arguments to filter ContactPeople to delete.
     * @example
     * // Delete a few ContactPeople
     * const { count } = await prisma.contactPerson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactPersonDeleteManyArgs>(args?: SelectSubset<T, ContactPersonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactPeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactPersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactPeople
     * const contactPerson = await prisma.contactPerson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactPersonUpdateManyArgs>(args: SelectSubset<T, ContactPersonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactPeople and returns the data updated in the database.
     * @param {ContactPersonUpdateManyAndReturnArgs} args - Arguments to update many ContactPeople.
     * @example
     * // Update many ContactPeople
     * const contactPerson = await prisma.contactPerson.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContactPeople and only return the `id`
     * const contactPersonWithIdOnly = await prisma.contactPerson.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactPersonUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactPersonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContactPerson.
     * @param {ContactPersonUpsertArgs} args - Arguments to update or create a ContactPerson.
     * @example
     * // Update or create a ContactPerson
     * const contactPerson = await prisma.contactPerson.upsert({
     *   create: {
     *     // ... data to create a ContactPerson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactPerson we want to update
     *   }
     * })
     */
    upsert<T extends ContactPersonUpsertArgs>(args: SelectSubset<T, ContactPersonUpsertArgs<ExtArgs>>): Prisma__ContactPersonClient<$Result.GetResult<Prisma.$ContactPersonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContactPeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactPersonCountArgs} args - Arguments to filter ContactPeople to count.
     * @example
     * // Count the number of ContactPeople
     * const count = await prisma.contactPerson.count({
     *   where: {
     *     // ... the filter for the ContactPeople we want to count
     *   }
     * })
    **/
    count<T extends ContactPersonCountArgs>(
      args?: Subset<T, ContactPersonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactPersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactPerson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactPersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactPersonAggregateArgs>(args: Subset<T, ContactPersonAggregateArgs>): Prisma.PrismaPromise<GetContactPersonAggregateType<T>>

    /**
     * Group by ContactPerson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactPersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactPersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactPersonGroupByArgs['orderBy'] }
        : { orderBy?: ContactPersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactPersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactPersonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactPerson model
   */
  readonly fields: ContactPersonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactPerson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactPersonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schemeService<T extends SchemeServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchemeServiceDefaultArgs<ExtArgs>>): Prisma__SchemeServiceClient<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContactPerson model
   */
  interface ContactPersonFieldRefs {
    readonly id: FieldRef<"ContactPerson", 'Int'>
    readonly serviceName: FieldRef<"ContactPerson", 'String'>
    readonly district: FieldRef<"ContactPerson", 'String'>
    readonly subDistrict: FieldRef<"ContactPerson", 'String'>
    readonly block: FieldRef<"ContactPerson", 'String'>
    readonly name: FieldRef<"ContactPerson", 'String'>
    readonly designation: FieldRef<"ContactPerson", 'String'>
    readonly contact: FieldRef<"ContactPerson", 'String'>
    readonly email: FieldRef<"ContactPerson", 'String'>
    readonly schemeServiceId: FieldRef<"ContactPerson", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ContactPerson findUnique
   */
  export type ContactPersonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonInclude<ExtArgs> | null
    /**
     * Filter, which ContactPerson to fetch.
     */
    where: ContactPersonWhereUniqueInput
  }

  /**
   * ContactPerson findUniqueOrThrow
   */
  export type ContactPersonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonInclude<ExtArgs> | null
    /**
     * Filter, which ContactPerson to fetch.
     */
    where: ContactPersonWhereUniqueInput
  }

  /**
   * ContactPerson findFirst
   */
  export type ContactPersonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonInclude<ExtArgs> | null
    /**
     * Filter, which ContactPerson to fetch.
     */
    where?: ContactPersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactPeople to fetch.
     */
    orderBy?: ContactPersonOrderByWithRelationInput | ContactPersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactPeople.
     */
    cursor?: ContactPersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactPeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactPeople.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactPeople.
     */
    distinct?: ContactPersonScalarFieldEnum | ContactPersonScalarFieldEnum[]
  }

  /**
   * ContactPerson findFirstOrThrow
   */
  export type ContactPersonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonInclude<ExtArgs> | null
    /**
     * Filter, which ContactPerson to fetch.
     */
    where?: ContactPersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactPeople to fetch.
     */
    orderBy?: ContactPersonOrderByWithRelationInput | ContactPersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactPeople.
     */
    cursor?: ContactPersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactPeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactPeople.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactPeople.
     */
    distinct?: ContactPersonScalarFieldEnum | ContactPersonScalarFieldEnum[]
  }

  /**
   * ContactPerson findMany
   */
  export type ContactPersonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonInclude<ExtArgs> | null
    /**
     * Filter, which ContactPeople to fetch.
     */
    where?: ContactPersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactPeople to fetch.
     */
    orderBy?: ContactPersonOrderByWithRelationInput | ContactPersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactPeople.
     */
    cursor?: ContactPersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactPeople from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactPeople.
     */
    skip?: number
    distinct?: ContactPersonScalarFieldEnum | ContactPersonScalarFieldEnum[]
  }

  /**
   * ContactPerson create
   */
  export type ContactPersonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonInclude<ExtArgs> | null
    /**
     * The data needed to create a ContactPerson.
     */
    data: XOR<ContactPersonCreateInput, ContactPersonUncheckedCreateInput>
  }

  /**
   * ContactPerson createMany
   */
  export type ContactPersonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactPeople.
     */
    data: ContactPersonCreateManyInput | ContactPersonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactPerson createManyAndReturn
   */
  export type ContactPersonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * The data used to create many ContactPeople.
     */
    data: ContactPersonCreateManyInput | ContactPersonCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactPerson update
   */
  export type ContactPersonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonInclude<ExtArgs> | null
    /**
     * The data needed to update a ContactPerson.
     */
    data: XOR<ContactPersonUpdateInput, ContactPersonUncheckedUpdateInput>
    /**
     * Choose, which ContactPerson to update.
     */
    where: ContactPersonWhereUniqueInput
  }

  /**
   * ContactPerson updateMany
   */
  export type ContactPersonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactPeople.
     */
    data: XOR<ContactPersonUpdateManyMutationInput, ContactPersonUncheckedUpdateManyInput>
    /**
     * Filter which ContactPeople to update
     */
    where?: ContactPersonWhereInput
    /**
     * Limit how many ContactPeople to update.
     */
    limit?: number
  }

  /**
   * ContactPerson updateManyAndReturn
   */
  export type ContactPersonUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * The data used to update ContactPeople.
     */
    data: XOR<ContactPersonUpdateManyMutationInput, ContactPersonUncheckedUpdateManyInput>
    /**
     * Filter which ContactPeople to update
     */
    where?: ContactPersonWhereInput
    /**
     * Limit how many ContactPeople to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactPerson upsert
   */
  export type ContactPersonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonInclude<ExtArgs> | null
    /**
     * The filter to search for the ContactPerson to update in case it exists.
     */
    where: ContactPersonWhereUniqueInput
    /**
     * In case the ContactPerson found by the `where` argument doesn't exist, create a new ContactPerson with this data.
     */
    create: XOR<ContactPersonCreateInput, ContactPersonUncheckedCreateInput>
    /**
     * In case the ContactPerson was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactPersonUpdateInput, ContactPersonUncheckedUpdateInput>
  }

  /**
   * ContactPerson delete
   */
  export type ContactPersonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonInclude<ExtArgs> | null
    /**
     * Filter which ContactPerson to delete.
     */
    where: ContactPersonWhereUniqueInput
  }

  /**
   * ContactPerson deleteMany
   */
  export type ContactPersonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactPeople to delete
     */
    where?: ContactPersonWhereInput
    /**
     * Limit how many ContactPeople to delete.
     */
    limit?: number
  }

  /**
   * ContactPerson without action
   */
  export type ContactPersonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactPerson
     */
    select?: ContactPersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactPerson
     */
    omit?: ContactPersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactPersonInclude<ExtArgs> | null
  }


  /**
   * Model SupportiveDocument
   */

  export type AggregateSupportiveDocument = {
    _count: SupportiveDocumentCountAggregateOutputType | null
    _avg: SupportiveDocumentAvgAggregateOutputType | null
    _sum: SupportiveDocumentSumAggregateOutputType | null
    _min: SupportiveDocumentMinAggregateOutputType | null
    _max: SupportiveDocumentMaxAggregateOutputType | null
  }

  export type SupportiveDocumentAvgAggregateOutputType = {
    id: number | null
    slNo: number | null
    schemeServiceId: number | null
  }

  export type SupportiveDocumentSumAggregateOutputType = {
    id: number | null
    slNo: number | null
    schemeServiceId: number | null
  }

  export type SupportiveDocumentMinAggregateOutputType = {
    id: number | null
    slNo: number | null
    documentType: string | null
    validProof: string | null
    isRequired: boolean | null
    schemeServiceId: number | null
  }

  export type SupportiveDocumentMaxAggregateOutputType = {
    id: number | null
    slNo: number | null
    documentType: string | null
    validProof: string | null
    isRequired: boolean | null
    schemeServiceId: number | null
  }

  export type SupportiveDocumentCountAggregateOutputType = {
    id: number
    slNo: number
    documentType: number
    validProof: number
    isRequired: number
    schemeServiceId: number
    _all: number
  }


  export type SupportiveDocumentAvgAggregateInputType = {
    id?: true
    slNo?: true
    schemeServiceId?: true
  }

  export type SupportiveDocumentSumAggregateInputType = {
    id?: true
    slNo?: true
    schemeServiceId?: true
  }

  export type SupportiveDocumentMinAggregateInputType = {
    id?: true
    slNo?: true
    documentType?: true
    validProof?: true
    isRequired?: true
    schemeServiceId?: true
  }

  export type SupportiveDocumentMaxAggregateInputType = {
    id?: true
    slNo?: true
    documentType?: true
    validProof?: true
    isRequired?: true
    schemeServiceId?: true
  }

  export type SupportiveDocumentCountAggregateInputType = {
    id?: true
    slNo?: true
    documentType?: true
    validProof?: true
    isRequired?: true
    schemeServiceId?: true
    _all?: true
  }

  export type SupportiveDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupportiveDocument to aggregate.
     */
    where?: SupportiveDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportiveDocuments to fetch.
     */
    orderBy?: SupportiveDocumentOrderByWithRelationInput | SupportiveDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupportiveDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportiveDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportiveDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SupportiveDocuments
    **/
    _count?: true | SupportiveDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SupportiveDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SupportiveDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupportiveDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupportiveDocumentMaxAggregateInputType
  }

  export type GetSupportiveDocumentAggregateType<T extends SupportiveDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateSupportiveDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupportiveDocument[P]>
      : GetScalarType<T[P], AggregateSupportiveDocument[P]>
  }




  export type SupportiveDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupportiveDocumentWhereInput
    orderBy?: SupportiveDocumentOrderByWithAggregationInput | SupportiveDocumentOrderByWithAggregationInput[]
    by: SupportiveDocumentScalarFieldEnum[] | SupportiveDocumentScalarFieldEnum
    having?: SupportiveDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupportiveDocumentCountAggregateInputType | true
    _avg?: SupportiveDocumentAvgAggregateInputType
    _sum?: SupportiveDocumentSumAggregateInputType
    _min?: SupportiveDocumentMinAggregateInputType
    _max?: SupportiveDocumentMaxAggregateInputType
  }

  export type SupportiveDocumentGroupByOutputType = {
    id: number
    slNo: number
    documentType: string
    validProof: string
    isRequired: boolean
    schemeServiceId: number
    _count: SupportiveDocumentCountAggregateOutputType | null
    _avg: SupportiveDocumentAvgAggregateOutputType | null
    _sum: SupportiveDocumentSumAggregateOutputType | null
    _min: SupportiveDocumentMinAggregateOutputType | null
    _max: SupportiveDocumentMaxAggregateOutputType | null
  }

  type GetSupportiveDocumentGroupByPayload<T extends SupportiveDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupportiveDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupportiveDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupportiveDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], SupportiveDocumentGroupByOutputType[P]>
        }
      >
    >


  export type SupportiveDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    schemeServiceId?: boolean
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supportiveDocument"]>

  export type SupportiveDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    schemeServiceId?: boolean
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supportiveDocument"]>

  export type SupportiveDocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    schemeServiceId?: boolean
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supportiveDocument"]>

  export type SupportiveDocumentSelectScalar = {
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    schemeServiceId?: boolean
  }

  export type SupportiveDocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slNo" | "documentType" | "validProof" | "isRequired" | "schemeServiceId", ExtArgs["result"]["supportiveDocument"]>
  export type SupportiveDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }
  export type SupportiveDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }
  export type SupportiveDocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schemeService?: boolean | SchemeServiceDefaultArgs<ExtArgs>
  }

  export type $SupportiveDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SupportiveDocument"
    objects: {
      schemeService: Prisma.$SchemeServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      slNo: number
      documentType: string
      validProof: string
      isRequired: boolean
      schemeServiceId: number
    }, ExtArgs["result"]["supportiveDocument"]>
    composites: {}
  }

  type SupportiveDocumentGetPayload<S extends boolean | null | undefined | SupportiveDocumentDefaultArgs> = $Result.GetResult<Prisma.$SupportiveDocumentPayload, S>

  type SupportiveDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SupportiveDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SupportiveDocumentCountAggregateInputType | true
    }

  export interface SupportiveDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SupportiveDocument'], meta: { name: 'SupportiveDocument' } }
    /**
     * Find zero or one SupportiveDocument that matches the filter.
     * @param {SupportiveDocumentFindUniqueArgs} args - Arguments to find a SupportiveDocument
     * @example
     * // Get one SupportiveDocument
     * const supportiveDocument = await prisma.supportiveDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupportiveDocumentFindUniqueArgs>(args: SelectSubset<T, SupportiveDocumentFindUniqueArgs<ExtArgs>>): Prisma__SupportiveDocumentClient<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SupportiveDocument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SupportiveDocumentFindUniqueOrThrowArgs} args - Arguments to find a SupportiveDocument
     * @example
     * // Get one SupportiveDocument
     * const supportiveDocument = await prisma.supportiveDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupportiveDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, SupportiveDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupportiveDocumentClient<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SupportiveDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportiveDocumentFindFirstArgs} args - Arguments to find a SupportiveDocument
     * @example
     * // Get one SupportiveDocument
     * const supportiveDocument = await prisma.supportiveDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupportiveDocumentFindFirstArgs>(args?: SelectSubset<T, SupportiveDocumentFindFirstArgs<ExtArgs>>): Prisma__SupportiveDocumentClient<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SupportiveDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportiveDocumentFindFirstOrThrowArgs} args - Arguments to find a SupportiveDocument
     * @example
     * // Get one SupportiveDocument
     * const supportiveDocument = await prisma.supportiveDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupportiveDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, SupportiveDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupportiveDocumentClient<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SupportiveDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportiveDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SupportiveDocuments
     * const supportiveDocuments = await prisma.supportiveDocument.findMany()
     * 
     * // Get first 10 SupportiveDocuments
     * const supportiveDocuments = await prisma.supportiveDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supportiveDocumentWithIdOnly = await prisma.supportiveDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SupportiveDocumentFindManyArgs>(args?: SelectSubset<T, SupportiveDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SupportiveDocument.
     * @param {SupportiveDocumentCreateArgs} args - Arguments to create a SupportiveDocument.
     * @example
     * // Create one SupportiveDocument
     * const SupportiveDocument = await prisma.supportiveDocument.create({
     *   data: {
     *     // ... data to create a SupportiveDocument
     *   }
     * })
     * 
     */
    create<T extends SupportiveDocumentCreateArgs>(args: SelectSubset<T, SupportiveDocumentCreateArgs<ExtArgs>>): Prisma__SupportiveDocumentClient<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SupportiveDocuments.
     * @param {SupportiveDocumentCreateManyArgs} args - Arguments to create many SupportiveDocuments.
     * @example
     * // Create many SupportiveDocuments
     * const supportiveDocument = await prisma.supportiveDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupportiveDocumentCreateManyArgs>(args?: SelectSubset<T, SupportiveDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SupportiveDocuments and returns the data saved in the database.
     * @param {SupportiveDocumentCreateManyAndReturnArgs} args - Arguments to create many SupportiveDocuments.
     * @example
     * // Create many SupportiveDocuments
     * const supportiveDocument = await prisma.supportiveDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SupportiveDocuments and only return the `id`
     * const supportiveDocumentWithIdOnly = await prisma.supportiveDocument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupportiveDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, SupportiveDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SupportiveDocument.
     * @param {SupportiveDocumentDeleteArgs} args - Arguments to delete one SupportiveDocument.
     * @example
     * // Delete one SupportiveDocument
     * const SupportiveDocument = await prisma.supportiveDocument.delete({
     *   where: {
     *     // ... filter to delete one SupportiveDocument
     *   }
     * })
     * 
     */
    delete<T extends SupportiveDocumentDeleteArgs>(args: SelectSubset<T, SupportiveDocumentDeleteArgs<ExtArgs>>): Prisma__SupportiveDocumentClient<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SupportiveDocument.
     * @param {SupportiveDocumentUpdateArgs} args - Arguments to update one SupportiveDocument.
     * @example
     * // Update one SupportiveDocument
     * const supportiveDocument = await prisma.supportiveDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupportiveDocumentUpdateArgs>(args: SelectSubset<T, SupportiveDocumentUpdateArgs<ExtArgs>>): Prisma__SupportiveDocumentClient<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SupportiveDocuments.
     * @param {SupportiveDocumentDeleteManyArgs} args - Arguments to filter SupportiveDocuments to delete.
     * @example
     * // Delete a few SupportiveDocuments
     * const { count } = await prisma.supportiveDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupportiveDocumentDeleteManyArgs>(args?: SelectSubset<T, SupportiveDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SupportiveDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportiveDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SupportiveDocuments
     * const supportiveDocument = await prisma.supportiveDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupportiveDocumentUpdateManyArgs>(args: SelectSubset<T, SupportiveDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SupportiveDocuments and returns the data updated in the database.
     * @param {SupportiveDocumentUpdateManyAndReturnArgs} args - Arguments to update many SupportiveDocuments.
     * @example
     * // Update many SupportiveDocuments
     * const supportiveDocument = await prisma.supportiveDocument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SupportiveDocuments and only return the `id`
     * const supportiveDocumentWithIdOnly = await prisma.supportiveDocument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SupportiveDocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, SupportiveDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SupportiveDocument.
     * @param {SupportiveDocumentUpsertArgs} args - Arguments to update or create a SupportiveDocument.
     * @example
     * // Update or create a SupportiveDocument
     * const supportiveDocument = await prisma.supportiveDocument.upsert({
     *   create: {
     *     // ... data to create a SupportiveDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SupportiveDocument we want to update
     *   }
     * })
     */
    upsert<T extends SupportiveDocumentUpsertArgs>(args: SelectSubset<T, SupportiveDocumentUpsertArgs<ExtArgs>>): Prisma__SupportiveDocumentClient<$Result.GetResult<Prisma.$SupportiveDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SupportiveDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportiveDocumentCountArgs} args - Arguments to filter SupportiveDocuments to count.
     * @example
     * // Count the number of SupportiveDocuments
     * const count = await prisma.supportiveDocument.count({
     *   where: {
     *     // ... the filter for the SupportiveDocuments we want to count
     *   }
     * })
    **/
    count<T extends SupportiveDocumentCountArgs>(
      args?: Subset<T, SupportiveDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupportiveDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SupportiveDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportiveDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupportiveDocumentAggregateArgs>(args: Subset<T, SupportiveDocumentAggregateArgs>): Prisma.PrismaPromise<GetSupportiveDocumentAggregateType<T>>

    /**
     * Group by SupportiveDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportiveDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupportiveDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupportiveDocumentGroupByArgs['orderBy'] }
        : { orderBy?: SupportiveDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupportiveDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupportiveDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SupportiveDocument model
   */
  readonly fields: SupportiveDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SupportiveDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupportiveDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schemeService<T extends SchemeServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchemeServiceDefaultArgs<ExtArgs>>): Prisma__SchemeServiceClient<$Result.GetResult<Prisma.$SchemeServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SupportiveDocument model
   */
  interface SupportiveDocumentFieldRefs {
    readonly id: FieldRef<"SupportiveDocument", 'Int'>
    readonly slNo: FieldRef<"SupportiveDocument", 'Int'>
    readonly documentType: FieldRef<"SupportiveDocument", 'String'>
    readonly validProof: FieldRef<"SupportiveDocument", 'String'>
    readonly isRequired: FieldRef<"SupportiveDocument", 'Boolean'>
    readonly schemeServiceId: FieldRef<"SupportiveDocument", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SupportiveDocument findUnique
   */
  export type SupportiveDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentInclude<ExtArgs> | null
    /**
     * Filter, which SupportiveDocument to fetch.
     */
    where: SupportiveDocumentWhereUniqueInput
  }

  /**
   * SupportiveDocument findUniqueOrThrow
   */
  export type SupportiveDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentInclude<ExtArgs> | null
    /**
     * Filter, which SupportiveDocument to fetch.
     */
    where: SupportiveDocumentWhereUniqueInput
  }

  /**
   * SupportiveDocument findFirst
   */
  export type SupportiveDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentInclude<ExtArgs> | null
    /**
     * Filter, which SupportiveDocument to fetch.
     */
    where?: SupportiveDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportiveDocuments to fetch.
     */
    orderBy?: SupportiveDocumentOrderByWithRelationInput | SupportiveDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupportiveDocuments.
     */
    cursor?: SupportiveDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportiveDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportiveDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupportiveDocuments.
     */
    distinct?: SupportiveDocumentScalarFieldEnum | SupportiveDocumentScalarFieldEnum[]
  }

  /**
   * SupportiveDocument findFirstOrThrow
   */
  export type SupportiveDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentInclude<ExtArgs> | null
    /**
     * Filter, which SupportiveDocument to fetch.
     */
    where?: SupportiveDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportiveDocuments to fetch.
     */
    orderBy?: SupportiveDocumentOrderByWithRelationInput | SupportiveDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupportiveDocuments.
     */
    cursor?: SupportiveDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportiveDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportiveDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupportiveDocuments.
     */
    distinct?: SupportiveDocumentScalarFieldEnum | SupportiveDocumentScalarFieldEnum[]
  }

  /**
   * SupportiveDocument findMany
   */
  export type SupportiveDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentInclude<ExtArgs> | null
    /**
     * Filter, which SupportiveDocuments to fetch.
     */
    where?: SupportiveDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupportiveDocuments to fetch.
     */
    orderBy?: SupportiveDocumentOrderByWithRelationInput | SupportiveDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SupportiveDocuments.
     */
    cursor?: SupportiveDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupportiveDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupportiveDocuments.
     */
    skip?: number
    distinct?: SupportiveDocumentScalarFieldEnum | SupportiveDocumentScalarFieldEnum[]
  }

  /**
   * SupportiveDocument create
   */
  export type SupportiveDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a SupportiveDocument.
     */
    data: XOR<SupportiveDocumentCreateInput, SupportiveDocumentUncheckedCreateInput>
  }

  /**
   * SupportiveDocument createMany
   */
  export type SupportiveDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SupportiveDocuments.
     */
    data: SupportiveDocumentCreateManyInput | SupportiveDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SupportiveDocument createManyAndReturn
   */
  export type SupportiveDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * The data used to create many SupportiveDocuments.
     */
    data: SupportiveDocumentCreateManyInput | SupportiveDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SupportiveDocument update
   */
  export type SupportiveDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a SupportiveDocument.
     */
    data: XOR<SupportiveDocumentUpdateInput, SupportiveDocumentUncheckedUpdateInput>
    /**
     * Choose, which SupportiveDocument to update.
     */
    where: SupportiveDocumentWhereUniqueInput
  }

  /**
   * SupportiveDocument updateMany
   */
  export type SupportiveDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SupportiveDocuments.
     */
    data: XOR<SupportiveDocumentUpdateManyMutationInput, SupportiveDocumentUncheckedUpdateManyInput>
    /**
     * Filter which SupportiveDocuments to update
     */
    where?: SupportiveDocumentWhereInput
    /**
     * Limit how many SupportiveDocuments to update.
     */
    limit?: number
  }

  /**
   * SupportiveDocument updateManyAndReturn
   */
  export type SupportiveDocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * The data used to update SupportiveDocuments.
     */
    data: XOR<SupportiveDocumentUpdateManyMutationInput, SupportiveDocumentUncheckedUpdateManyInput>
    /**
     * Filter which SupportiveDocuments to update
     */
    where?: SupportiveDocumentWhereInput
    /**
     * Limit how many SupportiveDocuments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SupportiveDocument upsert
   */
  export type SupportiveDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the SupportiveDocument to update in case it exists.
     */
    where: SupportiveDocumentWhereUniqueInput
    /**
     * In case the SupportiveDocument found by the `where` argument doesn't exist, create a new SupportiveDocument with this data.
     */
    create: XOR<SupportiveDocumentCreateInput, SupportiveDocumentUncheckedCreateInput>
    /**
     * In case the SupportiveDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupportiveDocumentUpdateInput, SupportiveDocumentUncheckedUpdateInput>
  }

  /**
   * SupportiveDocument delete
   */
  export type SupportiveDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentInclude<ExtArgs> | null
    /**
     * Filter which SupportiveDocument to delete.
     */
    where: SupportiveDocumentWhereUniqueInput
  }

  /**
   * SupportiveDocument deleteMany
   */
  export type SupportiveDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupportiveDocuments to delete
     */
    where?: SupportiveDocumentWhereInput
    /**
     * Limit how many SupportiveDocuments to delete.
     */
    limit?: number
  }

  /**
   * SupportiveDocument without action
   */
  export type SupportiveDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupportiveDocument
     */
    select?: SupportiveDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SupportiveDocument
     */
    omit?: SupportiveDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportiveDocumentInclude<ExtArgs> | null
  }


  /**
   * Model CertificateService
   */

  export type AggregateCertificateService = {
    _count: CertificateServiceCountAggregateOutputType | null
    _avg: CertificateServiceAvgAggregateOutputType | null
    _sum: CertificateServiceSumAggregateOutputType | null
    _min: CertificateServiceMinAggregateOutputType | null
    _max: CertificateServiceMaxAggregateOutputType | null
  }

  export type CertificateServiceAvgAggregateOutputType = {
    id: number | null
    adminId: number | null
  }

  export type CertificateServiceSumAggregateOutputType = {
    id: number | null
    adminId: number | null
  }

  export type CertificateServiceMinAggregateOutputType = {
    id: number | null
    name: string | null
    summary: string | null
    type: string | null
    applicationMode: string | null
    onlineUrl: string | null
    offlineAddress: string | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    adminId: number | null
    processNew: string | null
    processUpdate: string | null
    processLost: string | null
    processSurrender: string | null
    docNew: string | null
    docUpdate: string | null
    docLost: string | null
    docSurrender: string | null
  }

  export type CertificateServiceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    summary: string | null
    type: string | null
    applicationMode: string | null
    onlineUrl: string | null
    offlineAddress: string | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    adminId: number | null
    processNew: string | null
    processUpdate: string | null
    processLost: string | null
    processSurrender: string | null
    docNew: string | null
    docUpdate: string | null
    docLost: string | null
    docSurrender: string | null
  }

  export type CertificateServiceCountAggregateOutputType = {
    id: number
    name: number
    summary: number
    type: number
    targetAudience: number
    applicationMode: number
    onlineUrl: number
    offlineAddress: number
    status: number
    isActive: number
    createdAt: number
    updatedAt: number
    adminId: number
    eligibilityDetails: number
    certificateDetails: number
    processDetails: number
    processNew: number
    processUpdate: number
    processLost: number
    processSurrender: number
    docNew: number
    docUpdate: number
    docLost: number
    docSurrender: number
    _all: number
  }


  export type CertificateServiceAvgAggregateInputType = {
    id?: true
    adminId?: true
  }

  export type CertificateServiceSumAggregateInputType = {
    id?: true
    adminId?: true
  }

  export type CertificateServiceMinAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    type?: true
    applicationMode?: true
    onlineUrl?: true
    offlineAddress?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    processNew?: true
    processUpdate?: true
    processLost?: true
    processSurrender?: true
    docNew?: true
    docUpdate?: true
    docLost?: true
    docSurrender?: true
  }

  export type CertificateServiceMaxAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    type?: true
    applicationMode?: true
    onlineUrl?: true
    offlineAddress?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    processNew?: true
    processUpdate?: true
    processLost?: true
    processSurrender?: true
    docNew?: true
    docUpdate?: true
    docLost?: true
    docSurrender?: true
  }

  export type CertificateServiceCountAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    type?: true
    targetAudience?: true
    applicationMode?: true
    onlineUrl?: true
    offlineAddress?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    eligibilityDetails?: true
    certificateDetails?: true
    processDetails?: true
    processNew?: true
    processUpdate?: true
    processLost?: true
    processSurrender?: true
    docNew?: true
    docUpdate?: true
    docLost?: true
    docSurrender?: true
    _all?: true
  }

  export type CertificateServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateService to aggregate.
     */
    where?: CertificateServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateServices to fetch.
     */
    orderBy?: CertificateServiceOrderByWithRelationInput | CertificateServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificateServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CertificateServices
    **/
    _count?: true | CertificateServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CertificateServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CertificateServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateServiceMaxAggregateInputType
  }

  export type GetCertificateServiceAggregateType<T extends CertificateServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificateService[P]>
      : GetScalarType<T[P], AggregateCertificateService[P]>
  }




  export type CertificateServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateServiceWhereInput
    orderBy?: CertificateServiceOrderByWithAggregationInput | CertificateServiceOrderByWithAggregationInput[]
    by: CertificateServiceScalarFieldEnum[] | CertificateServiceScalarFieldEnum
    having?: CertificateServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateServiceCountAggregateInputType | true
    _avg?: CertificateServiceAvgAggregateInputType
    _sum?: CertificateServiceSumAggregateInputType
    _min?: CertificateServiceMinAggregateInputType
    _max?: CertificateServiceMaxAggregateInputType
  }

  export type CertificateServiceGroupByOutputType = {
    id: number
    name: string
    summary: string
    type: string | null
    targetAudience: string[]
    applicationMode: string
    onlineUrl: string | null
    offlineAddress: string | null
    status: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    adminId: number
    eligibilityDetails: string[]
    certificateDetails: string[]
    processDetails: string[]
    processNew: string | null
    processUpdate: string | null
    processLost: string | null
    processSurrender: string | null
    docNew: string | null
    docUpdate: string | null
    docLost: string | null
    docSurrender: string | null
    _count: CertificateServiceCountAggregateOutputType | null
    _avg: CertificateServiceAvgAggregateOutputType | null
    _sum: CertificateServiceSumAggregateOutputType | null
    _min: CertificateServiceMinAggregateOutputType | null
    _max: CertificateServiceMaxAggregateOutputType | null
  }

  type GetCertificateServiceGroupByPayload<T extends CertificateServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificateServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificateServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificateServiceGroupByOutputType[P]>
            : GetScalarType<T[P], CertificateServiceGroupByOutputType[P]>
        }
      >
    >


  export type CertificateServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    certificateDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    contacts?: boolean | CertificateService$contactsArgs<ExtArgs>
    documents?: boolean | CertificateService$documentsArgs<ExtArgs>
    processSteps?: boolean | CertificateService$processStepsArgs<ExtArgs>
    eligibilityItems?: boolean | CertificateService$eligibilityItemsArgs<ExtArgs>
    _count?: boolean | CertificateServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateService"]>

  export type CertificateServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    certificateDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateService"]>

  export type CertificateServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    certificateDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateService"]>

  export type CertificateServiceSelectScalar = {
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    certificateDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
  }

  export type CertificateServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "summary" | "type" | "targetAudience" | "applicationMode" | "onlineUrl" | "offlineAddress" | "status" | "isActive" | "createdAt" | "updatedAt" | "adminId" | "eligibilityDetails" | "certificateDetails" | "processDetails" | "processNew" | "processUpdate" | "processLost" | "processSurrender" | "docNew" | "docUpdate" | "docLost" | "docSurrender", ExtArgs["result"]["certificateService"]>
  export type CertificateServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    contacts?: boolean | CertificateService$contactsArgs<ExtArgs>
    documents?: boolean | CertificateService$documentsArgs<ExtArgs>
    processSteps?: boolean | CertificateService$processStepsArgs<ExtArgs>
    eligibilityItems?: boolean | CertificateService$eligibilityItemsArgs<ExtArgs>
    _count?: boolean | CertificateServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CertificateServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }
  export type CertificateServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }

  export type $CertificateServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CertificateService"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      contacts: Prisma.$CertificateContactPayload<ExtArgs>[]
      documents: Prisma.$CertificateDocumentPayload<ExtArgs>[]
      processSteps: Prisma.$CertificateProcessStepPayload<ExtArgs>[]
      eligibilityItems: Prisma.$CertificateEligibilityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      summary: string
      type: string | null
      targetAudience: string[]
      applicationMode: string
      onlineUrl: string | null
      offlineAddress: string | null
      status: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      adminId: number
      eligibilityDetails: string[]
      certificateDetails: string[]
      processDetails: string[]
      processNew: string | null
      processUpdate: string | null
      processLost: string | null
      processSurrender: string | null
      docNew: string | null
      docUpdate: string | null
      docLost: string | null
      docSurrender: string | null
    }, ExtArgs["result"]["certificateService"]>
    composites: {}
  }

  type CertificateServiceGetPayload<S extends boolean | null | undefined | CertificateServiceDefaultArgs> = $Result.GetResult<Prisma.$CertificateServicePayload, S>

  type CertificateServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificateServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificateServiceCountAggregateInputType | true
    }

  export interface CertificateServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CertificateService'], meta: { name: 'CertificateService' } }
    /**
     * Find zero or one CertificateService that matches the filter.
     * @param {CertificateServiceFindUniqueArgs} args - Arguments to find a CertificateService
     * @example
     * // Get one CertificateService
     * const certificateService = await prisma.certificateService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificateServiceFindUniqueArgs>(args: SelectSubset<T, CertificateServiceFindUniqueArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CertificateService that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificateServiceFindUniqueOrThrowArgs} args - Arguments to find a CertificateService
     * @example
     * // Get one CertificateService
     * const certificateService = await prisma.certificateService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificateServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificateServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateServiceFindFirstArgs} args - Arguments to find a CertificateService
     * @example
     * // Get one CertificateService
     * const certificateService = await prisma.certificateService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificateServiceFindFirstArgs>(args?: SelectSubset<T, CertificateServiceFindFirstArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateServiceFindFirstOrThrowArgs} args - Arguments to find a CertificateService
     * @example
     * // Get one CertificateService
     * const certificateService = await prisma.certificateService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificateServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificateServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CertificateServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CertificateServices
     * const certificateServices = await prisma.certificateService.findMany()
     * 
     * // Get first 10 CertificateServices
     * const certificateServices = await prisma.certificateService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateServiceWithIdOnly = await prisma.certificateService.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificateServiceFindManyArgs>(args?: SelectSubset<T, CertificateServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CertificateService.
     * @param {CertificateServiceCreateArgs} args - Arguments to create a CertificateService.
     * @example
     * // Create one CertificateService
     * const CertificateService = await prisma.certificateService.create({
     *   data: {
     *     // ... data to create a CertificateService
     *   }
     * })
     * 
     */
    create<T extends CertificateServiceCreateArgs>(args: SelectSubset<T, CertificateServiceCreateArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CertificateServices.
     * @param {CertificateServiceCreateManyArgs} args - Arguments to create many CertificateServices.
     * @example
     * // Create many CertificateServices
     * const certificateService = await prisma.certificateService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificateServiceCreateManyArgs>(args?: SelectSubset<T, CertificateServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CertificateServices and returns the data saved in the database.
     * @param {CertificateServiceCreateManyAndReturnArgs} args - Arguments to create many CertificateServices.
     * @example
     * // Create many CertificateServices
     * const certificateService = await prisma.certificateService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CertificateServices and only return the `id`
     * const certificateServiceWithIdOnly = await prisma.certificateService.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CertificateServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, CertificateServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CertificateService.
     * @param {CertificateServiceDeleteArgs} args - Arguments to delete one CertificateService.
     * @example
     * // Delete one CertificateService
     * const CertificateService = await prisma.certificateService.delete({
     *   where: {
     *     // ... filter to delete one CertificateService
     *   }
     * })
     * 
     */
    delete<T extends CertificateServiceDeleteArgs>(args: SelectSubset<T, CertificateServiceDeleteArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CertificateService.
     * @param {CertificateServiceUpdateArgs} args - Arguments to update one CertificateService.
     * @example
     * // Update one CertificateService
     * const certificateService = await prisma.certificateService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificateServiceUpdateArgs>(args: SelectSubset<T, CertificateServiceUpdateArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CertificateServices.
     * @param {CertificateServiceDeleteManyArgs} args - Arguments to filter CertificateServices to delete.
     * @example
     * // Delete a few CertificateServices
     * const { count } = await prisma.certificateService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificateServiceDeleteManyArgs>(args?: SelectSubset<T, CertificateServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CertificateServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CertificateServices
     * const certificateService = await prisma.certificateService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificateServiceUpdateManyArgs>(args: SelectSubset<T, CertificateServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CertificateServices and returns the data updated in the database.
     * @param {CertificateServiceUpdateManyAndReturnArgs} args - Arguments to update many CertificateServices.
     * @example
     * // Update many CertificateServices
     * const certificateService = await prisma.certificateService.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CertificateServices and only return the `id`
     * const certificateServiceWithIdOnly = await prisma.certificateService.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CertificateServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, CertificateServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CertificateService.
     * @param {CertificateServiceUpsertArgs} args - Arguments to update or create a CertificateService.
     * @example
     * // Update or create a CertificateService
     * const certificateService = await prisma.certificateService.upsert({
     *   create: {
     *     // ... data to create a CertificateService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CertificateService we want to update
     *   }
     * })
     */
    upsert<T extends CertificateServiceUpsertArgs>(args: SelectSubset<T, CertificateServiceUpsertArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CertificateServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateServiceCountArgs} args - Arguments to filter CertificateServices to count.
     * @example
     * // Count the number of CertificateServices
     * const count = await prisma.certificateService.count({
     *   where: {
     *     // ... the filter for the CertificateServices we want to count
     *   }
     * })
    **/
    count<T extends CertificateServiceCountArgs>(
      args?: Subset<T, CertificateServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CertificateService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateServiceAggregateArgs>(args: Subset<T, CertificateServiceAggregateArgs>): Prisma.PrismaPromise<GetCertificateServiceAggregateType<T>>

    /**
     * Group by CertificateService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateServiceGroupByArgs['orderBy'] }
        : { orderBy?: CertificateServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CertificateService model
   */
  readonly fields: CertificateServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CertificateService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificateServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contacts<T extends CertificateService$contactsArgs<ExtArgs> = {}>(args?: Subset<T, CertificateService$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends CertificateService$documentsArgs<ExtArgs> = {}>(args?: Subset<T, CertificateService$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    processSteps<T extends CertificateService$processStepsArgs<ExtArgs> = {}>(args?: Subset<T, CertificateService$processStepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    eligibilityItems<T extends CertificateService$eligibilityItemsArgs<ExtArgs> = {}>(args?: Subset<T, CertificateService$eligibilityItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CertificateService model
   */
  interface CertificateServiceFieldRefs {
    readonly id: FieldRef<"CertificateService", 'Int'>
    readonly name: FieldRef<"CertificateService", 'String'>
    readonly summary: FieldRef<"CertificateService", 'String'>
    readonly type: FieldRef<"CertificateService", 'String'>
    readonly targetAudience: FieldRef<"CertificateService", 'String[]'>
    readonly applicationMode: FieldRef<"CertificateService", 'String'>
    readonly onlineUrl: FieldRef<"CertificateService", 'String'>
    readonly offlineAddress: FieldRef<"CertificateService", 'String'>
    readonly status: FieldRef<"CertificateService", 'String'>
    readonly isActive: FieldRef<"CertificateService", 'Boolean'>
    readonly createdAt: FieldRef<"CertificateService", 'DateTime'>
    readonly updatedAt: FieldRef<"CertificateService", 'DateTime'>
    readonly adminId: FieldRef<"CertificateService", 'Int'>
    readonly eligibilityDetails: FieldRef<"CertificateService", 'String[]'>
    readonly certificateDetails: FieldRef<"CertificateService", 'String[]'>
    readonly processDetails: FieldRef<"CertificateService", 'String[]'>
    readonly processNew: FieldRef<"CertificateService", 'String'>
    readonly processUpdate: FieldRef<"CertificateService", 'String'>
    readonly processLost: FieldRef<"CertificateService", 'String'>
    readonly processSurrender: FieldRef<"CertificateService", 'String'>
    readonly docNew: FieldRef<"CertificateService", 'String'>
    readonly docUpdate: FieldRef<"CertificateService", 'String'>
    readonly docLost: FieldRef<"CertificateService", 'String'>
    readonly docSurrender: FieldRef<"CertificateService", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CertificateService findUnique
   */
  export type CertificateServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceInclude<ExtArgs> | null
    /**
     * Filter, which CertificateService to fetch.
     */
    where: CertificateServiceWhereUniqueInput
  }

  /**
   * CertificateService findUniqueOrThrow
   */
  export type CertificateServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceInclude<ExtArgs> | null
    /**
     * Filter, which CertificateService to fetch.
     */
    where: CertificateServiceWhereUniqueInput
  }

  /**
   * CertificateService findFirst
   */
  export type CertificateServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceInclude<ExtArgs> | null
    /**
     * Filter, which CertificateService to fetch.
     */
    where?: CertificateServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateServices to fetch.
     */
    orderBy?: CertificateServiceOrderByWithRelationInput | CertificateServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateServices.
     */
    cursor?: CertificateServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateServices.
     */
    distinct?: CertificateServiceScalarFieldEnum | CertificateServiceScalarFieldEnum[]
  }

  /**
   * CertificateService findFirstOrThrow
   */
  export type CertificateServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceInclude<ExtArgs> | null
    /**
     * Filter, which CertificateService to fetch.
     */
    where?: CertificateServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateServices to fetch.
     */
    orderBy?: CertificateServiceOrderByWithRelationInput | CertificateServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateServices.
     */
    cursor?: CertificateServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateServices.
     */
    distinct?: CertificateServiceScalarFieldEnum | CertificateServiceScalarFieldEnum[]
  }

  /**
   * CertificateService findMany
   */
  export type CertificateServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceInclude<ExtArgs> | null
    /**
     * Filter, which CertificateServices to fetch.
     */
    where?: CertificateServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateServices to fetch.
     */
    orderBy?: CertificateServiceOrderByWithRelationInput | CertificateServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CertificateServices.
     */
    cursor?: CertificateServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateServices.
     */
    skip?: number
    distinct?: CertificateServiceScalarFieldEnum | CertificateServiceScalarFieldEnum[]
  }

  /**
   * CertificateService create
   */
  export type CertificateServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a CertificateService.
     */
    data: XOR<CertificateServiceCreateInput, CertificateServiceUncheckedCreateInput>
  }

  /**
   * CertificateService createMany
   */
  export type CertificateServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CertificateServices.
     */
    data: CertificateServiceCreateManyInput | CertificateServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CertificateService createManyAndReturn
   */
  export type CertificateServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * The data used to create many CertificateServices.
     */
    data: CertificateServiceCreateManyInput | CertificateServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CertificateService update
   */
  export type CertificateServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a CertificateService.
     */
    data: XOR<CertificateServiceUpdateInput, CertificateServiceUncheckedUpdateInput>
    /**
     * Choose, which CertificateService to update.
     */
    where: CertificateServiceWhereUniqueInput
  }

  /**
   * CertificateService updateMany
   */
  export type CertificateServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CertificateServices.
     */
    data: XOR<CertificateServiceUpdateManyMutationInput, CertificateServiceUncheckedUpdateManyInput>
    /**
     * Filter which CertificateServices to update
     */
    where?: CertificateServiceWhereInput
    /**
     * Limit how many CertificateServices to update.
     */
    limit?: number
  }

  /**
   * CertificateService updateManyAndReturn
   */
  export type CertificateServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * The data used to update CertificateServices.
     */
    data: XOR<CertificateServiceUpdateManyMutationInput, CertificateServiceUncheckedUpdateManyInput>
    /**
     * Filter which CertificateServices to update
     */
    where?: CertificateServiceWhereInput
    /**
     * Limit how many CertificateServices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CertificateService upsert
   */
  export type CertificateServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the CertificateService to update in case it exists.
     */
    where: CertificateServiceWhereUniqueInput
    /**
     * In case the CertificateService found by the `where` argument doesn't exist, create a new CertificateService with this data.
     */
    create: XOR<CertificateServiceCreateInput, CertificateServiceUncheckedCreateInput>
    /**
     * In case the CertificateService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificateServiceUpdateInput, CertificateServiceUncheckedUpdateInput>
  }

  /**
   * CertificateService delete
   */
  export type CertificateServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceInclude<ExtArgs> | null
    /**
     * Filter which CertificateService to delete.
     */
    where: CertificateServiceWhereUniqueInput
  }

  /**
   * CertificateService deleteMany
   */
  export type CertificateServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateServices to delete
     */
    where?: CertificateServiceWhereInput
    /**
     * Limit how many CertificateServices to delete.
     */
    limit?: number
  }

  /**
   * CertificateService.contacts
   */
  export type CertificateService$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactInclude<ExtArgs> | null
    where?: CertificateContactWhereInput
    orderBy?: CertificateContactOrderByWithRelationInput | CertificateContactOrderByWithRelationInput[]
    cursor?: CertificateContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CertificateContactScalarFieldEnum | CertificateContactScalarFieldEnum[]
  }

  /**
   * CertificateService.documents
   */
  export type CertificateService$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentInclude<ExtArgs> | null
    where?: CertificateDocumentWhereInput
    orderBy?: CertificateDocumentOrderByWithRelationInput | CertificateDocumentOrderByWithRelationInput[]
    cursor?: CertificateDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CertificateDocumentScalarFieldEnum | CertificateDocumentScalarFieldEnum[]
  }

  /**
   * CertificateService.processSteps
   */
  export type CertificateService$processStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepInclude<ExtArgs> | null
    where?: CertificateProcessStepWhereInput
    orderBy?: CertificateProcessStepOrderByWithRelationInput | CertificateProcessStepOrderByWithRelationInput[]
    cursor?: CertificateProcessStepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CertificateProcessStepScalarFieldEnum | CertificateProcessStepScalarFieldEnum[]
  }

  /**
   * CertificateService.eligibilityItems
   */
  export type CertificateService$eligibilityItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityInclude<ExtArgs> | null
    where?: CertificateEligibilityWhereInput
    orderBy?: CertificateEligibilityOrderByWithRelationInput | CertificateEligibilityOrderByWithRelationInput[]
    cursor?: CertificateEligibilityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CertificateEligibilityScalarFieldEnum | CertificateEligibilityScalarFieldEnum[]
  }

  /**
   * CertificateService without action
   */
  export type CertificateServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateService
     */
    select?: CertificateServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateService
     */
    omit?: CertificateServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateServiceInclude<ExtArgs> | null
  }


  /**
   * Model CertificateContact
   */

  export type AggregateCertificateContact = {
    _count: CertificateContactCountAggregateOutputType | null
    _avg: CertificateContactAvgAggregateOutputType | null
    _sum: CertificateContactSumAggregateOutputType | null
    _min: CertificateContactMinAggregateOutputType | null
    _max: CertificateContactMaxAggregateOutputType | null
  }

  export type CertificateContactAvgAggregateOutputType = {
    id: number | null
    certificateServiceId: number | null
  }

  export type CertificateContactSumAggregateOutputType = {
    id: number | null
    certificateServiceId: number | null
  }

  export type CertificateContactMinAggregateOutputType = {
    id: number | null
    serviceName: string | null
    district: string | null
    subDistrict: string | null
    block: string | null
    name: string | null
    designation: string | null
    contact: string | null
    email: string | null
    applicationType: string | null
    certificateServiceId: number | null
  }

  export type CertificateContactMaxAggregateOutputType = {
    id: number | null
    serviceName: string | null
    district: string | null
    subDistrict: string | null
    block: string | null
    name: string | null
    designation: string | null
    contact: string | null
    email: string | null
    applicationType: string | null
    certificateServiceId: number | null
  }

  export type CertificateContactCountAggregateOutputType = {
    id: number
    serviceName: number
    district: number
    subDistrict: number
    block: number
    name: number
    designation: number
    contact: number
    email: number
    applicationType: number
    certificateServiceId: number
    _all: number
  }


  export type CertificateContactAvgAggregateInputType = {
    id?: true
    certificateServiceId?: true
  }

  export type CertificateContactSumAggregateInputType = {
    id?: true
    certificateServiceId?: true
  }

  export type CertificateContactMinAggregateInputType = {
    id?: true
    serviceName?: true
    district?: true
    subDistrict?: true
    block?: true
    name?: true
    designation?: true
    contact?: true
    email?: true
    applicationType?: true
    certificateServiceId?: true
  }

  export type CertificateContactMaxAggregateInputType = {
    id?: true
    serviceName?: true
    district?: true
    subDistrict?: true
    block?: true
    name?: true
    designation?: true
    contact?: true
    email?: true
    applicationType?: true
    certificateServiceId?: true
  }

  export type CertificateContactCountAggregateInputType = {
    id?: true
    serviceName?: true
    district?: true
    subDistrict?: true
    block?: true
    name?: true
    designation?: true
    contact?: true
    email?: true
    applicationType?: true
    certificateServiceId?: true
    _all?: true
  }

  export type CertificateContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateContact to aggregate.
     */
    where?: CertificateContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateContacts to fetch.
     */
    orderBy?: CertificateContactOrderByWithRelationInput | CertificateContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificateContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CertificateContacts
    **/
    _count?: true | CertificateContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CertificateContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CertificateContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateContactMaxAggregateInputType
  }

  export type GetCertificateContactAggregateType<T extends CertificateContactAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificateContact[P]>
      : GetScalarType<T[P], AggregateCertificateContact[P]>
  }




  export type CertificateContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateContactWhereInput
    orderBy?: CertificateContactOrderByWithAggregationInput | CertificateContactOrderByWithAggregationInput[]
    by: CertificateContactScalarFieldEnum[] | CertificateContactScalarFieldEnum
    having?: CertificateContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateContactCountAggregateInputType | true
    _avg?: CertificateContactAvgAggregateInputType
    _sum?: CertificateContactSumAggregateInputType
    _min?: CertificateContactMinAggregateInputType
    _max?: CertificateContactMaxAggregateInputType
  }

  export type CertificateContactGroupByOutputType = {
    id: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    applicationType: string
    certificateServiceId: number
    _count: CertificateContactCountAggregateOutputType | null
    _avg: CertificateContactAvgAggregateOutputType | null
    _sum: CertificateContactSumAggregateOutputType | null
    _min: CertificateContactMinAggregateOutputType | null
    _max: CertificateContactMaxAggregateOutputType | null
  }

  type GetCertificateContactGroupByPayload<T extends CertificateContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificateContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificateContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificateContactGroupByOutputType[P]>
            : GetScalarType<T[P], CertificateContactGroupByOutputType[P]>
        }
      >
    >


  export type CertificateContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateContact"]>

  export type CertificateContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateContact"]>

  export type CertificateContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateContact"]>

  export type CertificateContactSelectScalar = {
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
  }

  export type CertificateContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceName" | "district" | "subDistrict" | "block" | "name" | "designation" | "contact" | "email" | "applicationType" | "certificateServiceId", ExtArgs["result"]["certificateContact"]>
  export type CertificateContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }
  export type CertificateContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }
  export type CertificateContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }

  export type $CertificateContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CertificateContact"
    objects: {
      certificateService: Prisma.$CertificateServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      serviceName: string
      district: string
      subDistrict: string
      block: string
      name: string
      designation: string
      contact: string
      email: string
      applicationType: string
      certificateServiceId: number
    }, ExtArgs["result"]["certificateContact"]>
    composites: {}
  }

  type CertificateContactGetPayload<S extends boolean | null | undefined | CertificateContactDefaultArgs> = $Result.GetResult<Prisma.$CertificateContactPayload, S>

  type CertificateContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificateContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificateContactCountAggregateInputType | true
    }

  export interface CertificateContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CertificateContact'], meta: { name: 'CertificateContact' } }
    /**
     * Find zero or one CertificateContact that matches the filter.
     * @param {CertificateContactFindUniqueArgs} args - Arguments to find a CertificateContact
     * @example
     * // Get one CertificateContact
     * const certificateContact = await prisma.certificateContact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificateContactFindUniqueArgs>(args: SelectSubset<T, CertificateContactFindUniqueArgs<ExtArgs>>): Prisma__CertificateContactClient<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CertificateContact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificateContactFindUniqueOrThrowArgs} args - Arguments to find a CertificateContact
     * @example
     * // Get one CertificateContact
     * const certificateContact = await prisma.certificateContact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificateContactFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificateContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificateContactClient<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateContact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateContactFindFirstArgs} args - Arguments to find a CertificateContact
     * @example
     * // Get one CertificateContact
     * const certificateContact = await prisma.certificateContact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificateContactFindFirstArgs>(args?: SelectSubset<T, CertificateContactFindFirstArgs<ExtArgs>>): Prisma__CertificateContactClient<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateContact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateContactFindFirstOrThrowArgs} args - Arguments to find a CertificateContact
     * @example
     * // Get one CertificateContact
     * const certificateContact = await prisma.certificateContact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificateContactFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificateContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificateContactClient<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CertificateContacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CertificateContacts
     * const certificateContacts = await prisma.certificateContact.findMany()
     * 
     * // Get first 10 CertificateContacts
     * const certificateContacts = await prisma.certificateContact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateContactWithIdOnly = await prisma.certificateContact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificateContactFindManyArgs>(args?: SelectSubset<T, CertificateContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CertificateContact.
     * @param {CertificateContactCreateArgs} args - Arguments to create a CertificateContact.
     * @example
     * // Create one CertificateContact
     * const CertificateContact = await prisma.certificateContact.create({
     *   data: {
     *     // ... data to create a CertificateContact
     *   }
     * })
     * 
     */
    create<T extends CertificateContactCreateArgs>(args: SelectSubset<T, CertificateContactCreateArgs<ExtArgs>>): Prisma__CertificateContactClient<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CertificateContacts.
     * @param {CertificateContactCreateManyArgs} args - Arguments to create many CertificateContacts.
     * @example
     * // Create many CertificateContacts
     * const certificateContact = await prisma.certificateContact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificateContactCreateManyArgs>(args?: SelectSubset<T, CertificateContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CertificateContacts and returns the data saved in the database.
     * @param {CertificateContactCreateManyAndReturnArgs} args - Arguments to create many CertificateContacts.
     * @example
     * // Create many CertificateContacts
     * const certificateContact = await prisma.certificateContact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CertificateContacts and only return the `id`
     * const certificateContactWithIdOnly = await prisma.certificateContact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CertificateContactCreateManyAndReturnArgs>(args?: SelectSubset<T, CertificateContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CertificateContact.
     * @param {CertificateContactDeleteArgs} args - Arguments to delete one CertificateContact.
     * @example
     * // Delete one CertificateContact
     * const CertificateContact = await prisma.certificateContact.delete({
     *   where: {
     *     // ... filter to delete one CertificateContact
     *   }
     * })
     * 
     */
    delete<T extends CertificateContactDeleteArgs>(args: SelectSubset<T, CertificateContactDeleteArgs<ExtArgs>>): Prisma__CertificateContactClient<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CertificateContact.
     * @param {CertificateContactUpdateArgs} args - Arguments to update one CertificateContact.
     * @example
     * // Update one CertificateContact
     * const certificateContact = await prisma.certificateContact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificateContactUpdateArgs>(args: SelectSubset<T, CertificateContactUpdateArgs<ExtArgs>>): Prisma__CertificateContactClient<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CertificateContacts.
     * @param {CertificateContactDeleteManyArgs} args - Arguments to filter CertificateContacts to delete.
     * @example
     * // Delete a few CertificateContacts
     * const { count } = await prisma.certificateContact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificateContactDeleteManyArgs>(args?: SelectSubset<T, CertificateContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CertificateContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CertificateContacts
     * const certificateContact = await prisma.certificateContact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificateContactUpdateManyArgs>(args: SelectSubset<T, CertificateContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CertificateContacts and returns the data updated in the database.
     * @param {CertificateContactUpdateManyAndReturnArgs} args - Arguments to update many CertificateContacts.
     * @example
     * // Update many CertificateContacts
     * const certificateContact = await prisma.certificateContact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CertificateContacts and only return the `id`
     * const certificateContactWithIdOnly = await prisma.certificateContact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CertificateContactUpdateManyAndReturnArgs>(args: SelectSubset<T, CertificateContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CertificateContact.
     * @param {CertificateContactUpsertArgs} args - Arguments to update or create a CertificateContact.
     * @example
     * // Update or create a CertificateContact
     * const certificateContact = await prisma.certificateContact.upsert({
     *   create: {
     *     // ... data to create a CertificateContact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CertificateContact we want to update
     *   }
     * })
     */
    upsert<T extends CertificateContactUpsertArgs>(args: SelectSubset<T, CertificateContactUpsertArgs<ExtArgs>>): Prisma__CertificateContactClient<$Result.GetResult<Prisma.$CertificateContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CertificateContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateContactCountArgs} args - Arguments to filter CertificateContacts to count.
     * @example
     * // Count the number of CertificateContacts
     * const count = await prisma.certificateContact.count({
     *   where: {
     *     // ... the filter for the CertificateContacts we want to count
     *   }
     * })
    **/
    count<T extends CertificateContactCountArgs>(
      args?: Subset<T, CertificateContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CertificateContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateContactAggregateArgs>(args: Subset<T, CertificateContactAggregateArgs>): Prisma.PrismaPromise<GetCertificateContactAggregateType<T>>

    /**
     * Group by CertificateContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateContactGroupByArgs['orderBy'] }
        : { orderBy?: CertificateContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CertificateContact model
   */
  readonly fields: CertificateContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CertificateContact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificateContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    certificateService<T extends CertificateServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CertificateServiceDefaultArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CertificateContact model
   */
  interface CertificateContactFieldRefs {
    readonly id: FieldRef<"CertificateContact", 'Int'>
    readonly serviceName: FieldRef<"CertificateContact", 'String'>
    readonly district: FieldRef<"CertificateContact", 'String'>
    readonly subDistrict: FieldRef<"CertificateContact", 'String'>
    readonly block: FieldRef<"CertificateContact", 'String'>
    readonly name: FieldRef<"CertificateContact", 'String'>
    readonly designation: FieldRef<"CertificateContact", 'String'>
    readonly contact: FieldRef<"CertificateContact", 'String'>
    readonly email: FieldRef<"CertificateContact", 'String'>
    readonly applicationType: FieldRef<"CertificateContact", 'String'>
    readonly certificateServiceId: FieldRef<"CertificateContact", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CertificateContact findUnique
   */
  export type CertificateContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactInclude<ExtArgs> | null
    /**
     * Filter, which CertificateContact to fetch.
     */
    where: CertificateContactWhereUniqueInput
  }

  /**
   * CertificateContact findUniqueOrThrow
   */
  export type CertificateContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactInclude<ExtArgs> | null
    /**
     * Filter, which CertificateContact to fetch.
     */
    where: CertificateContactWhereUniqueInput
  }

  /**
   * CertificateContact findFirst
   */
  export type CertificateContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactInclude<ExtArgs> | null
    /**
     * Filter, which CertificateContact to fetch.
     */
    where?: CertificateContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateContacts to fetch.
     */
    orderBy?: CertificateContactOrderByWithRelationInput | CertificateContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateContacts.
     */
    cursor?: CertificateContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateContacts.
     */
    distinct?: CertificateContactScalarFieldEnum | CertificateContactScalarFieldEnum[]
  }

  /**
   * CertificateContact findFirstOrThrow
   */
  export type CertificateContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactInclude<ExtArgs> | null
    /**
     * Filter, which CertificateContact to fetch.
     */
    where?: CertificateContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateContacts to fetch.
     */
    orderBy?: CertificateContactOrderByWithRelationInput | CertificateContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateContacts.
     */
    cursor?: CertificateContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateContacts.
     */
    distinct?: CertificateContactScalarFieldEnum | CertificateContactScalarFieldEnum[]
  }

  /**
   * CertificateContact findMany
   */
  export type CertificateContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactInclude<ExtArgs> | null
    /**
     * Filter, which CertificateContacts to fetch.
     */
    where?: CertificateContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateContacts to fetch.
     */
    orderBy?: CertificateContactOrderByWithRelationInput | CertificateContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CertificateContacts.
     */
    cursor?: CertificateContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateContacts.
     */
    skip?: number
    distinct?: CertificateContactScalarFieldEnum | CertificateContactScalarFieldEnum[]
  }

  /**
   * CertificateContact create
   */
  export type CertificateContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactInclude<ExtArgs> | null
    /**
     * The data needed to create a CertificateContact.
     */
    data: XOR<CertificateContactCreateInput, CertificateContactUncheckedCreateInput>
  }

  /**
   * CertificateContact createMany
   */
  export type CertificateContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CertificateContacts.
     */
    data: CertificateContactCreateManyInput | CertificateContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CertificateContact createManyAndReturn
   */
  export type CertificateContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * The data used to create many CertificateContacts.
     */
    data: CertificateContactCreateManyInput | CertificateContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CertificateContact update
   */
  export type CertificateContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactInclude<ExtArgs> | null
    /**
     * The data needed to update a CertificateContact.
     */
    data: XOR<CertificateContactUpdateInput, CertificateContactUncheckedUpdateInput>
    /**
     * Choose, which CertificateContact to update.
     */
    where: CertificateContactWhereUniqueInput
  }

  /**
   * CertificateContact updateMany
   */
  export type CertificateContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CertificateContacts.
     */
    data: XOR<CertificateContactUpdateManyMutationInput, CertificateContactUncheckedUpdateManyInput>
    /**
     * Filter which CertificateContacts to update
     */
    where?: CertificateContactWhereInput
    /**
     * Limit how many CertificateContacts to update.
     */
    limit?: number
  }

  /**
   * CertificateContact updateManyAndReturn
   */
  export type CertificateContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * The data used to update CertificateContacts.
     */
    data: XOR<CertificateContactUpdateManyMutationInput, CertificateContactUncheckedUpdateManyInput>
    /**
     * Filter which CertificateContacts to update
     */
    where?: CertificateContactWhereInput
    /**
     * Limit how many CertificateContacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CertificateContact upsert
   */
  export type CertificateContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactInclude<ExtArgs> | null
    /**
     * The filter to search for the CertificateContact to update in case it exists.
     */
    where: CertificateContactWhereUniqueInput
    /**
     * In case the CertificateContact found by the `where` argument doesn't exist, create a new CertificateContact with this data.
     */
    create: XOR<CertificateContactCreateInput, CertificateContactUncheckedCreateInput>
    /**
     * In case the CertificateContact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificateContactUpdateInput, CertificateContactUncheckedUpdateInput>
  }

  /**
   * CertificateContact delete
   */
  export type CertificateContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactInclude<ExtArgs> | null
    /**
     * Filter which CertificateContact to delete.
     */
    where: CertificateContactWhereUniqueInput
  }

  /**
   * CertificateContact deleteMany
   */
  export type CertificateContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateContacts to delete
     */
    where?: CertificateContactWhereInput
    /**
     * Limit how many CertificateContacts to delete.
     */
    limit?: number
  }

  /**
   * CertificateContact without action
   */
  export type CertificateContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateContact
     */
    select?: CertificateContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateContact
     */
    omit?: CertificateContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateContactInclude<ExtArgs> | null
  }


  /**
   * Model CertificateDocument
   */

  export type AggregateCertificateDocument = {
    _count: CertificateDocumentCountAggregateOutputType | null
    _avg: CertificateDocumentAvgAggregateOutputType | null
    _sum: CertificateDocumentSumAggregateOutputType | null
    _min: CertificateDocumentMinAggregateOutputType | null
    _max: CertificateDocumentMaxAggregateOutputType | null
  }

  export type CertificateDocumentAvgAggregateOutputType = {
    id: number | null
    slNo: number | null
    certificateServiceId: number | null
  }

  export type CertificateDocumentSumAggregateOutputType = {
    id: number | null
    slNo: number | null
    certificateServiceId: number | null
  }

  export type CertificateDocumentMinAggregateOutputType = {
    id: number | null
    slNo: number | null
    documentType: string | null
    validProof: string | null
    isRequired: boolean | null
    applicationType: string | null
    certificateServiceId: number | null
  }

  export type CertificateDocumentMaxAggregateOutputType = {
    id: number | null
    slNo: number | null
    documentType: string | null
    validProof: string | null
    isRequired: boolean | null
    applicationType: string | null
    certificateServiceId: number | null
  }

  export type CertificateDocumentCountAggregateOutputType = {
    id: number
    slNo: number
    documentType: number
    validProof: number
    isRequired: number
    applicationType: number
    certificateServiceId: number
    _all: number
  }


  export type CertificateDocumentAvgAggregateInputType = {
    id?: true
    slNo?: true
    certificateServiceId?: true
  }

  export type CertificateDocumentSumAggregateInputType = {
    id?: true
    slNo?: true
    certificateServiceId?: true
  }

  export type CertificateDocumentMinAggregateInputType = {
    id?: true
    slNo?: true
    documentType?: true
    validProof?: true
    isRequired?: true
    applicationType?: true
    certificateServiceId?: true
  }

  export type CertificateDocumentMaxAggregateInputType = {
    id?: true
    slNo?: true
    documentType?: true
    validProof?: true
    isRequired?: true
    applicationType?: true
    certificateServiceId?: true
  }

  export type CertificateDocumentCountAggregateInputType = {
    id?: true
    slNo?: true
    documentType?: true
    validProof?: true
    isRequired?: true
    applicationType?: true
    certificateServiceId?: true
    _all?: true
  }

  export type CertificateDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateDocument to aggregate.
     */
    where?: CertificateDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateDocuments to fetch.
     */
    orderBy?: CertificateDocumentOrderByWithRelationInput | CertificateDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificateDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CertificateDocuments
    **/
    _count?: true | CertificateDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CertificateDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CertificateDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateDocumentMaxAggregateInputType
  }

  export type GetCertificateDocumentAggregateType<T extends CertificateDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificateDocument[P]>
      : GetScalarType<T[P], AggregateCertificateDocument[P]>
  }




  export type CertificateDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateDocumentWhereInput
    orderBy?: CertificateDocumentOrderByWithAggregationInput | CertificateDocumentOrderByWithAggregationInput[]
    by: CertificateDocumentScalarFieldEnum[] | CertificateDocumentScalarFieldEnum
    having?: CertificateDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateDocumentCountAggregateInputType | true
    _avg?: CertificateDocumentAvgAggregateInputType
    _sum?: CertificateDocumentSumAggregateInputType
    _min?: CertificateDocumentMinAggregateInputType
    _max?: CertificateDocumentMaxAggregateInputType
  }

  export type CertificateDocumentGroupByOutputType = {
    id: number
    slNo: number
    documentType: string
    validProof: string
    isRequired: boolean
    applicationType: string
    certificateServiceId: number
    _count: CertificateDocumentCountAggregateOutputType | null
    _avg: CertificateDocumentAvgAggregateOutputType | null
    _sum: CertificateDocumentSumAggregateOutputType | null
    _min: CertificateDocumentMinAggregateOutputType | null
    _max: CertificateDocumentMaxAggregateOutputType | null
  }

  type GetCertificateDocumentGroupByPayload<T extends CertificateDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificateDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificateDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificateDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], CertificateDocumentGroupByOutputType[P]>
        }
      >
    >


  export type CertificateDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateDocument"]>

  export type CertificateDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateDocument"]>

  export type CertificateDocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateDocument"]>

  export type CertificateDocumentSelectScalar = {
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
  }

  export type CertificateDocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slNo" | "documentType" | "validProof" | "isRequired" | "applicationType" | "certificateServiceId", ExtArgs["result"]["certificateDocument"]>
  export type CertificateDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }
  export type CertificateDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }
  export type CertificateDocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }

  export type $CertificateDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CertificateDocument"
    objects: {
      certificateService: Prisma.$CertificateServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      slNo: number
      documentType: string
      validProof: string
      isRequired: boolean
      applicationType: string
      certificateServiceId: number
    }, ExtArgs["result"]["certificateDocument"]>
    composites: {}
  }

  type CertificateDocumentGetPayload<S extends boolean | null | undefined | CertificateDocumentDefaultArgs> = $Result.GetResult<Prisma.$CertificateDocumentPayload, S>

  type CertificateDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificateDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificateDocumentCountAggregateInputType | true
    }

  export interface CertificateDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CertificateDocument'], meta: { name: 'CertificateDocument' } }
    /**
     * Find zero or one CertificateDocument that matches the filter.
     * @param {CertificateDocumentFindUniqueArgs} args - Arguments to find a CertificateDocument
     * @example
     * // Get one CertificateDocument
     * const certificateDocument = await prisma.certificateDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificateDocumentFindUniqueArgs>(args: SelectSubset<T, CertificateDocumentFindUniqueArgs<ExtArgs>>): Prisma__CertificateDocumentClient<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CertificateDocument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificateDocumentFindUniqueOrThrowArgs} args - Arguments to find a CertificateDocument
     * @example
     * // Get one CertificateDocument
     * const certificateDocument = await prisma.certificateDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificateDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificateDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificateDocumentClient<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateDocumentFindFirstArgs} args - Arguments to find a CertificateDocument
     * @example
     * // Get one CertificateDocument
     * const certificateDocument = await prisma.certificateDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificateDocumentFindFirstArgs>(args?: SelectSubset<T, CertificateDocumentFindFirstArgs<ExtArgs>>): Prisma__CertificateDocumentClient<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateDocumentFindFirstOrThrowArgs} args - Arguments to find a CertificateDocument
     * @example
     * // Get one CertificateDocument
     * const certificateDocument = await prisma.certificateDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificateDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificateDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificateDocumentClient<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CertificateDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CertificateDocuments
     * const certificateDocuments = await prisma.certificateDocument.findMany()
     * 
     * // Get first 10 CertificateDocuments
     * const certificateDocuments = await prisma.certificateDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateDocumentWithIdOnly = await prisma.certificateDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificateDocumentFindManyArgs>(args?: SelectSubset<T, CertificateDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CertificateDocument.
     * @param {CertificateDocumentCreateArgs} args - Arguments to create a CertificateDocument.
     * @example
     * // Create one CertificateDocument
     * const CertificateDocument = await prisma.certificateDocument.create({
     *   data: {
     *     // ... data to create a CertificateDocument
     *   }
     * })
     * 
     */
    create<T extends CertificateDocumentCreateArgs>(args: SelectSubset<T, CertificateDocumentCreateArgs<ExtArgs>>): Prisma__CertificateDocumentClient<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CertificateDocuments.
     * @param {CertificateDocumentCreateManyArgs} args - Arguments to create many CertificateDocuments.
     * @example
     * // Create many CertificateDocuments
     * const certificateDocument = await prisma.certificateDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificateDocumentCreateManyArgs>(args?: SelectSubset<T, CertificateDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CertificateDocuments and returns the data saved in the database.
     * @param {CertificateDocumentCreateManyAndReturnArgs} args - Arguments to create many CertificateDocuments.
     * @example
     * // Create many CertificateDocuments
     * const certificateDocument = await prisma.certificateDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CertificateDocuments and only return the `id`
     * const certificateDocumentWithIdOnly = await prisma.certificateDocument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CertificateDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, CertificateDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CertificateDocument.
     * @param {CertificateDocumentDeleteArgs} args - Arguments to delete one CertificateDocument.
     * @example
     * // Delete one CertificateDocument
     * const CertificateDocument = await prisma.certificateDocument.delete({
     *   where: {
     *     // ... filter to delete one CertificateDocument
     *   }
     * })
     * 
     */
    delete<T extends CertificateDocumentDeleteArgs>(args: SelectSubset<T, CertificateDocumentDeleteArgs<ExtArgs>>): Prisma__CertificateDocumentClient<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CertificateDocument.
     * @param {CertificateDocumentUpdateArgs} args - Arguments to update one CertificateDocument.
     * @example
     * // Update one CertificateDocument
     * const certificateDocument = await prisma.certificateDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificateDocumentUpdateArgs>(args: SelectSubset<T, CertificateDocumentUpdateArgs<ExtArgs>>): Prisma__CertificateDocumentClient<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CertificateDocuments.
     * @param {CertificateDocumentDeleteManyArgs} args - Arguments to filter CertificateDocuments to delete.
     * @example
     * // Delete a few CertificateDocuments
     * const { count } = await prisma.certificateDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificateDocumentDeleteManyArgs>(args?: SelectSubset<T, CertificateDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CertificateDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CertificateDocuments
     * const certificateDocument = await prisma.certificateDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificateDocumentUpdateManyArgs>(args: SelectSubset<T, CertificateDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CertificateDocuments and returns the data updated in the database.
     * @param {CertificateDocumentUpdateManyAndReturnArgs} args - Arguments to update many CertificateDocuments.
     * @example
     * // Update many CertificateDocuments
     * const certificateDocument = await prisma.certificateDocument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CertificateDocuments and only return the `id`
     * const certificateDocumentWithIdOnly = await prisma.certificateDocument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CertificateDocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, CertificateDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CertificateDocument.
     * @param {CertificateDocumentUpsertArgs} args - Arguments to update or create a CertificateDocument.
     * @example
     * // Update or create a CertificateDocument
     * const certificateDocument = await prisma.certificateDocument.upsert({
     *   create: {
     *     // ... data to create a CertificateDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CertificateDocument we want to update
     *   }
     * })
     */
    upsert<T extends CertificateDocumentUpsertArgs>(args: SelectSubset<T, CertificateDocumentUpsertArgs<ExtArgs>>): Prisma__CertificateDocumentClient<$Result.GetResult<Prisma.$CertificateDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CertificateDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateDocumentCountArgs} args - Arguments to filter CertificateDocuments to count.
     * @example
     * // Count the number of CertificateDocuments
     * const count = await prisma.certificateDocument.count({
     *   where: {
     *     // ... the filter for the CertificateDocuments we want to count
     *   }
     * })
    **/
    count<T extends CertificateDocumentCountArgs>(
      args?: Subset<T, CertificateDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CertificateDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateDocumentAggregateArgs>(args: Subset<T, CertificateDocumentAggregateArgs>): Prisma.PrismaPromise<GetCertificateDocumentAggregateType<T>>

    /**
     * Group by CertificateDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateDocumentGroupByArgs['orderBy'] }
        : { orderBy?: CertificateDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CertificateDocument model
   */
  readonly fields: CertificateDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CertificateDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificateDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    certificateService<T extends CertificateServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CertificateServiceDefaultArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CertificateDocument model
   */
  interface CertificateDocumentFieldRefs {
    readonly id: FieldRef<"CertificateDocument", 'Int'>
    readonly slNo: FieldRef<"CertificateDocument", 'Int'>
    readonly documentType: FieldRef<"CertificateDocument", 'String'>
    readonly validProof: FieldRef<"CertificateDocument", 'String'>
    readonly isRequired: FieldRef<"CertificateDocument", 'Boolean'>
    readonly applicationType: FieldRef<"CertificateDocument", 'String'>
    readonly certificateServiceId: FieldRef<"CertificateDocument", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CertificateDocument findUnique
   */
  export type CertificateDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CertificateDocument to fetch.
     */
    where: CertificateDocumentWhereUniqueInput
  }

  /**
   * CertificateDocument findUniqueOrThrow
   */
  export type CertificateDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CertificateDocument to fetch.
     */
    where: CertificateDocumentWhereUniqueInput
  }

  /**
   * CertificateDocument findFirst
   */
  export type CertificateDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CertificateDocument to fetch.
     */
    where?: CertificateDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateDocuments to fetch.
     */
    orderBy?: CertificateDocumentOrderByWithRelationInput | CertificateDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateDocuments.
     */
    cursor?: CertificateDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateDocuments.
     */
    distinct?: CertificateDocumentScalarFieldEnum | CertificateDocumentScalarFieldEnum[]
  }

  /**
   * CertificateDocument findFirstOrThrow
   */
  export type CertificateDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CertificateDocument to fetch.
     */
    where?: CertificateDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateDocuments to fetch.
     */
    orderBy?: CertificateDocumentOrderByWithRelationInput | CertificateDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateDocuments.
     */
    cursor?: CertificateDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateDocuments.
     */
    distinct?: CertificateDocumentScalarFieldEnum | CertificateDocumentScalarFieldEnum[]
  }

  /**
   * CertificateDocument findMany
   */
  export type CertificateDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CertificateDocuments to fetch.
     */
    where?: CertificateDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateDocuments to fetch.
     */
    orderBy?: CertificateDocumentOrderByWithRelationInput | CertificateDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CertificateDocuments.
     */
    cursor?: CertificateDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateDocuments.
     */
    skip?: number
    distinct?: CertificateDocumentScalarFieldEnum | CertificateDocumentScalarFieldEnum[]
  }

  /**
   * CertificateDocument create
   */
  export type CertificateDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a CertificateDocument.
     */
    data: XOR<CertificateDocumentCreateInput, CertificateDocumentUncheckedCreateInput>
  }

  /**
   * CertificateDocument createMany
   */
  export type CertificateDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CertificateDocuments.
     */
    data: CertificateDocumentCreateManyInput | CertificateDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CertificateDocument createManyAndReturn
   */
  export type CertificateDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * The data used to create many CertificateDocuments.
     */
    data: CertificateDocumentCreateManyInput | CertificateDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CertificateDocument update
   */
  export type CertificateDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a CertificateDocument.
     */
    data: XOR<CertificateDocumentUpdateInput, CertificateDocumentUncheckedUpdateInput>
    /**
     * Choose, which CertificateDocument to update.
     */
    where: CertificateDocumentWhereUniqueInput
  }

  /**
   * CertificateDocument updateMany
   */
  export type CertificateDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CertificateDocuments.
     */
    data: XOR<CertificateDocumentUpdateManyMutationInput, CertificateDocumentUncheckedUpdateManyInput>
    /**
     * Filter which CertificateDocuments to update
     */
    where?: CertificateDocumentWhereInput
    /**
     * Limit how many CertificateDocuments to update.
     */
    limit?: number
  }

  /**
   * CertificateDocument updateManyAndReturn
   */
  export type CertificateDocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * The data used to update CertificateDocuments.
     */
    data: XOR<CertificateDocumentUpdateManyMutationInput, CertificateDocumentUncheckedUpdateManyInput>
    /**
     * Filter which CertificateDocuments to update
     */
    where?: CertificateDocumentWhereInput
    /**
     * Limit how many CertificateDocuments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CertificateDocument upsert
   */
  export type CertificateDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the CertificateDocument to update in case it exists.
     */
    where: CertificateDocumentWhereUniqueInput
    /**
     * In case the CertificateDocument found by the `where` argument doesn't exist, create a new CertificateDocument with this data.
     */
    create: XOR<CertificateDocumentCreateInput, CertificateDocumentUncheckedCreateInput>
    /**
     * In case the CertificateDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificateDocumentUpdateInput, CertificateDocumentUncheckedUpdateInput>
  }

  /**
   * CertificateDocument delete
   */
  export type CertificateDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentInclude<ExtArgs> | null
    /**
     * Filter which CertificateDocument to delete.
     */
    where: CertificateDocumentWhereUniqueInput
  }

  /**
   * CertificateDocument deleteMany
   */
  export type CertificateDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateDocuments to delete
     */
    where?: CertificateDocumentWhereInput
    /**
     * Limit how many CertificateDocuments to delete.
     */
    limit?: number
  }

  /**
   * CertificateDocument without action
   */
  export type CertificateDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateDocument
     */
    select?: CertificateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateDocument
     */
    omit?: CertificateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateDocumentInclude<ExtArgs> | null
  }


  /**
   * Model CertificateProcessStep
   */

  export type AggregateCertificateProcessStep = {
    _count: CertificateProcessStepCountAggregateOutputType | null
    _avg: CertificateProcessStepAvgAggregateOutputType | null
    _sum: CertificateProcessStepSumAggregateOutputType | null
    _min: CertificateProcessStepMinAggregateOutputType | null
    _max: CertificateProcessStepMaxAggregateOutputType | null
  }

  export type CertificateProcessStepAvgAggregateOutputType = {
    id: number | null
    slNo: number | null
    certificateServiceId: number | null
  }

  export type CertificateProcessStepSumAggregateOutputType = {
    id: number | null
    slNo: number | null
    certificateServiceId: number | null
  }

  export type CertificateProcessStepMinAggregateOutputType = {
    id: number | null
    slNo: number | null
    stepDetails: string | null
    applicationType: string | null
    certificateServiceId: number | null
  }

  export type CertificateProcessStepMaxAggregateOutputType = {
    id: number | null
    slNo: number | null
    stepDetails: string | null
    applicationType: string | null
    certificateServiceId: number | null
  }

  export type CertificateProcessStepCountAggregateOutputType = {
    id: number
    slNo: number
    stepDetails: number
    applicationType: number
    certificateServiceId: number
    _all: number
  }


  export type CertificateProcessStepAvgAggregateInputType = {
    id?: true
    slNo?: true
    certificateServiceId?: true
  }

  export type CertificateProcessStepSumAggregateInputType = {
    id?: true
    slNo?: true
    certificateServiceId?: true
  }

  export type CertificateProcessStepMinAggregateInputType = {
    id?: true
    slNo?: true
    stepDetails?: true
    applicationType?: true
    certificateServiceId?: true
  }

  export type CertificateProcessStepMaxAggregateInputType = {
    id?: true
    slNo?: true
    stepDetails?: true
    applicationType?: true
    certificateServiceId?: true
  }

  export type CertificateProcessStepCountAggregateInputType = {
    id?: true
    slNo?: true
    stepDetails?: true
    applicationType?: true
    certificateServiceId?: true
    _all?: true
  }

  export type CertificateProcessStepAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateProcessStep to aggregate.
     */
    where?: CertificateProcessStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateProcessSteps to fetch.
     */
    orderBy?: CertificateProcessStepOrderByWithRelationInput | CertificateProcessStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificateProcessStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateProcessSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateProcessSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CertificateProcessSteps
    **/
    _count?: true | CertificateProcessStepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CertificateProcessStepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CertificateProcessStepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateProcessStepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateProcessStepMaxAggregateInputType
  }

  export type GetCertificateProcessStepAggregateType<T extends CertificateProcessStepAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificateProcessStep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificateProcessStep[P]>
      : GetScalarType<T[P], AggregateCertificateProcessStep[P]>
  }




  export type CertificateProcessStepGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateProcessStepWhereInput
    orderBy?: CertificateProcessStepOrderByWithAggregationInput | CertificateProcessStepOrderByWithAggregationInput[]
    by: CertificateProcessStepScalarFieldEnum[] | CertificateProcessStepScalarFieldEnum
    having?: CertificateProcessStepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateProcessStepCountAggregateInputType | true
    _avg?: CertificateProcessStepAvgAggregateInputType
    _sum?: CertificateProcessStepSumAggregateInputType
    _min?: CertificateProcessStepMinAggregateInputType
    _max?: CertificateProcessStepMaxAggregateInputType
  }

  export type CertificateProcessStepGroupByOutputType = {
    id: number
    slNo: number
    stepDetails: string
    applicationType: string
    certificateServiceId: number
    _count: CertificateProcessStepCountAggregateOutputType | null
    _avg: CertificateProcessStepAvgAggregateOutputType | null
    _sum: CertificateProcessStepSumAggregateOutputType | null
    _min: CertificateProcessStepMinAggregateOutputType | null
    _max: CertificateProcessStepMaxAggregateOutputType | null
  }

  type GetCertificateProcessStepGroupByPayload<T extends CertificateProcessStepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificateProcessStepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificateProcessStepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificateProcessStepGroupByOutputType[P]>
            : GetScalarType<T[P], CertificateProcessStepGroupByOutputType[P]>
        }
      >
    >


  export type CertificateProcessStepSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    stepDetails?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateProcessStep"]>

  export type CertificateProcessStepSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    stepDetails?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateProcessStep"]>

  export type CertificateProcessStepSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    stepDetails?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateProcessStep"]>

  export type CertificateProcessStepSelectScalar = {
    id?: boolean
    slNo?: boolean
    stepDetails?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
  }

  export type CertificateProcessStepOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slNo" | "stepDetails" | "applicationType" | "certificateServiceId", ExtArgs["result"]["certificateProcessStep"]>
  export type CertificateProcessStepInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }
  export type CertificateProcessStepIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }
  export type CertificateProcessStepIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }

  export type $CertificateProcessStepPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CertificateProcessStep"
    objects: {
      certificateService: Prisma.$CertificateServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      slNo: number
      stepDetails: string
      applicationType: string
      certificateServiceId: number
    }, ExtArgs["result"]["certificateProcessStep"]>
    composites: {}
  }

  type CertificateProcessStepGetPayload<S extends boolean | null | undefined | CertificateProcessStepDefaultArgs> = $Result.GetResult<Prisma.$CertificateProcessStepPayload, S>

  type CertificateProcessStepCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificateProcessStepFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificateProcessStepCountAggregateInputType | true
    }

  export interface CertificateProcessStepDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CertificateProcessStep'], meta: { name: 'CertificateProcessStep' } }
    /**
     * Find zero or one CertificateProcessStep that matches the filter.
     * @param {CertificateProcessStepFindUniqueArgs} args - Arguments to find a CertificateProcessStep
     * @example
     * // Get one CertificateProcessStep
     * const certificateProcessStep = await prisma.certificateProcessStep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificateProcessStepFindUniqueArgs>(args: SelectSubset<T, CertificateProcessStepFindUniqueArgs<ExtArgs>>): Prisma__CertificateProcessStepClient<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CertificateProcessStep that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificateProcessStepFindUniqueOrThrowArgs} args - Arguments to find a CertificateProcessStep
     * @example
     * // Get one CertificateProcessStep
     * const certificateProcessStep = await prisma.certificateProcessStep.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificateProcessStepFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificateProcessStepFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificateProcessStepClient<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateProcessStep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateProcessStepFindFirstArgs} args - Arguments to find a CertificateProcessStep
     * @example
     * // Get one CertificateProcessStep
     * const certificateProcessStep = await prisma.certificateProcessStep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificateProcessStepFindFirstArgs>(args?: SelectSubset<T, CertificateProcessStepFindFirstArgs<ExtArgs>>): Prisma__CertificateProcessStepClient<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateProcessStep that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateProcessStepFindFirstOrThrowArgs} args - Arguments to find a CertificateProcessStep
     * @example
     * // Get one CertificateProcessStep
     * const certificateProcessStep = await prisma.certificateProcessStep.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificateProcessStepFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificateProcessStepFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificateProcessStepClient<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CertificateProcessSteps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateProcessStepFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CertificateProcessSteps
     * const certificateProcessSteps = await prisma.certificateProcessStep.findMany()
     * 
     * // Get first 10 CertificateProcessSteps
     * const certificateProcessSteps = await prisma.certificateProcessStep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateProcessStepWithIdOnly = await prisma.certificateProcessStep.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificateProcessStepFindManyArgs>(args?: SelectSubset<T, CertificateProcessStepFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CertificateProcessStep.
     * @param {CertificateProcessStepCreateArgs} args - Arguments to create a CertificateProcessStep.
     * @example
     * // Create one CertificateProcessStep
     * const CertificateProcessStep = await prisma.certificateProcessStep.create({
     *   data: {
     *     // ... data to create a CertificateProcessStep
     *   }
     * })
     * 
     */
    create<T extends CertificateProcessStepCreateArgs>(args: SelectSubset<T, CertificateProcessStepCreateArgs<ExtArgs>>): Prisma__CertificateProcessStepClient<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CertificateProcessSteps.
     * @param {CertificateProcessStepCreateManyArgs} args - Arguments to create many CertificateProcessSteps.
     * @example
     * // Create many CertificateProcessSteps
     * const certificateProcessStep = await prisma.certificateProcessStep.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificateProcessStepCreateManyArgs>(args?: SelectSubset<T, CertificateProcessStepCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CertificateProcessSteps and returns the data saved in the database.
     * @param {CertificateProcessStepCreateManyAndReturnArgs} args - Arguments to create many CertificateProcessSteps.
     * @example
     * // Create many CertificateProcessSteps
     * const certificateProcessStep = await prisma.certificateProcessStep.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CertificateProcessSteps and only return the `id`
     * const certificateProcessStepWithIdOnly = await prisma.certificateProcessStep.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CertificateProcessStepCreateManyAndReturnArgs>(args?: SelectSubset<T, CertificateProcessStepCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CertificateProcessStep.
     * @param {CertificateProcessStepDeleteArgs} args - Arguments to delete one CertificateProcessStep.
     * @example
     * // Delete one CertificateProcessStep
     * const CertificateProcessStep = await prisma.certificateProcessStep.delete({
     *   where: {
     *     // ... filter to delete one CertificateProcessStep
     *   }
     * })
     * 
     */
    delete<T extends CertificateProcessStepDeleteArgs>(args: SelectSubset<T, CertificateProcessStepDeleteArgs<ExtArgs>>): Prisma__CertificateProcessStepClient<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CertificateProcessStep.
     * @param {CertificateProcessStepUpdateArgs} args - Arguments to update one CertificateProcessStep.
     * @example
     * // Update one CertificateProcessStep
     * const certificateProcessStep = await prisma.certificateProcessStep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificateProcessStepUpdateArgs>(args: SelectSubset<T, CertificateProcessStepUpdateArgs<ExtArgs>>): Prisma__CertificateProcessStepClient<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CertificateProcessSteps.
     * @param {CertificateProcessStepDeleteManyArgs} args - Arguments to filter CertificateProcessSteps to delete.
     * @example
     * // Delete a few CertificateProcessSteps
     * const { count } = await prisma.certificateProcessStep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificateProcessStepDeleteManyArgs>(args?: SelectSubset<T, CertificateProcessStepDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CertificateProcessSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateProcessStepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CertificateProcessSteps
     * const certificateProcessStep = await prisma.certificateProcessStep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificateProcessStepUpdateManyArgs>(args: SelectSubset<T, CertificateProcessStepUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CertificateProcessSteps and returns the data updated in the database.
     * @param {CertificateProcessStepUpdateManyAndReturnArgs} args - Arguments to update many CertificateProcessSteps.
     * @example
     * // Update many CertificateProcessSteps
     * const certificateProcessStep = await prisma.certificateProcessStep.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CertificateProcessSteps and only return the `id`
     * const certificateProcessStepWithIdOnly = await prisma.certificateProcessStep.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CertificateProcessStepUpdateManyAndReturnArgs>(args: SelectSubset<T, CertificateProcessStepUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CertificateProcessStep.
     * @param {CertificateProcessStepUpsertArgs} args - Arguments to update or create a CertificateProcessStep.
     * @example
     * // Update or create a CertificateProcessStep
     * const certificateProcessStep = await prisma.certificateProcessStep.upsert({
     *   create: {
     *     // ... data to create a CertificateProcessStep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CertificateProcessStep we want to update
     *   }
     * })
     */
    upsert<T extends CertificateProcessStepUpsertArgs>(args: SelectSubset<T, CertificateProcessStepUpsertArgs<ExtArgs>>): Prisma__CertificateProcessStepClient<$Result.GetResult<Prisma.$CertificateProcessStepPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CertificateProcessSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateProcessStepCountArgs} args - Arguments to filter CertificateProcessSteps to count.
     * @example
     * // Count the number of CertificateProcessSteps
     * const count = await prisma.certificateProcessStep.count({
     *   where: {
     *     // ... the filter for the CertificateProcessSteps we want to count
     *   }
     * })
    **/
    count<T extends CertificateProcessStepCountArgs>(
      args?: Subset<T, CertificateProcessStepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateProcessStepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CertificateProcessStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateProcessStepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateProcessStepAggregateArgs>(args: Subset<T, CertificateProcessStepAggregateArgs>): Prisma.PrismaPromise<GetCertificateProcessStepAggregateType<T>>

    /**
     * Group by CertificateProcessStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateProcessStepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateProcessStepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateProcessStepGroupByArgs['orderBy'] }
        : { orderBy?: CertificateProcessStepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateProcessStepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateProcessStepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CertificateProcessStep model
   */
  readonly fields: CertificateProcessStepFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CertificateProcessStep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificateProcessStepClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    certificateService<T extends CertificateServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CertificateServiceDefaultArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CertificateProcessStep model
   */
  interface CertificateProcessStepFieldRefs {
    readonly id: FieldRef<"CertificateProcessStep", 'Int'>
    readonly slNo: FieldRef<"CertificateProcessStep", 'Int'>
    readonly stepDetails: FieldRef<"CertificateProcessStep", 'String'>
    readonly applicationType: FieldRef<"CertificateProcessStep", 'String'>
    readonly certificateServiceId: FieldRef<"CertificateProcessStep", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CertificateProcessStep findUnique
   */
  export type CertificateProcessStepFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepInclude<ExtArgs> | null
    /**
     * Filter, which CertificateProcessStep to fetch.
     */
    where: CertificateProcessStepWhereUniqueInput
  }

  /**
   * CertificateProcessStep findUniqueOrThrow
   */
  export type CertificateProcessStepFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepInclude<ExtArgs> | null
    /**
     * Filter, which CertificateProcessStep to fetch.
     */
    where: CertificateProcessStepWhereUniqueInput
  }

  /**
   * CertificateProcessStep findFirst
   */
  export type CertificateProcessStepFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepInclude<ExtArgs> | null
    /**
     * Filter, which CertificateProcessStep to fetch.
     */
    where?: CertificateProcessStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateProcessSteps to fetch.
     */
    orderBy?: CertificateProcessStepOrderByWithRelationInput | CertificateProcessStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateProcessSteps.
     */
    cursor?: CertificateProcessStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateProcessSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateProcessSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateProcessSteps.
     */
    distinct?: CertificateProcessStepScalarFieldEnum | CertificateProcessStepScalarFieldEnum[]
  }

  /**
   * CertificateProcessStep findFirstOrThrow
   */
  export type CertificateProcessStepFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepInclude<ExtArgs> | null
    /**
     * Filter, which CertificateProcessStep to fetch.
     */
    where?: CertificateProcessStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateProcessSteps to fetch.
     */
    orderBy?: CertificateProcessStepOrderByWithRelationInput | CertificateProcessStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateProcessSteps.
     */
    cursor?: CertificateProcessStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateProcessSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateProcessSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateProcessSteps.
     */
    distinct?: CertificateProcessStepScalarFieldEnum | CertificateProcessStepScalarFieldEnum[]
  }

  /**
   * CertificateProcessStep findMany
   */
  export type CertificateProcessStepFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepInclude<ExtArgs> | null
    /**
     * Filter, which CertificateProcessSteps to fetch.
     */
    where?: CertificateProcessStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateProcessSteps to fetch.
     */
    orderBy?: CertificateProcessStepOrderByWithRelationInput | CertificateProcessStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CertificateProcessSteps.
     */
    cursor?: CertificateProcessStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateProcessSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateProcessSteps.
     */
    skip?: number
    distinct?: CertificateProcessStepScalarFieldEnum | CertificateProcessStepScalarFieldEnum[]
  }

  /**
   * CertificateProcessStep create
   */
  export type CertificateProcessStepCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepInclude<ExtArgs> | null
    /**
     * The data needed to create a CertificateProcessStep.
     */
    data: XOR<CertificateProcessStepCreateInput, CertificateProcessStepUncheckedCreateInput>
  }

  /**
   * CertificateProcessStep createMany
   */
  export type CertificateProcessStepCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CertificateProcessSteps.
     */
    data: CertificateProcessStepCreateManyInput | CertificateProcessStepCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CertificateProcessStep createManyAndReturn
   */
  export type CertificateProcessStepCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * The data used to create many CertificateProcessSteps.
     */
    data: CertificateProcessStepCreateManyInput | CertificateProcessStepCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CertificateProcessStep update
   */
  export type CertificateProcessStepUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepInclude<ExtArgs> | null
    /**
     * The data needed to update a CertificateProcessStep.
     */
    data: XOR<CertificateProcessStepUpdateInput, CertificateProcessStepUncheckedUpdateInput>
    /**
     * Choose, which CertificateProcessStep to update.
     */
    where: CertificateProcessStepWhereUniqueInput
  }

  /**
   * CertificateProcessStep updateMany
   */
  export type CertificateProcessStepUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CertificateProcessSteps.
     */
    data: XOR<CertificateProcessStepUpdateManyMutationInput, CertificateProcessStepUncheckedUpdateManyInput>
    /**
     * Filter which CertificateProcessSteps to update
     */
    where?: CertificateProcessStepWhereInput
    /**
     * Limit how many CertificateProcessSteps to update.
     */
    limit?: number
  }

  /**
   * CertificateProcessStep updateManyAndReturn
   */
  export type CertificateProcessStepUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * The data used to update CertificateProcessSteps.
     */
    data: XOR<CertificateProcessStepUpdateManyMutationInput, CertificateProcessStepUncheckedUpdateManyInput>
    /**
     * Filter which CertificateProcessSteps to update
     */
    where?: CertificateProcessStepWhereInput
    /**
     * Limit how many CertificateProcessSteps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CertificateProcessStep upsert
   */
  export type CertificateProcessStepUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepInclude<ExtArgs> | null
    /**
     * The filter to search for the CertificateProcessStep to update in case it exists.
     */
    where: CertificateProcessStepWhereUniqueInput
    /**
     * In case the CertificateProcessStep found by the `where` argument doesn't exist, create a new CertificateProcessStep with this data.
     */
    create: XOR<CertificateProcessStepCreateInput, CertificateProcessStepUncheckedCreateInput>
    /**
     * In case the CertificateProcessStep was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificateProcessStepUpdateInput, CertificateProcessStepUncheckedUpdateInput>
  }

  /**
   * CertificateProcessStep delete
   */
  export type CertificateProcessStepDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepInclude<ExtArgs> | null
    /**
     * Filter which CertificateProcessStep to delete.
     */
    where: CertificateProcessStepWhereUniqueInput
  }

  /**
   * CertificateProcessStep deleteMany
   */
  export type CertificateProcessStepDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateProcessSteps to delete
     */
    where?: CertificateProcessStepWhereInput
    /**
     * Limit how many CertificateProcessSteps to delete.
     */
    limit?: number
  }

  /**
   * CertificateProcessStep without action
   */
  export type CertificateProcessStepDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateProcessStep
     */
    select?: CertificateProcessStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateProcessStep
     */
    omit?: CertificateProcessStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateProcessStepInclude<ExtArgs> | null
  }


  /**
   * Model CertificateEligibility
   */

  export type AggregateCertificateEligibility = {
    _count: CertificateEligibilityCountAggregateOutputType | null
    _avg: CertificateEligibilityAvgAggregateOutputType | null
    _sum: CertificateEligibilitySumAggregateOutputType | null
    _min: CertificateEligibilityMinAggregateOutputType | null
    _max: CertificateEligibilityMaxAggregateOutputType | null
  }

  export type CertificateEligibilityAvgAggregateOutputType = {
    id: number | null
    certificateServiceId: number | null
  }

  export type CertificateEligibilitySumAggregateOutputType = {
    id: number | null
    certificateServiceId: number | null
  }

  export type CertificateEligibilityMinAggregateOutputType = {
    id: number | null
    eligibilityDetail: string | null
    applicationType: string | null
    certificateServiceId: number | null
  }

  export type CertificateEligibilityMaxAggregateOutputType = {
    id: number | null
    eligibilityDetail: string | null
    applicationType: string | null
    certificateServiceId: number | null
  }

  export type CertificateEligibilityCountAggregateOutputType = {
    id: number
    eligibilityDetail: number
    applicationType: number
    certificateServiceId: number
    _all: number
  }


  export type CertificateEligibilityAvgAggregateInputType = {
    id?: true
    certificateServiceId?: true
  }

  export type CertificateEligibilitySumAggregateInputType = {
    id?: true
    certificateServiceId?: true
  }

  export type CertificateEligibilityMinAggregateInputType = {
    id?: true
    eligibilityDetail?: true
    applicationType?: true
    certificateServiceId?: true
  }

  export type CertificateEligibilityMaxAggregateInputType = {
    id?: true
    eligibilityDetail?: true
    applicationType?: true
    certificateServiceId?: true
  }

  export type CertificateEligibilityCountAggregateInputType = {
    id?: true
    eligibilityDetail?: true
    applicationType?: true
    certificateServiceId?: true
    _all?: true
  }

  export type CertificateEligibilityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateEligibility to aggregate.
     */
    where?: CertificateEligibilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateEligibilities to fetch.
     */
    orderBy?: CertificateEligibilityOrderByWithRelationInput | CertificateEligibilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificateEligibilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateEligibilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateEligibilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CertificateEligibilities
    **/
    _count?: true | CertificateEligibilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CertificateEligibilityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CertificateEligibilitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateEligibilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateEligibilityMaxAggregateInputType
  }

  export type GetCertificateEligibilityAggregateType<T extends CertificateEligibilityAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificateEligibility]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificateEligibility[P]>
      : GetScalarType<T[P], AggregateCertificateEligibility[P]>
  }




  export type CertificateEligibilityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateEligibilityWhereInput
    orderBy?: CertificateEligibilityOrderByWithAggregationInput | CertificateEligibilityOrderByWithAggregationInput[]
    by: CertificateEligibilityScalarFieldEnum[] | CertificateEligibilityScalarFieldEnum
    having?: CertificateEligibilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateEligibilityCountAggregateInputType | true
    _avg?: CertificateEligibilityAvgAggregateInputType
    _sum?: CertificateEligibilitySumAggregateInputType
    _min?: CertificateEligibilityMinAggregateInputType
    _max?: CertificateEligibilityMaxAggregateInputType
  }

  export type CertificateEligibilityGroupByOutputType = {
    id: number
    eligibilityDetail: string
    applicationType: string
    certificateServiceId: number
    _count: CertificateEligibilityCountAggregateOutputType | null
    _avg: CertificateEligibilityAvgAggregateOutputType | null
    _sum: CertificateEligibilitySumAggregateOutputType | null
    _min: CertificateEligibilityMinAggregateOutputType | null
    _max: CertificateEligibilityMaxAggregateOutputType | null
  }

  type GetCertificateEligibilityGroupByPayload<T extends CertificateEligibilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificateEligibilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificateEligibilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificateEligibilityGroupByOutputType[P]>
            : GetScalarType<T[P], CertificateEligibilityGroupByOutputType[P]>
        }
      >
    >


  export type CertificateEligibilitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eligibilityDetail?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateEligibility"]>

  export type CertificateEligibilitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eligibilityDetail?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateEligibility"]>

  export type CertificateEligibilitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eligibilityDetail?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificateEligibility"]>

  export type CertificateEligibilitySelectScalar = {
    id?: boolean
    eligibilityDetail?: boolean
    applicationType?: boolean
    certificateServiceId?: boolean
  }

  export type CertificateEligibilityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eligibilityDetail" | "applicationType" | "certificateServiceId", ExtArgs["result"]["certificateEligibility"]>
  export type CertificateEligibilityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }
  export type CertificateEligibilityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }
  export type CertificateEligibilityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certificateService?: boolean | CertificateServiceDefaultArgs<ExtArgs>
  }

  export type $CertificateEligibilityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CertificateEligibility"
    objects: {
      certificateService: Prisma.$CertificateServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      eligibilityDetail: string
      applicationType: string
      certificateServiceId: number
    }, ExtArgs["result"]["certificateEligibility"]>
    composites: {}
  }

  type CertificateEligibilityGetPayload<S extends boolean | null | undefined | CertificateEligibilityDefaultArgs> = $Result.GetResult<Prisma.$CertificateEligibilityPayload, S>

  type CertificateEligibilityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificateEligibilityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificateEligibilityCountAggregateInputType | true
    }

  export interface CertificateEligibilityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CertificateEligibility'], meta: { name: 'CertificateEligibility' } }
    /**
     * Find zero or one CertificateEligibility that matches the filter.
     * @param {CertificateEligibilityFindUniqueArgs} args - Arguments to find a CertificateEligibility
     * @example
     * // Get one CertificateEligibility
     * const certificateEligibility = await prisma.certificateEligibility.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificateEligibilityFindUniqueArgs>(args: SelectSubset<T, CertificateEligibilityFindUniqueArgs<ExtArgs>>): Prisma__CertificateEligibilityClient<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CertificateEligibility that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificateEligibilityFindUniqueOrThrowArgs} args - Arguments to find a CertificateEligibility
     * @example
     * // Get one CertificateEligibility
     * const certificateEligibility = await prisma.certificateEligibility.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificateEligibilityFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificateEligibilityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificateEligibilityClient<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateEligibility that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateEligibilityFindFirstArgs} args - Arguments to find a CertificateEligibility
     * @example
     * // Get one CertificateEligibility
     * const certificateEligibility = await prisma.certificateEligibility.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificateEligibilityFindFirstArgs>(args?: SelectSubset<T, CertificateEligibilityFindFirstArgs<ExtArgs>>): Prisma__CertificateEligibilityClient<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateEligibility that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateEligibilityFindFirstOrThrowArgs} args - Arguments to find a CertificateEligibility
     * @example
     * // Get one CertificateEligibility
     * const certificateEligibility = await prisma.certificateEligibility.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificateEligibilityFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificateEligibilityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificateEligibilityClient<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CertificateEligibilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateEligibilityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CertificateEligibilities
     * const certificateEligibilities = await prisma.certificateEligibility.findMany()
     * 
     * // Get first 10 CertificateEligibilities
     * const certificateEligibilities = await prisma.certificateEligibility.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateEligibilityWithIdOnly = await prisma.certificateEligibility.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificateEligibilityFindManyArgs>(args?: SelectSubset<T, CertificateEligibilityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CertificateEligibility.
     * @param {CertificateEligibilityCreateArgs} args - Arguments to create a CertificateEligibility.
     * @example
     * // Create one CertificateEligibility
     * const CertificateEligibility = await prisma.certificateEligibility.create({
     *   data: {
     *     // ... data to create a CertificateEligibility
     *   }
     * })
     * 
     */
    create<T extends CertificateEligibilityCreateArgs>(args: SelectSubset<T, CertificateEligibilityCreateArgs<ExtArgs>>): Prisma__CertificateEligibilityClient<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CertificateEligibilities.
     * @param {CertificateEligibilityCreateManyArgs} args - Arguments to create many CertificateEligibilities.
     * @example
     * // Create many CertificateEligibilities
     * const certificateEligibility = await prisma.certificateEligibility.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificateEligibilityCreateManyArgs>(args?: SelectSubset<T, CertificateEligibilityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CertificateEligibilities and returns the data saved in the database.
     * @param {CertificateEligibilityCreateManyAndReturnArgs} args - Arguments to create many CertificateEligibilities.
     * @example
     * // Create many CertificateEligibilities
     * const certificateEligibility = await prisma.certificateEligibility.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CertificateEligibilities and only return the `id`
     * const certificateEligibilityWithIdOnly = await prisma.certificateEligibility.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CertificateEligibilityCreateManyAndReturnArgs>(args?: SelectSubset<T, CertificateEligibilityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CertificateEligibility.
     * @param {CertificateEligibilityDeleteArgs} args - Arguments to delete one CertificateEligibility.
     * @example
     * // Delete one CertificateEligibility
     * const CertificateEligibility = await prisma.certificateEligibility.delete({
     *   where: {
     *     // ... filter to delete one CertificateEligibility
     *   }
     * })
     * 
     */
    delete<T extends CertificateEligibilityDeleteArgs>(args: SelectSubset<T, CertificateEligibilityDeleteArgs<ExtArgs>>): Prisma__CertificateEligibilityClient<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CertificateEligibility.
     * @param {CertificateEligibilityUpdateArgs} args - Arguments to update one CertificateEligibility.
     * @example
     * // Update one CertificateEligibility
     * const certificateEligibility = await prisma.certificateEligibility.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificateEligibilityUpdateArgs>(args: SelectSubset<T, CertificateEligibilityUpdateArgs<ExtArgs>>): Prisma__CertificateEligibilityClient<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CertificateEligibilities.
     * @param {CertificateEligibilityDeleteManyArgs} args - Arguments to filter CertificateEligibilities to delete.
     * @example
     * // Delete a few CertificateEligibilities
     * const { count } = await prisma.certificateEligibility.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificateEligibilityDeleteManyArgs>(args?: SelectSubset<T, CertificateEligibilityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CertificateEligibilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateEligibilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CertificateEligibilities
     * const certificateEligibility = await prisma.certificateEligibility.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificateEligibilityUpdateManyArgs>(args: SelectSubset<T, CertificateEligibilityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CertificateEligibilities and returns the data updated in the database.
     * @param {CertificateEligibilityUpdateManyAndReturnArgs} args - Arguments to update many CertificateEligibilities.
     * @example
     * // Update many CertificateEligibilities
     * const certificateEligibility = await prisma.certificateEligibility.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CertificateEligibilities and only return the `id`
     * const certificateEligibilityWithIdOnly = await prisma.certificateEligibility.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CertificateEligibilityUpdateManyAndReturnArgs>(args: SelectSubset<T, CertificateEligibilityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CertificateEligibility.
     * @param {CertificateEligibilityUpsertArgs} args - Arguments to update or create a CertificateEligibility.
     * @example
     * // Update or create a CertificateEligibility
     * const certificateEligibility = await prisma.certificateEligibility.upsert({
     *   create: {
     *     // ... data to create a CertificateEligibility
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CertificateEligibility we want to update
     *   }
     * })
     */
    upsert<T extends CertificateEligibilityUpsertArgs>(args: SelectSubset<T, CertificateEligibilityUpsertArgs<ExtArgs>>): Prisma__CertificateEligibilityClient<$Result.GetResult<Prisma.$CertificateEligibilityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CertificateEligibilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateEligibilityCountArgs} args - Arguments to filter CertificateEligibilities to count.
     * @example
     * // Count the number of CertificateEligibilities
     * const count = await prisma.certificateEligibility.count({
     *   where: {
     *     // ... the filter for the CertificateEligibilities we want to count
     *   }
     * })
    **/
    count<T extends CertificateEligibilityCountArgs>(
      args?: Subset<T, CertificateEligibilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateEligibilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CertificateEligibility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateEligibilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateEligibilityAggregateArgs>(args: Subset<T, CertificateEligibilityAggregateArgs>): Prisma.PrismaPromise<GetCertificateEligibilityAggregateType<T>>

    /**
     * Group by CertificateEligibility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateEligibilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateEligibilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateEligibilityGroupByArgs['orderBy'] }
        : { orderBy?: CertificateEligibilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateEligibilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateEligibilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CertificateEligibility model
   */
  readonly fields: CertificateEligibilityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CertificateEligibility.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificateEligibilityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    certificateService<T extends CertificateServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CertificateServiceDefaultArgs<ExtArgs>>): Prisma__CertificateServiceClient<$Result.GetResult<Prisma.$CertificateServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CertificateEligibility model
   */
  interface CertificateEligibilityFieldRefs {
    readonly id: FieldRef<"CertificateEligibility", 'Int'>
    readonly eligibilityDetail: FieldRef<"CertificateEligibility", 'String'>
    readonly applicationType: FieldRef<"CertificateEligibility", 'String'>
    readonly certificateServiceId: FieldRef<"CertificateEligibility", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CertificateEligibility findUnique
   */
  export type CertificateEligibilityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityInclude<ExtArgs> | null
    /**
     * Filter, which CertificateEligibility to fetch.
     */
    where: CertificateEligibilityWhereUniqueInput
  }

  /**
   * CertificateEligibility findUniqueOrThrow
   */
  export type CertificateEligibilityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityInclude<ExtArgs> | null
    /**
     * Filter, which CertificateEligibility to fetch.
     */
    where: CertificateEligibilityWhereUniqueInput
  }

  /**
   * CertificateEligibility findFirst
   */
  export type CertificateEligibilityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityInclude<ExtArgs> | null
    /**
     * Filter, which CertificateEligibility to fetch.
     */
    where?: CertificateEligibilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateEligibilities to fetch.
     */
    orderBy?: CertificateEligibilityOrderByWithRelationInput | CertificateEligibilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateEligibilities.
     */
    cursor?: CertificateEligibilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateEligibilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateEligibilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateEligibilities.
     */
    distinct?: CertificateEligibilityScalarFieldEnum | CertificateEligibilityScalarFieldEnum[]
  }

  /**
   * CertificateEligibility findFirstOrThrow
   */
  export type CertificateEligibilityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityInclude<ExtArgs> | null
    /**
     * Filter, which CertificateEligibility to fetch.
     */
    where?: CertificateEligibilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateEligibilities to fetch.
     */
    orderBy?: CertificateEligibilityOrderByWithRelationInput | CertificateEligibilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateEligibilities.
     */
    cursor?: CertificateEligibilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateEligibilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateEligibilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateEligibilities.
     */
    distinct?: CertificateEligibilityScalarFieldEnum | CertificateEligibilityScalarFieldEnum[]
  }

  /**
   * CertificateEligibility findMany
   */
  export type CertificateEligibilityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityInclude<ExtArgs> | null
    /**
     * Filter, which CertificateEligibilities to fetch.
     */
    where?: CertificateEligibilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateEligibilities to fetch.
     */
    orderBy?: CertificateEligibilityOrderByWithRelationInput | CertificateEligibilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CertificateEligibilities.
     */
    cursor?: CertificateEligibilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateEligibilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateEligibilities.
     */
    skip?: number
    distinct?: CertificateEligibilityScalarFieldEnum | CertificateEligibilityScalarFieldEnum[]
  }

  /**
   * CertificateEligibility create
   */
  export type CertificateEligibilityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityInclude<ExtArgs> | null
    /**
     * The data needed to create a CertificateEligibility.
     */
    data: XOR<CertificateEligibilityCreateInput, CertificateEligibilityUncheckedCreateInput>
  }

  /**
   * CertificateEligibility createMany
   */
  export type CertificateEligibilityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CertificateEligibilities.
     */
    data: CertificateEligibilityCreateManyInput | CertificateEligibilityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CertificateEligibility createManyAndReturn
   */
  export type CertificateEligibilityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * The data used to create many CertificateEligibilities.
     */
    data: CertificateEligibilityCreateManyInput | CertificateEligibilityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CertificateEligibility update
   */
  export type CertificateEligibilityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityInclude<ExtArgs> | null
    /**
     * The data needed to update a CertificateEligibility.
     */
    data: XOR<CertificateEligibilityUpdateInput, CertificateEligibilityUncheckedUpdateInput>
    /**
     * Choose, which CertificateEligibility to update.
     */
    where: CertificateEligibilityWhereUniqueInput
  }

  /**
   * CertificateEligibility updateMany
   */
  export type CertificateEligibilityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CertificateEligibilities.
     */
    data: XOR<CertificateEligibilityUpdateManyMutationInput, CertificateEligibilityUncheckedUpdateManyInput>
    /**
     * Filter which CertificateEligibilities to update
     */
    where?: CertificateEligibilityWhereInput
    /**
     * Limit how many CertificateEligibilities to update.
     */
    limit?: number
  }

  /**
   * CertificateEligibility updateManyAndReturn
   */
  export type CertificateEligibilityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * The data used to update CertificateEligibilities.
     */
    data: XOR<CertificateEligibilityUpdateManyMutationInput, CertificateEligibilityUncheckedUpdateManyInput>
    /**
     * Filter which CertificateEligibilities to update
     */
    where?: CertificateEligibilityWhereInput
    /**
     * Limit how many CertificateEligibilities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CertificateEligibility upsert
   */
  export type CertificateEligibilityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityInclude<ExtArgs> | null
    /**
     * The filter to search for the CertificateEligibility to update in case it exists.
     */
    where: CertificateEligibilityWhereUniqueInput
    /**
     * In case the CertificateEligibility found by the `where` argument doesn't exist, create a new CertificateEligibility with this data.
     */
    create: XOR<CertificateEligibilityCreateInput, CertificateEligibilityUncheckedCreateInput>
    /**
     * In case the CertificateEligibility was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificateEligibilityUpdateInput, CertificateEligibilityUncheckedUpdateInput>
  }

  /**
   * CertificateEligibility delete
   */
  export type CertificateEligibilityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityInclude<ExtArgs> | null
    /**
     * Filter which CertificateEligibility to delete.
     */
    where: CertificateEligibilityWhereUniqueInput
  }

  /**
   * CertificateEligibility deleteMany
   */
  export type CertificateEligibilityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateEligibilities to delete
     */
    where?: CertificateEligibilityWhereInput
    /**
     * Limit how many CertificateEligibilities to delete.
     */
    limit?: number
  }

  /**
   * CertificateEligibility without action
   */
  export type CertificateEligibilityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateEligibility
     */
    select?: CertificateEligibilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateEligibility
     */
    omit?: CertificateEligibilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateEligibilityInclude<ExtArgs> | null
  }


  /**
   * Model ContactService
   */

  export type AggregateContactService = {
    _count: ContactServiceCountAggregateOutputType | null
    _avg: ContactServiceAvgAggregateOutputType | null
    _sum: ContactServiceSumAggregateOutputType | null
    _min: ContactServiceMinAggregateOutputType | null
    _max: ContactServiceMaxAggregateOutputType | null
  }

  export type ContactServiceAvgAggregateOutputType = {
    id: number | null
    adminId: number | null
  }

  export type ContactServiceSumAggregateOutputType = {
    id: number | null
    adminId: number | null
  }

  export type ContactServiceMinAggregateOutputType = {
    id: number | null
    name: string | null
    summary: string | null
    type: string | null
    applicationMode: string | null
    onlineUrl: string | null
    offlineAddress: string | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    adminId: number | null
    processNew: string | null
    processUpdate: string | null
    processLost: string | null
    processSurrender: string | null
    docNew: string | null
    docUpdate: string | null
    docLost: string | null
    docSurrender: string | null
  }

  export type ContactServiceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    summary: string | null
    type: string | null
    applicationMode: string | null
    onlineUrl: string | null
    offlineAddress: string | null
    status: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    adminId: number | null
    processNew: string | null
    processUpdate: string | null
    processLost: string | null
    processSurrender: string | null
    docNew: string | null
    docUpdate: string | null
    docLost: string | null
    docSurrender: string | null
  }

  export type ContactServiceCountAggregateOutputType = {
    id: number
    name: number
    summary: number
    type: number
    targetAudience: number
    applicationMode: number
    onlineUrl: number
    offlineAddress: number
    status: number
    isActive: number
    createdAt: number
    updatedAt: number
    adminId: number
    eligibilityDetails: number
    contactDetails: number
    processDetails: number
    processNew: number
    processUpdate: number
    processLost: number
    processSurrender: number
    docNew: number
    docUpdate: number
    docLost: number
    docSurrender: number
    _all: number
  }


  export type ContactServiceAvgAggregateInputType = {
    id?: true
    adminId?: true
  }

  export type ContactServiceSumAggregateInputType = {
    id?: true
    adminId?: true
  }

  export type ContactServiceMinAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    type?: true
    applicationMode?: true
    onlineUrl?: true
    offlineAddress?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    processNew?: true
    processUpdate?: true
    processLost?: true
    processSurrender?: true
    docNew?: true
    docUpdate?: true
    docLost?: true
    docSurrender?: true
  }

  export type ContactServiceMaxAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    type?: true
    applicationMode?: true
    onlineUrl?: true
    offlineAddress?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    processNew?: true
    processUpdate?: true
    processLost?: true
    processSurrender?: true
    docNew?: true
    docUpdate?: true
    docLost?: true
    docSurrender?: true
  }

  export type ContactServiceCountAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    type?: true
    targetAudience?: true
    applicationMode?: true
    onlineUrl?: true
    offlineAddress?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    eligibilityDetails?: true
    contactDetails?: true
    processDetails?: true
    processNew?: true
    processUpdate?: true
    processLost?: true
    processSurrender?: true
    docNew?: true
    docUpdate?: true
    docLost?: true
    docSurrender?: true
    _all?: true
  }

  export type ContactServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactService to aggregate.
     */
    where?: ContactServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServices to fetch.
     */
    orderBy?: ContactServiceOrderByWithRelationInput | ContactServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactServices
    **/
    _count?: true | ContactServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactServiceMaxAggregateInputType
  }

  export type GetContactServiceAggregateType<T extends ContactServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateContactService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactService[P]>
      : GetScalarType<T[P], AggregateContactService[P]>
  }




  export type ContactServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactServiceWhereInput
    orderBy?: ContactServiceOrderByWithAggregationInput | ContactServiceOrderByWithAggregationInput[]
    by: ContactServiceScalarFieldEnum[] | ContactServiceScalarFieldEnum
    having?: ContactServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactServiceCountAggregateInputType | true
    _avg?: ContactServiceAvgAggregateInputType
    _sum?: ContactServiceSumAggregateInputType
    _min?: ContactServiceMinAggregateInputType
    _max?: ContactServiceMaxAggregateInputType
  }

  export type ContactServiceGroupByOutputType = {
    id: number
    name: string
    summary: string
    type: string | null
    targetAudience: string[]
    applicationMode: string
    onlineUrl: string | null
    offlineAddress: string | null
    status: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    adminId: number
    eligibilityDetails: string[]
    contactDetails: string[]
    processDetails: string[]
    processNew: string | null
    processUpdate: string | null
    processLost: string | null
    processSurrender: string | null
    docNew: string | null
    docUpdate: string | null
    docLost: string | null
    docSurrender: string | null
    _count: ContactServiceCountAggregateOutputType | null
    _avg: ContactServiceAvgAggregateOutputType | null
    _sum: ContactServiceSumAggregateOutputType | null
    _min: ContactServiceMinAggregateOutputType | null
    _max: ContactServiceMaxAggregateOutputType | null
  }

  type GetContactServiceGroupByPayload<T extends ContactServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ContactServiceGroupByOutputType[P]>
        }
      >
    >


  export type ContactServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    contactDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    contacts?: boolean | ContactService$contactsArgs<ExtArgs>
    documents?: boolean | ContactService$documentsArgs<ExtArgs>
    _count?: boolean | ContactServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactService"]>

  export type ContactServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    contactDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactService"]>

  export type ContactServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    contactDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactService"]>

  export type ContactServiceSelectScalar = {
    id?: boolean
    name?: boolean
    summary?: boolean
    type?: boolean
    targetAudience?: boolean
    applicationMode?: boolean
    onlineUrl?: boolean
    offlineAddress?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    eligibilityDetails?: boolean
    contactDetails?: boolean
    processDetails?: boolean
    processNew?: boolean
    processUpdate?: boolean
    processLost?: boolean
    processSurrender?: boolean
    docNew?: boolean
    docUpdate?: boolean
    docLost?: boolean
    docSurrender?: boolean
  }

  export type ContactServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "summary" | "type" | "targetAudience" | "applicationMode" | "onlineUrl" | "offlineAddress" | "status" | "isActive" | "createdAt" | "updatedAt" | "adminId" | "eligibilityDetails" | "contactDetails" | "processDetails" | "processNew" | "processUpdate" | "processLost" | "processSurrender" | "docNew" | "docUpdate" | "docLost" | "docSurrender", ExtArgs["result"]["contactService"]>
  export type ContactServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    contacts?: boolean | ContactService$contactsArgs<ExtArgs>
    documents?: boolean | ContactService$documentsArgs<ExtArgs>
    _count?: boolean | ContactServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContactServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }
  export type ContactServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }

  export type $ContactServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactService"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      contacts: Prisma.$ContactServiceContactPayload<ExtArgs>[]
      documents: Prisma.$ContactServiceDocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      summary: string
      type: string | null
      targetAudience: string[]
      applicationMode: string
      onlineUrl: string | null
      offlineAddress: string | null
      status: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      adminId: number
      eligibilityDetails: string[]
      contactDetails: string[]
      processDetails: string[]
      processNew: string | null
      processUpdate: string | null
      processLost: string | null
      processSurrender: string | null
      docNew: string | null
      docUpdate: string | null
      docLost: string | null
      docSurrender: string | null
    }, ExtArgs["result"]["contactService"]>
    composites: {}
  }

  type ContactServiceGetPayload<S extends boolean | null | undefined | ContactServiceDefaultArgs> = $Result.GetResult<Prisma.$ContactServicePayload, S>

  type ContactServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactServiceCountAggregateInputType | true
    }

  export interface ContactServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactService'], meta: { name: 'ContactService' } }
    /**
     * Find zero or one ContactService that matches the filter.
     * @param {ContactServiceFindUniqueArgs} args - Arguments to find a ContactService
     * @example
     * // Get one ContactService
     * const contactService = await prisma.contactService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactServiceFindUniqueArgs>(args: SelectSubset<T, ContactServiceFindUniqueArgs<ExtArgs>>): Prisma__ContactServiceClient<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContactService that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactServiceFindUniqueOrThrowArgs} args - Arguments to find a ContactService
     * @example
     * // Get one ContactService
     * const contactService = await prisma.contactService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactServiceClient<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceFindFirstArgs} args - Arguments to find a ContactService
     * @example
     * // Get one ContactService
     * const contactService = await prisma.contactService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactServiceFindFirstArgs>(args?: SelectSubset<T, ContactServiceFindFirstArgs<ExtArgs>>): Prisma__ContactServiceClient<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceFindFirstOrThrowArgs} args - Arguments to find a ContactService
     * @example
     * // Get one ContactService
     * const contactService = await prisma.contactService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactServiceClient<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContactServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactServices
     * const contactServices = await prisma.contactService.findMany()
     * 
     * // Get first 10 ContactServices
     * const contactServices = await prisma.contactService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactServiceWithIdOnly = await prisma.contactService.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactServiceFindManyArgs>(args?: SelectSubset<T, ContactServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContactService.
     * @param {ContactServiceCreateArgs} args - Arguments to create a ContactService.
     * @example
     * // Create one ContactService
     * const ContactService = await prisma.contactService.create({
     *   data: {
     *     // ... data to create a ContactService
     *   }
     * })
     * 
     */
    create<T extends ContactServiceCreateArgs>(args: SelectSubset<T, ContactServiceCreateArgs<ExtArgs>>): Prisma__ContactServiceClient<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContactServices.
     * @param {ContactServiceCreateManyArgs} args - Arguments to create many ContactServices.
     * @example
     * // Create many ContactServices
     * const contactService = await prisma.contactService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactServiceCreateManyArgs>(args?: SelectSubset<T, ContactServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactServices and returns the data saved in the database.
     * @param {ContactServiceCreateManyAndReturnArgs} args - Arguments to create many ContactServices.
     * @example
     * // Create many ContactServices
     * const contactService = await prisma.contactService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactServices and only return the `id`
     * const contactServiceWithIdOnly = await prisma.contactService.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContactService.
     * @param {ContactServiceDeleteArgs} args - Arguments to delete one ContactService.
     * @example
     * // Delete one ContactService
     * const ContactService = await prisma.contactService.delete({
     *   where: {
     *     // ... filter to delete one ContactService
     *   }
     * })
     * 
     */
    delete<T extends ContactServiceDeleteArgs>(args: SelectSubset<T, ContactServiceDeleteArgs<ExtArgs>>): Prisma__ContactServiceClient<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContactService.
     * @param {ContactServiceUpdateArgs} args - Arguments to update one ContactService.
     * @example
     * // Update one ContactService
     * const contactService = await prisma.contactService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactServiceUpdateArgs>(args: SelectSubset<T, ContactServiceUpdateArgs<ExtArgs>>): Prisma__ContactServiceClient<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContactServices.
     * @param {ContactServiceDeleteManyArgs} args - Arguments to filter ContactServices to delete.
     * @example
     * // Delete a few ContactServices
     * const { count } = await prisma.contactService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactServiceDeleteManyArgs>(args?: SelectSubset<T, ContactServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactServices
     * const contactService = await prisma.contactService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactServiceUpdateManyArgs>(args: SelectSubset<T, ContactServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactServices and returns the data updated in the database.
     * @param {ContactServiceUpdateManyAndReturnArgs} args - Arguments to update many ContactServices.
     * @example
     * // Update many ContactServices
     * const contactService = await prisma.contactService.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContactServices and only return the `id`
     * const contactServiceWithIdOnly = await prisma.contactService.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContactService.
     * @param {ContactServiceUpsertArgs} args - Arguments to update or create a ContactService.
     * @example
     * // Update or create a ContactService
     * const contactService = await prisma.contactService.upsert({
     *   create: {
     *     // ... data to create a ContactService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactService we want to update
     *   }
     * })
     */
    upsert<T extends ContactServiceUpsertArgs>(args: SelectSubset<T, ContactServiceUpsertArgs<ExtArgs>>): Prisma__ContactServiceClient<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContactServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceCountArgs} args - Arguments to filter ContactServices to count.
     * @example
     * // Count the number of ContactServices
     * const count = await prisma.contactService.count({
     *   where: {
     *     // ... the filter for the ContactServices we want to count
     *   }
     * })
    **/
    count<T extends ContactServiceCountArgs>(
      args?: Subset<T, ContactServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactServiceAggregateArgs>(args: Subset<T, ContactServiceAggregateArgs>): Prisma.PrismaPromise<GetContactServiceAggregateType<T>>

    /**
     * Group by ContactService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactServiceGroupByArgs['orderBy'] }
        : { orderBy?: ContactServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactService model
   */
  readonly fields: ContactServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contacts<T extends ContactService$contactsArgs<ExtArgs> = {}>(args?: Subset<T, ContactService$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends ContactService$documentsArgs<ExtArgs> = {}>(args?: Subset<T, ContactService$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContactService model
   */
  interface ContactServiceFieldRefs {
    readonly id: FieldRef<"ContactService", 'Int'>
    readonly name: FieldRef<"ContactService", 'String'>
    readonly summary: FieldRef<"ContactService", 'String'>
    readonly type: FieldRef<"ContactService", 'String'>
    readonly targetAudience: FieldRef<"ContactService", 'String[]'>
    readonly applicationMode: FieldRef<"ContactService", 'String'>
    readonly onlineUrl: FieldRef<"ContactService", 'String'>
    readonly offlineAddress: FieldRef<"ContactService", 'String'>
    readonly status: FieldRef<"ContactService", 'String'>
    readonly isActive: FieldRef<"ContactService", 'Boolean'>
    readonly createdAt: FieldRef<"ContactService", 'DateTime'>
    readonly updatedAt: FieldRef<"ContactService", 'DateTime'>
    readonly adminId: FieldRef<"ContactService", 'Int'>
    readonly eligibilityDetails: FieldRef<"ContactService", 'String[]'>
    readonly contactDetails: FieldRef<"ContactService", 'String[]'>
    readonly processDetails: FieldRef<"ContactService", 'String[]'>
    readonly processNew: FieldRef<"ContactService", 'String'>
    readonly processUpdate: FieldRef<"ContactService", 'String'>
    readonly processLost: FieldRef<"ContactService", 'String'>
    readonly processSurrender: FieldRef<"ContactService", 'String'>
    readonly docNew: FieldRef<"ContactService", 'String'>
    readonly docUpdate: FieldRef<"ContactService", 'String'>
    readonly docLost: FieldRef<"ContactService", 'String'>
    readonly docSurrender: FieldRef<"ContactService", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContactService findUnique
   */
  export type ContactServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceInclude<ExtArgs> | null
    /**
     * Filter, which ContactService to fetch.
     */
    where: ContactServiceWhereUniqueInput
  }

  /**
   * ContactService findUniqueOrThrow
   */
  export type ContactServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceInclude<ExtArgs> | null
    /**
     * Filter, which ContactService to fetch.
     */
    where: ContactServiceWhereUniqueInput
  }

  /**
   * ContactService findFirst
   */
  export type ContactServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceInclude<ExtArgs> | null
    /**
     * Filter, which ContactService to fetch.
     */
    where?: ContactServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServices to fetch.
     */
    orderBy?: ContactServiceOrderByWithRelationInput | ContactServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactServices.
     */
    cursor?: ContactServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactServices.
     */
    distinct?: ContactServiceScalarFieldEnum | ContactServiceScalarFieldEnum[]
  }

  /**
   * ContactService findFirstOrThrow
   */
  export type ContactServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceInclude<ExtArgs> | null
    /**
     * Filter, which ContactService to fetch.
     */
    where?: ContactServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServices to fetch.
     */
    orderBy?: ContactServiceOrderByWithRelationInput | ContactServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactServices.
     */
    cursor?: ContactServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactServices.
     */
    distinct?: ContactServiceScalarFieldEnum | ContactServiceScalarFieldEnum[]
  }

  /**
   * ContactService findMany
   */
  export type ContactServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceInclude<ExtArgs> | null
    /**
     * Filter, which ContactServices to fetch.
     */
    where?: ContactServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServices to fetch.
     */
    orderBy?: ContactServiceOrderByWithRelationInput | ContactServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactServices.
     */
    cursor?: ContactServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServices.
     */
    skip?: number
    distinct?: ContactServiceScalarFieldEnum | ContactServiceScalarFieldEnum[]
  }

  /**
   * ContactService create
   */
  export type ContactServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a ContactService.
     */
    data: XOR<ContactServiceCreateInput, ContactServiceUncheckedCreateInput>
  }

  /**
   * ContactService createMany
   */
  export type ContactServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactServices.
     */
    data: ContactServiceCreateManyInput | ContactServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactService createManyAndReturn
   */
  export type ContactServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * The data used to create many ContactServices.
     */
    data: ContactServiceCreateManyInput | ContactServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactService update
   */
  export type ContactServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a ContactService.
     */
    data: XOR<ContactServiceUpdateInput, ContactServiceUncheckedUpdateInput>
    /**
     * Choose, which ContactService to update.
     */
    where: ContactServiceWhereUniqueInput
  }

  /**
   * ContactService updateMany
   */
  export type ContactServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactServices.
     */
    data: XOR<ContactServiceUpdateManyMutationInput, ContactServiceUncheckedUpdateManyInput>
    /**
     * Filter which ContactServices to update
     */
    where?: ContactServiceWhereInput
    /**
     * Limit how many ContactServices to update.
     */
    limit?: number
  }

  /**
   * ContactService updateManyAndReturn
   */
  export type ContactServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * The data used to update ContactServices.
     */
    data: XOR<ContactServiceUpdateManyMutationInput, ContactServiceUncheckedUpdateManyInput>
    /**
     * Filter which ContactServices to update
     */
    where?: ContactServiceWhereInput
    /**
     * Limit how many ContactServices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactService upsert
   */
  export type ContactServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the ContactService to update in case it exists.
     */
    where: ContactServiceWhereUniqueInput
    /**
     * In case the ContactService found by the `where` argument doesn't exist, create a new ContactService with this data.
     */
    create: XOR<ContactServiceCreateInput, ContactServiceUncheckedCreateInput>
    /**
     * In case the ContactService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactServiceUpdateInput, ContactServiceUncheckedUpdateInput>
  }

  /**
   * ContactService delete
   */
  export type ContactServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceInclude<ExtArgs> | null
    /**
     * Filter which ContactService to delete.
     */
    where: ContactServiceWhereUniqueInput
  }

  /**
   * ContactService deleteMany
   */
  export type ContactServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactServices to delete
     */
    where?: ContactServiceWhereInput
    /**
     * Limit how many ContactServices to delete.
     */
    limit?: number
  }

  /**
   * ContactService.contacts
   */
  export type ContactService$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactInclude<ExtArgs> | null
    where?: ContactServiceContactWhereInput
    orderBy?: ContactServiceContactOrderByWithRelationInput | ContactServiceContactOrderByWithRelationInput[]
    cursor?: ContactServiceContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactServiceContactScalarFieldEnum | ContactServiceContactScalarFieldEnum[]
  }

  /**
   * ContactService.documents
   */
  export type ContactService$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentInclude<ExtArgs> | null
    where?: ContactServiceDocumentWhereInput
    orderBy?: ContactServiceDocumentOrderByWithRelationInput | ContactServiceDocumentOrderByWithRelationInput[]
    cursor?: ContactServiceDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactServiceDocumentScalarFieldEnum | ContactServiceDocumentScalarFieldEnum[]
  }

  /**
   * ContactService without action
   */
  export type ContactServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactService
     */
    select?: ContactServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactService
     */
    omit?: ContactServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceInclude<ExtArgs> | null
  }


  /**
   * Model ContactServiceContact
   */

  export type AggregateContactServiceContact = {
    _count: ContactServiceContactCountAggregateOutputType | null
    _avg: ContactServiceContactAvgAggregateOutputType | null
    _sum: ContactServiceContactSumAggregateOutputType | null
    _min: ContactServiceContactMinAggregateOutputType | null
    _max: ContactServiceContactMaxAggregateOutputType | null
  }

  export type ContactServiceContactAvgAggregateOutputType = {
    id: number | null
    contactServiceId: number | null
  }

  export type ContactServiceContactSumAggregateOutputType = {
    id: number | null
    contactServiceId: number | null
  }

  export type ContactServiceContactMinAggregateOutputType = {
    id: number | null
    serviceName: string | null
    district: string | null
    subDistrict: string | null
    block: string | null
    name: string | null
    designation: string | null
    contact: string | null
    email: string | null
    contactServiceId: number | null
  }

  export type ContactServiceContactMaxAggregateOutputType = {
    id: number | null
    serviceName: string | null
    district: string | null
    subDistrict: string | null
    block: string | null
    name: string | null
    designation: string | null
    contact: string | null
    email: string | null
    contactServiceId: number | null
  }

  export type ContactServiceContactCountAggregateOutputType = {
    id: number
    serviceName: number
    district: number
    subDistrict: number
    block: number
    name: number
    designation: number
    contact: number
    email: number
    contactServiceId: number
    _all: number
  }


  export type ContactServiceContactAvgAggregateInputType = {
    id?: true
    contactServiceId?: true
  }

  export type ContactServiceContactSumAggregateInputType = {
    id?: true
    contactServiceId?: true
  }

  export type ContactServiceContactMinAggregateInputType = {
    id?: true
    serviceName?: true
    district?: true
    subDistrict?: true
    block?: true
    name?: true
    designation?: true
    contact?: true
    email?: true
    contactServiceId?: true
  }

  export type ContactServiceContactMaxAggregateInputType = {
    id?: true
    serviceName?: true
    district?: true
    subDistrict?: true
    block?: true
    name?: true
    designation?: true
    contact?: true
    email?: true
    contactServiceId?: true
  }

  export type ContactServiceContactCountAggregateInputType = {
    id?: true
    serviceName?: true
    district?: true
    subDistrict?: true
    block?: true
    name?: true
    designation?: true
    contact?: true
    email?: true
    contactServiceId?: true
    _all?: true
  }

  export type ContactServiceContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactServiceContact to aggregate.
     */
    where?: ContactServiceContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServiceContacts to fetch.
     */
    orderBy?: ContactServiceContactOrderByWithRelationInput | ContactServiceContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactServiceContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServiceContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServiceContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactServiceContacts
    **/
    _count?: true | ContactServiceContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactServiceContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactServiceContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactServiceContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactServiceContactMaxAggregateInputType
  }

  export type GetContactServiceContactAggregateType<T extends ContactServiceContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContactServiceContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactServiceContact[P]>
      : GetScalarType<T[P], AggregateContactServiceContact[P]>
  }




  export type ContactServiceContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactServiceContactWhereInput
    orderBy?: ContactServiceContactOrderByWithAggregationInput | ContactServiceContactOrderByWithAggregationInput[]
    by: ContactServiceContactScalarFieldEnum[] | ContactServiceContactScalarFieldEnum
    having?: ContactServiceContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactServiceContactCountAggregateInputType | true
    _avg?: ContactServiceContactAvgAggregateInputType
    _sum?: ContactServiceContactSumAggregateInputType
    _min?: ContactServiceContactMinAggregateInputType
    _max?: ContactServiceContactMaxAggregateInputType
  }

  export type ContactServiceContactGroupByOutputType = {
    id: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    contactServiceId: number
    _count: ContactServiceContactCountAggregateOutputType | null
    _avg: ContactServiceContactAvgAggregateOutputType | null
    _sum: ContactServiceContactSumAggregateOutputType | null
    _min: ContactServiceContactMinAggregateOutputType | null
    _max: ContactServiceContactMaxAggregateOutputType | null
  }

  type GetContactServiceContactGroupByPayload<T extends ContactServiceContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactServiceContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactServiceContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactServiceContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactServiceContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactServiceContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    contactServiceId?: boolean
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
    posts?: boolean | ContactServiceContact$postsArgs<ExtArgs>
    _count?: boolean | ContactServiceContactCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactServiceContact"]>

  export type ContactServiceContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    contactServiceId?: boolean
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactServiceContact"]>

  export type ContactServiceContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    contactServiceId?: boolean
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactServiceContact"]>

  export type ContactServiceContactSelectScalar = {
    id?: boolean
    serviceName?: boolean
    district?: boolean
    subDistrict?: boolean
    block?: boolean
    name?: boolean
    designation?: boolean
    contact?: boolean
    email?: boolean
    contactServiceId?: boolean
  }

  export type ContactServiceContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceName" | "district" | "subDistrict" | "block" | "name" | "designation" | "contact" | "email" | "contactServiceId", ExtArgs["result"]["contactServiceContact"]>
  export type ContactServiceContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
    posts?: boolean | ContactServiceContact$postsArgs<ExtArgs>
    _count?: boolean | ContactServiceContactCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContactServiceContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
  }
  export type ContactServiceContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
  }

  export type $ContactServiceContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactServiceContact"
    objects: {
      contactService: Prisma.$ContactServicePayload<ExtArgs>
      posts: Prisma.$PostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      serviceName: string
      district: string
      subDistrict: string
      block: string
      name: string
      designation: string
      contact: string
      email: string
      contactServiceId: number
    }, ExtArgs["result"]["contactServiceContact"]>
    composites: {}
  }

  type ContactServiceContactGetPayload<S extends boolean | null | undefined | ContactServiceContactDefaultArgs> = $Result.GetResult<Prisma.$ContactServiceContactPayload, S>

  type ContactServiceContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactServiceContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactServiceContactCountAggregateInputType | true
    }

  export interface ContactServiceContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactServiceContact'], meta: { name: 'ContactServiceContact' } }
    /**
     * Find zero or one ContactServiceContact that matches the filter.
     * @param {ContactServiceContactFindUniqueArgs} args - Arguments to find a ContactServiceContact
     * @example
     * // Get one ContactServiceContact
     * const contactServiceContact = await prisma.contactServiceContact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactServiceContactFindUniqueArgs>(args: SelectSubset<T, ContactServiceContactFindUniqueArgs<ExtArgs>>): Prisma__ContactServiceContactClient<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContactServiceContact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactServiceContactFindUniqueOrThrowArgs} args - Arguments to find a ContactServiceContact
     * @example
     * // Get one ContactServiceContact
     * const contactServiceContact = await prisma.contactServiceContact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactServiceContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactServiceContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactServiceContactClient<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactServiceContact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceContactFindFirstArgs} args - Arguments to find a ContactServiceContact
     * @example
     * // Get one ContactServiceContact
     * const contactServiceContact = await prisma.contactServiceContact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactServiceContactFindFirstArgs>(args?: SelectSubset<T, ContactServiceContactFindFirstArgs<ExtArgs>>): Prisma__ContactServiceContactClient<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactServiceContact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceContactFindFirstOrThrowArgs} args - Arguments to find a ContactServiceContact
     * @example
     * // Get one ContactServiceContact
     * const contactServiceContact = await prisma.contactServiceContact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactServiceContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactServiceContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactServiceContactClient<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContactServiceContacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactServiceContacts
     * const contactServiceContacts = await prisma.contactServiceContact.findMany()
     * 
     * // Get first 10 ContactServiceContacts
     * const contactServiceContacts = await prisma.contactServiceContact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactServiceContactWithIdOnly = await prisma.contactServiceContact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactServiceContactFindManyArgs>(args?: SelectSubset<T, ContactServiceContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContactServiceContact.
     * @param {ContactServiceContactCreateArgs} args - Arguments to create a ContactServiceContact.
     * @example
     * // Create one ContactServiceContact
     * const ContactServiceContact = await prisma.contactServiceContact.create({
     *   data: {
     *     // ... data to create a ContactServiceContact
     *   }
     * })
     * 
     */
    create<T extends ContactServiceContactCreateArgs>(args: SelectSubset<T, ContactServiceContactCreateArgs<ExtArgs>>): Prisma__ContactServiceContactClient<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContactServiceContacts.
     * @param {ContactServiceContactCreateManyArgs} args - Arguments to create many ContactServiceContacts.
     * @example
     * // Create many ContactServiceContacts
     * const contactServiceContact = await prisma.contactServiceContact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactServiceContactCreateManyArgs>(args?: SelectSubset<T, ContactServiceContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactServiceContacts and returns the data saved in the database.
     * @param {ContactServiceContactCreateManyAndReturnArgs} args - Arguments to create many ContactServiceContacts.
     * @example
     * // Create many ContactServiceContacts
     * const contactServiceContact = await prisma.contactServiceContact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactServiceContacts and only return the `id`
     * const contactServiceContactWithIdOnly = await prisma.contactServiceContact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactServiceContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactServiceContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContactServiceContact.
     * @param {ContactServiceContactDeleteArgs} args - Arguments to delete one ContactServiceContact.
     * @example
     * // Delete one ContactServiceContact
     * const ContactServiceContact = await prisma.contactServiceContact.delete({
     *   where: {
     *     // ... filter to delete one ContactServiceContact
     *   }
     * })
     * 
     */
    delete<T extends ContactServiceContactDeleteArgs>(args: SelectSubset<T, ContactServiceContactDeleteArgs<ExtArgs>>): Prisma__ContactServiceContactClient<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContactServiceContact.
     * @param {ContactServiceContactUpdateArgs} args - Arguments to update one ContactServiceContact.
     * @example
     * // Update one ContactServiceContact
     * const contactServiceContact = await prisma.contactServiceContact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactServiceContactUpdateArgs>(args: SelectSubset<T, ContactServiceContactUpdateArgs<ExtArgs>>): Prisma__ContactServiceContactClient<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContactServiceContacts.
     * @param {ContactServiceContactDeleteManyArgs} args - Arguments to filter ContactServiceContacts to delete.
     * @example
     * // Delete a few ContactServiceContacts
     * const { count } = await prisma.contactServiceContact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactServiceContactDeleteManyArgs>(args?: SelectSubset<T, ContactServiceContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactServiceContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactServiceContacts
     * const contactServiceContact = await prisma.contactServiceContact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactServiceContactUpdateManyArgs>(args: SelectSubset<T, ContactServiceContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactServiceContacts and returns the data updated in the database.
     * @param {ContactServiceContactUpdateManyAndReturnArgs} args - Arguments to update many ContactServiceContacts.
     * @example
     * // Update many ContactServiceContacts
     * const contactServiceContact = await prisma.contactServiceContact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContactServiceContacts and only return the `id`
     * const contactServiceContactWithIdOnly = await prisma.contactServiceContact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactServiceContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactServiceContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContactServiceContact.
     * @param {ContactServiceContactUpsertArgs} args - Arguments to update or create a ContactServiceContact.
     * @example
     * // Update or create a ContactServiceContact
     * const contactServiceContact = await prisma.contactServiceContact.upsert({
     *   create: {
     *     // ... data to create a ContactServiceContact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactServiceContact we want to update
     *   }
     * })
     */
    upsert<T extends ContactServiceContactUpsertArgs>(args: SelectSubset<T, ContactServiceContactUpsertArgs<ExtArgs>>): Prisma__ContactServiceContactClient<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContactServiceContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceContactCountArgs} args - Arguments to filter ContactServiceContacts to count.
     * @example
     * // Count the number of ContactServiceContacts
     * const count = await prisma.contactServiceContact.count({
     *   where: {
     *     // ... the filter for the ContactServiceContacts we want to count
     *   }
     * })
    **/
    count<T extends ContactServiceContactCountArgs>(
      args?: Subset<T, ContactServiceContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactServiceContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactServiceContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactServiceContactAggregateArgs>(args: Subset<T, ContactServiceContactAggregateArgs>): Prisma.PrismaPromise<GetContactServiceContactAggregateType<T>>

    /**
     * Group by ContactServiceContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactServiceContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactServiceContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactServiceContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactServiceContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactServiceContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactServiceContact model
   */
  readonly fields: ContactServiceContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactServiceContact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactServiceContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contactService<T extends ContactServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContactServiceDefaultArgs<ExtArgs>>): Prisma__ContactServiceClient<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    posts<T extends ContactServiceContact$postsArgs<ExtArgs> = {}>(args?: Subset<T, ContactServiceContact$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContactServiceContact model
   */
  interface ContactServiceContactFieldRefs {
    readonly id: FieldRef<"ContactServiceContact", 'Int'>
    readonly serviceName: FieldRef<"ContactServiceContact", 'String'>
    readonly district: FieldRef<"ContactServiceContact", 'String'>
    readonly subDistrict: FieldRef<"ContactServiceContact", 'String'>
    readonly block: FieldRef<"ContactServiceContact", 'String'>
    readonly name: FieldRef<"ContactServiceContact", 'String'>
    readonly designation: FieldRef<"ContactServiceContact", 'String'>
    readonly contact: FieldRef<"ContactServiceContact", 'String'>
    readonly email: FieldRef<"ContactServiceContact", 'String'>
    readonly contactServiceId: FieldRef<"ContactServiceContact", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ContactServiceContact findUnique
   */
  export type ContactServiceContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactInclude<ExtArgs> | null
    /**
     * Filter, which ContactServiceContact to fetch.
     */
    where: ContactServiceContactWhereUniqueInput
  }

  /**
   * ContactServiceContact findUniqueOrThrow
   */
  export type ContactServiceContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactInclude<ExtArgs> | null
    /**
     * Filter, which ContactServiceContact to fetch.
     */
    where: ContactServiceContactWhereUniqueInput
  }

  /**
   * ContactServiceContact findFirst
   */
  export type ContactServiceContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactInclude<ExtArgs> | null
    /**
     * Filter, which ContactServiceContact to fetch.
     */
    where?: ContactServiceContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServiceContacts to fetch.
     */
    orderBy?: ContactServiceContactOrderByWithRelationInput | ContactServiceContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactServiceContacts.
     */
    cursor?: ContactServiceContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServiceContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServiceContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactServiceContacts.
     */
    distinct?: ContactServiceContactScalarFieldEnum | ContactServiceContactScalarFieldEnum[]
  }

  /**
   * ContactServiceContact findFirstOrThrow
   */
  export type ContactServiceContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactInclude<ExtArgs> | null
    /**
     * Filter, which ContactServiceContact to fetch.
     */
    where?: ContactServiceContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServiceContacts to fetch.
     */
    orderBy?: ContactServiceContactOrderByWithRelationInput | ContactServiceContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactServiceContacts.
     */
    cursor?: ContactServiceContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServiceContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServiceContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactServiceContacts.
     */
    distinct?: ContactServiceContactScalarFieldEnum | ContactServiceContactScalarFieldEnum[]
  }

  /**
   * ContactServiceContact findMany
   */
  export type ContactServiceContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactInclude<ExtArgs> | null
    /**
     * Filter, which ContactServiceContacts to fetch.
     */
    where?: ContactServiceContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServiceContacts to fetch.
     */
    orderBy?: ContactServiceContactOrderByWithRelationInput | ContactServiceContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactServiceContacts.
     */
    cursor?: ContactServiceContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServiceContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServiceContacts.
     */
    skip?: number
    distinct?: ContactServiceContactScalarFieldEnum | ContactServiceContactScalarFieldEnum[]
  }

  /**
   * ContactServiceContact create
   */
  export type ContactServiceContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactInclude<ExtArgs> | null
    /**
     * The data needed to create a ContactServiceContact.
     */
    data: XOR<ContactServiceContactCreateInput, ContactServiceContactUncheckedCreateInput>
  }

  /**
   * ContactServiceContact createMany
   */
  export type ContactServiceContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactServiceContacts.
     */
    data: ContactServiceContactCreateManyInput | ContactServiceContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactServiceContact createManyAndReturn
   */
  export type ContactServiceContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * The data used to create many ContactServiceContacts.
     */
    data: ContactServiceContactCreateManyInput | ContactServiceContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactServiceContact update
   */
  export type ContactServiceContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactInclude<ExtArgs> | null
    /**
     * The data needed to update a ContactServiceContact.
     */
    data: XOR<ContactServiceContactUpdateInput, ContactServiceContactUncheckedUpdateInput>
    /**
     * Choose, which ContactServiceContact to update.
     */
    where: ContactServiceContactWhereUniqueInput
  }

  /**
   * ContactServiceContact updateMany
   */
  export type ContactServiceContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactServiceContacts.
     */
    data: XOR<ContactServiceContactUpdateManyMutationInput, ContactServiceContactUncheckedUpdateManyInput>
    /**
     * Filter which ContactServiceContacts to update
     */
    where?: ContactServiceContactWhereInput
    /**
     * Limit how many ContactServiceContacts to update.
     */
    limit?: number
  }

  /**
   * ContactServiceContact updateManyAndReturn
   */
  export type ContactServiceContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * The data used to update ContactServiceContacts.
     */
    data: XOR<ContactServiceContactUpdateManyMutationInput, ContactServiceContactUncheckedUpdateManyInput>
    /**
     * Filter which ContactServiceContacts to update
     */
    where?: ContactServiceContactWhereInput
    /**
     * Limit how many ContactServiceContacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactServiceContact upsert
   */
  export type ContactServiceContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactInclude<ExtArgs> | null
    /**
     * The filter to search for the ContactServiceContact to update in case it exists.
     */
    where: ContactServiceContactWhereUniqueInput
    /**
     * In case the ContactServiceContact found by the `where` argument doesn't exist, create a new ContactServiceContact with this data.
     */
    create: XOR<ContactServiceContactCreateInput, ContactServiceContactUncheckedCreateInput>
    /**
     * In case the ContactServiceContact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactServiceContactUpdateInput, ContactServiceContactUncheckedUpdateInput>
  }

  /**
   * ContactServiceContact delete
   */
  export type ContactServiceContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactInclude<ExtArgs> | null
    /**
     * Filter which ContactServiceContact to delete.
     */
    where: ContactServiceContactWhereUniqueInput
  }

  /**
   * ContactServiceContact deleteMany
   */
  export type ContactServiceContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactServiceContacts to delete
     */
    where?: ContactServiceContactWhereInput
    /**
     * Limit how many ContactServiceContacts to delete.
     */
    limit?: number
  }

  /**
   * ContactServiceContact.posts
   */
  export type ContactServiceContact$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * ContactServiceContact without action
   */
  export type ContactServiceContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceContact
     */
    select?: ContactServiceContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceContact
     */
    omit?: ContactServiceContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceContactInclude<ExtArgs> | null
  }


  /**
   * Model ContactServiceDocument
   */

  export type AggregateContactServiceDocument = {
    _count: ContactServiceDocumentCountAggregateOutputType | null
    _avg: ContactServiceDocumentAvgAggregateOutputType | null
    _sum: ContactServiceDocumentSumAggregateOutputType | null
    _min: ContactServiceDocumentMinAggregateOutputType | null
    _max: ContactServiceDocumentMaxAggregateOutputType | null
  }

  export type ContactServiceDocumentAvgAggregateOutputType = {
    id: number | null
    slNo: number | null
    contactServiceId: number | null
  }

  export type ContactServiceDocumentSumAggregateOutputType = {
    id: number | null
    slNo: number | null
    contactServiceId: number | null
  }

  export type ContactServiceDocumentMinAggregateOutputType = {
    id: number | null
    slNo: number | null
    documentType: string | null
    validProof: string | null
    isRequired: boolean | null
    contactServiceId: number | null
  }

  export type ContactServiceDocumentMaxAggregateOutputType = {
    id: number | null
    slNo: number | null
    documentType: string | null
    validProof: string | null
    isRequired: boolean | null
    contactServiceId: number | null
  }

  export type ContactServiceDocumentCountAggregateOutputType = {
    id: number
    slNo: number
    documentType: number
    validProof: number
    isRequired: number
    contactServiceId: number
    _all: number
  }


  export type ContactServiceDocumentAvgAggregateInputType = {
    id?: true
    slNo?: true
    contactServiceId?: true
  }

  export type ContactServiceDocumentSumAggregateInputType = {
    id?: true
    slNo?: true
    contactServiceId?: true
  }

  export type ContactServiceDocumentMinAggregateInputType = {
    id?: true
    slNo?: true
    documentType?: true
    validProof?: true
    isRequired?: true
    contactServiceId?: true
  }

  export type ContactServiceDocumentMaxAggregateInputType = {
    id?: true
    slNo?: true
    documentType?: true
    validProof?: true
    isRequired?: true
    contactServiceId?: true
  }

  export type ContactServiceDocumentCountAggregateInputType = {
    id?: true
    slNo?: true
    documentType?: true
    validProof?: true
    isRequired?: true
    contactServiceId?: true
    _all?: true
  }

  export type ContactServiceDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactServiceDocument to aggregate.
     */
    where?: ContactServiceDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServiceDocuments to fetch.
     */
    orderBy?: ContactServiceDocumentOrderByWithRelationInput | ContactServiceDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactServiceDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServiceDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServiceDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactServiceDocuments
    **/
    _count?: true | ContactServiceDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactServiceDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactServiceDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactServiceDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactServiceDocumentMaxAggregateInputType
  }

  export type GetContactServiceDocumentAggregateType<T extends ContactServiceDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateContactServiceDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactServiceDocument[P]>
      : GetScalarType<T[P], AggregateContactServiceDocument[P]>
  }




  export type ContactServiceDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactServiceDocumentWhereInput
    orderBy?: ContactServiceDocumentOrderByWithAggregationInput | ContactServiceDocumentOrderByWithAggregationInput[]
    by: ContactServiceDocumentScalarFieldEnum[] | ContactServiceDocumentScalarFieldEnum
    having?: ContactServiceDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactServiceDocumentCountAggregateInputType | true
    _avg?: ContactServiceDocumentAvgAggregateInputType
    _sum?: ContactServiceDocumentSumAggregateInputType
    _min?: ContactServiceDocumentMinAggregateInputType
    _max?: ContactServiceDocumentMaxAggregateInputType
  }

  export type ContactServiceDocumentGroupByOutputType = {
    id: number
    slNo: number
    documentType: string
    validProof: string
    isRequired: boolean
    contactServiceId: number
    _count: ContactServiceDocumentCountAggregateOutputType | null
    _avg: ContactServiceDocumentAvgAggregateOutputType | null
    _sum: ContactServiceDocumentSumAggregateOutputType | null
    _min: ContactServiceDocumentMinAggregateOutputType | null
    _max: ContactServiceDocumentMaxAggregateOutputType | null
  }

  type GetContactServiceDocumentGroupByPayload<T extends ContactServiceDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactServiceDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactServiceDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactServiceDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], ContactServiceDocumentGroupByOutputType[P]>
        }
      >
    >


  export type ContactServiceDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    contactServiceId?: boolean
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactServiceDocument"]>

  export type ContactServiceDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    contactServiceId?: boolean
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactServiceDocument"]>

  export type ContactServiceDocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    contactServiceId?: boolean
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactServiceDocument"]>

  export type ContactServiceDocumentSelectScalar = {
    id?: boolean
    slNo?: boolean
    documentType?: boolean
    validProof?: boolean
    isRequired?: boolean
    contactServiceId?: boolean
  }

  export type ContactServiceDocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slNo" | "documentType" | "validProof" | "isRequired" | "contactServiceId", ExtArgs["result"]["contactServiceDocument"]>
  export type ContactServiceDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
  }
  export type ContactServiceDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
  }
  export type ContactServiceDocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contactService?: boolean | ContactServiceDefaultArgs<ExtArgs>
  }

  export type $ContactServiceDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactServiceDocument"
    objects: {
      contactService: Prisma.$ContactServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      slNo: number
      documentType: string
      validProof: string
      isRequired: boolean
      contactServiceId: number
    }, ExtArgs["result"]["contactServiceDocument"]>
    composites: {}
  }

  type ContactServiceDocumentGetPayload<S extends boolean | null | undefined | ContactServiceDocumentDefaultArgs> = $Result.GetResult<Prisma.$ContactServiceDocumentPayload, S>

  type ContactServiceDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactServiceDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactServiceDocumentCountAggregateInputType | true
    }

  export interface ContactServiceDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactServiceDocument'], meta: { name: 'ContactServiceDocument' } }
    /**
     * Find zero or one ContactServiceDocument that matches the filter.
     * @param {ContactServiceDocumentFindUniqueArgs} args - Arguments to find a ContactServiceDocument
     * @example
     * // Get one ContactServiceDocument
     * const contactServiceDocument = await prisma.contactServiceDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactServiceDocumentFindUniqueArgs>(args: SelectSubset<T, ContactServiceDocumentFindUniqueArgs<ExtArgs>>): Prisma__ContactServiceDocumentClient<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContactServiceDocument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactServiceDocumentFindUniqueOrThrowArgs} args - Arguments to find a ContactServiceDocument
     * @example
     * // Get one ContactServiceDocument
     * const contactServiceDocument = await prisma.contactServiceDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactServiceDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactServiceDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactServiceDocumentClient<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactServiceDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceDocumentFindFirstArgs} args - Arguments to find a ContactServiceDocument
     * @example
     * // Get one ContactServiceDocument
     * const contactServiceDocument = await prisma.contactServiceDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactServiceDocumentFindFirstArgs>(args?: SelectSubset<T, ContactServiceDocumentFindFirstArgs<ExtArgs>>): Prisma__ContactServiceDocumentClient<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactServiceDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceDocumentFindFirstOrThrowArgs} args - Arguments to find a ContactServiceDocument
     * @example
     * // Get one ContactServiceDocument
     * const contactServiceDocument = await prisma.contactServiceDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactServiceDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactServiceDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactServiceDocumentClient<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContactServiceDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactServiceDocuments
     * const contactServiceDocuments = await prisma.contactServiceDocument.findMany()
     * 
     * // Get first 10 ContactServiceDocuments
     * const contactServiceDocuments = await prisma.contactServiceDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactServiceDocumentWithIdOnly = await prisma.contactServiceDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactServiceDocumentFindManyArgs>(args?: SelectSubset<T, ContactServiceDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContactServiceDocument.
     * @param {ContactServiceDocumentCreateArgs} args - Arguments to create a ContactServiceDocument.
     * @example
     * // Create one ContactServiceDocument
     * const ContactServiceDocument = await prisma.contactServiceDocument.create({
     *   data: {
     *     // ... data to create a ContactServiceDocument
     *   }
     * })
     * 
     */
    create<T extends ContactServiceDocumentCreateArgs>(args: SelectSubset<T, ContactServiceDocumentCreateArgs<ExtArgs>>): Prisma__ContactServiceDocumentClient<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContactServiceDocuments.
     * @param {ContactServiceDocumentCreateManyArgs} args - Arguments to create many ContactServiceDocuments.
     * @example
     * // Create many ContactServiceDocuments
     * const contactServiceDocument = await prisma.contactServiceDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactServiceDocumentCreateManyArgs>(args?: SelectSubset<T, ContactServiceDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactServiceDocuments and returns the data saved in the database.
     * @param {ContactServiceDocumentCreateManyAndReturnArgs} args - Arguments to create many ContactServiceDocuments.
     * @example
     * // Create many ContactServiceDocuments
     * const contactServiceDocument = await prisma.contactServiceDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactServiceDocuments and only return the `id`
     * const contactServiceDocumentWithIdOnly = await prisma.contactServiceDocument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactServiceDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactServiceDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContactServiceDocument.
     * @param {ContactServiceDocumentDeleteArgs} args - Arguments to delete one ContactServiceDocument.
     * @example
     * // Delete one ContactServiceDocument
     * const ContactServiceDocument = await prisma.contactServiceDocument.delete({
     *   where: {
     *     // ... filter to delete one ContactServiceDocument
     *   }
     * })
     * 
     */
    delete<T extends ContactServiceDocumentDeleteArgs>(args: SelectSubset<T, ContactServiceDocumentDeleteArgs<ExtArgs>>): Prisma__ContactServiceDocumentClient<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContactServiceDocument.
     * @param {ContactServiceDocumentUpdateArgs} args - Arguments to update one ContactServiceDocument.
     * @example
     * // Update one ContactServiceDocument
     * const contactServiceDocument = await prisma.contactServiceDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactServiceDocumentUpdateArgs>(args: SelectSubset<T, ContactServiceDocumentUpdateArgs<ExtArgs>>): Prisma__ContactServiceDocumentClient<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContactServiceDocuments.
     * @param {ContactServiceDocumentDeleteManyArgs} args - Arguments to filter ContactServiceDocuments to delete.
     * @example
     * // Delete a few ContactServiceDocuments
     * const { count } = await prisma.contactServiceDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactServiceDocumentDeleteManyArgs>(args?: SelectSubset<T, ContactServiceDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactServiceDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactServiceDocuments
     * const contactServiceDocument = await prisma.contactServiceDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactServiceDocumentUpdateManyArgs>(args: SelectSubset<T, ContactServiceDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactServiceDocuments and returns the data updated in the database.
     * @param {ContactServiceDocumentUpdateManyAndReturnArgs} args - Arguments to update many ContactServiceDocuments.
     * @example
     * // Update many ContactServiceDocuments
     * const contactServiceDocument = await prisma.contactServiceDocument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContactServiceDocuments and only return the `id`
     * const contactServiceDocumentWithIdOnly = await prisma.contactServiceDocument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactServiceDocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactServiceDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContactServiceDocument.
     * @param {ContactServiceDocumentUpsertArgs} args - Arguments to update or create a ContactServiceDocument.
     * @example
     * // Update or create a ContactServiceDocument
     * const contactServiceDocument = await prisma.contactServiceDocument.upsert({
     *   create: {
     *     // ... data to create a ContactServiceDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactServiceDocument we want to update
     *   }
     * })
     */
    upsert<T extends ContactServiceDocumentUpsertArgs>(args: SelectSubset<T, ContactServiceDocumentUpsertArgs<ExtArgs>>): Prisma__ContactServiceDocumentClient<$Result.GetResult<Prisma.$ContactServiceDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContactServiceDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceDocumentCountArgs} args - Arguments to filter ContactServiceDocuments to count.
     * @example
     * // Count the number of ContactServiceDocuments
     * const count = await prisma.contactServiceDocument.count({
     *   where: {
     *     // ... the filter for the ContactServiceDocuments we want to count
     *   }
     * })
    **/
    count<T extends ContactServiceDocumentCountArgs>(
      args?: Subset<T, ContactServiceDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactServiceDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactServiceDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactServiceDocumentAggregateArgs>(args: Subset<T, ContactServiceDocumentAggregateArgs>): Prisma.PrismaPromise<GetContactServiceDocumentAggregateType<T>>

    /**
     * Group by ContactServiceDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactServiceDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactServiceDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactServiceDocumentGroupByArgs['orderBy'] }
        : { orderBy?: ContactServiceDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactServiceDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactServiceDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactServiceDocument model
   */
  readonly fields: ContactServiceDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactServiceDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactServiceDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contactService<T extends ContactServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContactServiceDefaultArgs<ExtArgs>>): Prisma__ContactServiceClient<$Result.GetResult<Prisma.$ContactServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContactServiceDocument model
   */
  interface ContactServiceDocumentFieldRefs {
    readonly id: FieldRef<"ContactServiceDocument", 'Int'>
    readonly slNo: FieldRef<"ContactServiceDocument", 'Int'>
    readonly documentType: FieldRef<"ContactServiceDocument", 'String'>
    readonly validProof: FieldRef<"ContactServiceDocument", 'String'>
    readonly isRequired: FieldRef<"ContactServiceDocument", 'Boolean'>
    readonly contactServiceId: FieldRef<"ContactServiceDocument", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ContactServiceDocument findUnique
   */
  export type ContactServiceDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentInclude<ExtArgs> | null
    /**
     * Filter, which ContactServiceDocument to fetch.
     */
    where: ContactServiceDocumentWhereUniqueInput
  }

  /**
   * ContactServiceDocument findUniqueOrThrow
   */
  export type ContactServiceDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentInclude<ExtArgs> | null
    /**
     * Filter, which ContactServiceDocument to fetch.
     */
    where: ContactServiceDocumentWhereUniqueInput
  }

  /**
   * ContactServiceDocument findFirst
   */
  export type ContactServiceDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentInclude<ExtArgs> | null
    /**
     * Filter, which ContactServiceDocument to fetch.
     */
    where?: ContactServiceDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServiceDocuments to fetch.
     */
    orderBy?: ContactServiceDocumentOrderByWithRelationInput | ContactServiceDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactServiceDocuments.
     */
    cursor?: ContactServiceDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServiceDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServiceDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactServiceDocuments.
     */
    distinct?: ContactServiceDocumentScalarFieldEnum | ContactServiceDocumentScalarFieldEnum[]
  }

  /**
   * ContactServiceDocument findFirstOrThrow
   */
  export type ContactServiceDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentInclude<ExtArgs> | null
    /**
     * Filter, which ContactServiceDocument to fetch.
     */
    where?: ContactServiceDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServiceDocuments to fetch.
     */
    orderBy?: ContactServiceDocumentOrderByWithRelationInput | ContactServiceDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactServiceDocuments.
     */
    cursor?: ContactServiceDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServiceDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServiceDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactServiceDocuments.
     */
    distinct?: ContactServiceDocumentScalarFieldEnum | ContactServiceDocumentScalarFieldEnum[]
  }

  /**
   * ContactServiceDocument findMany
   */
  export type ContactServiceDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentInclude<ExtArgs> | null
    /**
     * Filter, which ContactServiceDocuments to fetch.
     */
    where?: ContactServiceDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactServiceDocuments to fetch.
     */
    orderBy?: ContactServiceDocumentOrderByWithRelationInput | ContactServiceDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactServiceDocuments.
     */
    cursor?: ContactServiceDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactServiceDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactServiceDocuments.
     */
    skip?: number
    distinct?: ContactServiceDocumentScalarFieldEnum | ContactServiceDocumentScalarFieldEnum[]
  }

  /**
   * ContactServiceDocument create
   */
  export type ContactServiceDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a ContactServiceDocument.
     */
    data: XOR<ContactServiceDocumentCreateInput, ContactServiceDocumentUncheckedCreateInput>
  }

  /**
   * ContactServiceDocument createMany
   */
  export type ContactServiceDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactServiceDocuments.
     */
    data: ContactServiceDocumentCreateManyInput | ContactServiceDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactServiceDocument createManyAndReturn
   */
  export type ContactServiceDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * The data used to create many ContactServiceDocuments.
     */
    data: ContactServiceDocumentCreateManyInput | ContactServiceDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactServiceDocument update
   */
  export type ContactServiceDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a ContactServiceDocument.
     */
    data: XOR<ContactServiceDocumentUpdateInput, ContactServiceDocumentUncheckedUpdateInput>
    /**
     * Choose, which ContactServiceDocument to update.
     */
    where: ContactServiceDocumentWhereUniqueInput
  }

  /**
   * ContactServiceDocument updateMany
   */
  export type ContactServiceDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactServiceDocuments.
     */
    data: XOR<ContactServiceDocumentUpdateManyMutationInput, ContactServiceDocumentUncheckedUpdateManyInput>
    /**
     * Filter which ContactServiceDocuments to update
     */
    where?: ContactServiceDocumentWhereInput
    /**
     * Limit how many ContactServiceDocuments to update.
     */
    limit?: number
  }

  /**
   * ContactServiceDocument updateManyAndReturn
   */
  export type ContactServiceDocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * The data used to update ContactServiceDocuments.
     */
    data: XOR<ContactServiceDocumentUpdateManyMutationInput, ContactServiceDocumentUncheckedUpdateManyInput>
    /**
     * Filter which ContactServiceDocuments to update
     */
    where?: ContactServiceDocumentWhereInput
    /**
     * Limit how many ContactServiceDocuments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactServiceDocument upsert
   */
  export type ContactServiceDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the ContactServiceDocument to update in case it exists.
     */
    where: ContactServiceDocumentWhereUniqueInput
    /**
     * In case the ContactServiceDocument found by the `where` argument doesn't exist, create a new ContactServiceDocument with this data.
     */
    create: XOR<ContactServiceDocumentCreateInput, ContactServiceDocumentUncheckedCreateInput>
    /**
     * In case the ContactServiceDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactServiceDocumentUpdateInput, ContactServiceDocumentUncheckedUpdateInput>
  }

  /**
   * ContactServiceDocument delete
   */
  export type ContactServiceDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentInclude<ExtArgs> | null
    /**
     * Filter which ContactServiceDocument to delete.
     */
    where: ContactServiceDocumentWhereUniqueInput
  }

  /**
   * ContactServiceDocument deleteMany
   */
  export type ContactServiceDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactServiceDocuments to delete
     */
    where?: ContactServiceDocumentWhereInput
    /**
     * Limit how many ContactServiceDocuments to delete.
     */
    limit?: number
  }

  /**
   * ContactServiceDocument without action
   */
  export type ContactServiceDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactServiceDocument
     */
    select?: ContactServiceDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactServiceDocument
     */
    omit?: ContactServiceDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactServiceDocumentInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    officeId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    officeId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    postName: string | null
    rank: string | null
    description: string | null
    department: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    officeId: number | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    postName: string | null
    rank: string | null
    description: string | null
    department: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    officeId: number | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    postName: number
    rank: number
    description: number
    department: number
    status: number
    createdAt: number
    updatedAt: number
    officeId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    officeId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    officeId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    postName?: true
    rank?: true
    description?: true
    department?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    officeId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    postName?: true
    rank?: true
    description?: true
    department?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    officeId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    postName?: true
    rank?: true
    description?: true
    department?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    officeId?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: number
    postName: string
    rank: string
    description: string | null
    department: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    officeId: number
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postName?: boolean
    rank?: boolean
    description?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    officeId?: boolean
    office?: boolean | ContactServiceContactDefaultArgs<ExtArgs>
    employees?: boolean | Post$employeesArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postName?: boolean
    rank?: boolean
    description?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    officeId?: boolean
    office?: boolean | ContactServiceContactDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postName?: boolean
    rank?: boolean
    description?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    officeId?: boolean
    office?: boolean | ContactServiceContactDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    postName?: boolean
    rank?: boolean
    description?: boolean
    department?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    officeId?: boolean
  }

  export type PostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "postName" | "rank" | "description" | "department" | "status" | "createdAt" | "updatedAt" | "officeId", ExtArgs["result"]["post"]>
  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    office?: boolean | ContactServiceContactDefaultArgs<ExtArgs>
    employees?: boolean | Post$employeesArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    office?: boolean | ContactServiceContactDefaultArgs<ExtArgs>
  }
  export type PostIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    office?: boolean | ContactServiceContactDefaultArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      office: Prisma.$ContactServiceContactPayload<ExtArgs>
      employees: Prisma.$EmployeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      postName: string
      rank: string
      description: string | null
      department: string | null
      status: string
      createdAt: Date
      updatedAt: Date
      officeId: number
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts and returns the data updated in the database.
     * @param {PostUpdateManyAndReturnArgs} args - Arguments to update many Posts.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostUpdateManyAndReturnArgs>(args: SelectSubset<T, PostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    office<T extends ContactServiceContactDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContactServiceContactDefaultArgs<ExtArgs>>): Prisma__ContactServiceContactClient<$Result.GetResult<Prisma.$ContactServiceContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employees<T extends Post$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Post$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'Int'>
    readonly postName: FieldRef<"Post", 'String'>
    readonly rank: FieldRef<"Post", 'String'>
    readonly description: FieldRef<"Post", 'String'>
    readonly department: FieldRef<"Post", 'String'>
    readonly status: FieldRef<"Post", 'String'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
    readonly officeId: FieldRef<"Post", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
  }

  /**
   * Post updateManyAndReturn
   */
  export type PostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to delete.
     */
    limit?: number
  }

  /**
   * Post.employees
   */
  export type Post$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number | null
    salary: number | null
    postId: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    id: number | null
    salary: number | null
    postId: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    designation: string | null
    employeeId: string | null
    joiningDate: Date | null
    salary: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    postId: number | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    designation: string | null
    employeeId: string | null
    joiningDate: Date | null
    salary: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    postId: number | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    designation: number
    employeeId: number
    joiningDate: number
    salary: number
    status: number
    createdAt: number
    updatedAt: number
    postId: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
    salary?: true
    postId?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
    salary?: true
    postId?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    designation?: true
    employeeId?: true
    joiningDate?: true
    salary?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    postId?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    designation?: true
    employeeId?: true
    joiningDate?: true
    salary?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    postId?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    designation?: true
    employeeId?: true
    joiningDate?: true
    salary?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    postId?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string
    designation: string
    employeeId: string | null
    joiningDate: Date | null
    salary: number | null
    status: string
    createdAt: Date
    updatedAt: Date
    postId: number
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    designation?: boolean
    employeeId?: boolean
    joiningDate?: boolean
    salary?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    designation?: boolean
    employeeId?: boolean
    joiningDate?: boolean
    salary?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    designation?: boolean
    employeeId?: boolean
    joiningDate?: boolean
    salary?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    postId?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    designation?: boolean
    employeeId?: boolean
    joiningDate?: boolean
    salary?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    postId?: boolean
  }

  export type EmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "designation" | "employeeId" | "joiningDate" | "salary" | "status" | "createdAt" | "updatedAt" | "postId", ExtArgs["result"]["employee"]>
  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string
      designation: string
      employeeId: string | null
      joiningDate: Date | null
      salary: number | null
      status: string
      createdAt: Date
      updatedAt: Date
      postId: number
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees and returns the data updated in the database.
     * @param {EmployeeUpdateManyAndReturnArgs} args - Arguments to update many Employees.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmployeeUpdateManyAndReturnArgs>(args: SelectSubset<T, EmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'Int'>
    readonly name: FieldRef<"Employee", 'String'>
    readonly email: FieldRef<"Employee", 'String'>
    readonly phone: FieldRef<"Employee", 'String'>
    readonly designation: FieldRef<"Employee", 'String'>
    readonly employeeId: FieldRef<"Employee", 'String'>
    readonly joiningDate: FieldRef<"Employee", 'DateTime'>
    readonly salary: FieldRef<"Employee", 'Float'>
    readonly status: FieldRef<"Employee", 'String'>
    readonly createdAt: FieldRef<"Employee", 'DateTime'>
    readonly updatedAt: FieldRef<"Employee", 'DateTime'>
    readonly postId: FieldRef<"Employee", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
  }

  /**
   * Employee updateManyAndReturn
   */
  export type EmployeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to delete.
     */
    limit?: number
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    id: number | null
    rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    id: number | null
    rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    subject: string | null
    message: string | null
    rating: number | null
    category: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    resolvedAt: Date | null
    resolvedBy: string | null
    adminNotes: string | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    subject: string | null
    message: string | null
    rating: number | null
    category: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    resolvedAt: Date | null
    resolvedBy: string | null
    adminNotes: string | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    subject: number
    message: number
    rating: number
    category: number
    status: number
    createdAt: number
    updatedAt: number
    resolvedAt: number
    resolvedBy: number
    adminNotes: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    id?: true
    rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    id?: true
    rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    subject?: true
    message?: true
    rating?: true
    category?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    resolvedBy?: true
    adminNotes?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    subject?: true
    message?: true
    rating?: true
    category?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    resolvedBy?: true
    adminNotes?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    subject?: true
    message?: true
    rating?: true
    category?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    resolvedBy?: true
    adminNotes?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string | null
    subject: string
    message: string
    rating: number | null
    category: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    resolvedAt: Date | null
    resolvedBy: string | null
    adminNotes: string | null
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    subject?: boolean
    message?: boolean
    rating?: boolean
    category?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    resolvedBy?: boolean
    adminNotes?: boolean
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    subject?: boolean
    message?: boolean
    rating?: boolean
    category?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    resolvedBy?: boolean
    adminNotes?: boolean
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    subject?: boolean
    message?: boolean
    rating?: boolean
    category?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    resolvedBy?: boolean
    adminNotes?: boolean
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    subject?: boolean
    message?: boolean
    rating?: boolean
    category?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    resolvedBy?: boolean
    adminNotes?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "subject" | "message" | "rating" | "category" | "status" | "createdAt" | "updatedAt" | "resolvedAt" | "resolvedBy" | "adminNotes", ExtArgs["result"]["feedback"]>

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string | null
      subject: string
      message: string
      rating: number | null
      category: string | null
      status: string
      createdAt: Date
      updatedAt: Date
      resolvedAt: Date | null
      resolvedBy: string | null
      adminNotes: string | null
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks and returns the data updated in the database.
     * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'Int'>
    readonly name: FieldRef<"Feedback", 'String'>
    readonly email: FieldRef<"Feedback", 'String'>
    readonly phone: FieldRef<"Feedback", 'String'>
    readonly subject: FieldRef<"Feedback", 'String'>
    readonly message: FieldRef<"Feedback", 'String'>
    readonly rating: FieldRef<"Feedback", 'Int'>
    readonly category: FieldRef<"Feedback", 'String'>
    readonly status: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
    readonly updatedAt: FieldRef<"Feedback", 'DateTime'>
    readonly resolvedAt: FieldRef<"Feedback", 'DateTime'>
    readonly resolvedBy: FieldRef<"Feedback", 'String'>
    readonly adminNotes: FieldRef<"Feedback", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback updateManyAndReturn
   */
  export type FeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
  }


  /**
   * Model Grievance
   */

  export type AggregateGrievance = {
    _count: GrievanceCountAggregateOutputType | null
    _avg: GrievanceAvgAggregateOutputType | null
    _sum: GrievanceSumAggregateOutputType | null
    _min: GrievanceMinAggregateOutputType | null
    _max: GrievanceMaxAggregateOutputType | null
  }

  export type GrievanceAvgAggregateOutputType = {
    id: number | null
  }

  export type GrievanceSumAggregateOutputType = {
    id: number | null
  }

  export type GrievanceMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    subject: string | null
    description: string | null
    category: string | null
    priority: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    assignedTo: string | null
    adminNotes: string | null
    resolvedAt: Date | null
    trackingId: string | null
  }

  export type GrievanceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    subject: string | null
    description: string | null
    category: string | null
    priority: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    assignedTo: string | null
    adminNotes: string | null
    resolvedAt: Date | null
    trackingId: string | null
  }

  export type GrievanceCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    address: number
    subject: number
    description: number
    category: number
    priority: number
    status: number
    attachments: number
    createdAt: number
    updatedAt: number
    assignedTo: number
    adminNotes: number
    resolvedAt: number
    trackingId: number
    _all: number
  }


  export type GrievanceAvgAggregateInputType = {
    id?: true
  }

  export type GrievanceSumAggregateInputType = {
    id?: true
  }

  export type GrievanceMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    subject?: true
    description?: true
    category?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    assignedTo?: true
    adminNotes?: true
    resolvedAt?: true
    trackingId?: true
  }

  export type GrievanceMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    subject?: true
    description?: true
    category?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    assignedTo?: true
    adminNotes?: true
    resolvedAt?: true
    trackingId?: true
  }

  export type GrievanceCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    subject?: true
    description?: true
    category?: true
    priority?: true
    status?: true
    attachments?: true
    createdAt?: true
    updatedAt?: true
    assignedTo?: true
    adminNotes?: true
    resolvedAt?: true
    trackingId?: true
    _all?: true
  }

  export type GrievanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grievance to aggregate.
     */
    where?: GrievanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grievances to fetch.
     */
    orderBy?: GrievanceOrderByWithRelationInput | GrievanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrievanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grievances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grievances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grievances
    **/
    _count?: true | GrievanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrievanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrievanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrievanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrievanceMaxAggregateInputType
  }

  export type GetGrievanceAggregateType<T extends GrievanceAggregateArgs> = {
        [P in keyof T & keyof AggregateGrievance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrievance[P]>
      : GetScalarType<T[P], AggregateGrievance[P]>
  }




  export type GrievanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceWhereInput
    orderBy?: GrievanceOrderByWithAggregationInput | GrievanceOrderByWithAggregationInput[]
    by: GrievanceScalarFieldEnum[] | GrievanceScalarFieldEnum
    having?: GrievanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrievanceCountAggregateInputType | true
    _avg?: GrievanceAvgAggregateInputType
    _sum?: GrievanceSumAggregateInputType
    _min?: GrievanceMinAggregateInputType
    _max?: GrievanceMaxAggregateInputType
  }

  export type GrievanceGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string
    address: string
    subject: string
    description: string
    category: string | null
    priority: string
    status: string
    attachments: string[]
    createdAt: Date
    updatedAt: Date
    assignedTo: string | null
    adminNotes: string | null
    resolvedAt: Date | null
    trackingId: string
    _count: GrievanceCountAggregateOutputType | null
    _avg: GrievanceAvgAggregateOutputType | null
    _sum: GrievanceSumAggregateOutputType | null
    _min: GrievanceMinAggregateOutputType | null
    _max: GrievanceMaxAggregateOutputType | null
  }

  type GetGrievanceGroupByPayload<T extends GrievanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrievanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrievanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrievanceGroupByOutputType[P]>
            : GetScalarType<T[P], GrievanceGroupByOutputType[P]>
        }
      >
    >


  export type GrievanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    subject?: boolean
    description?: boolean
    category?: boolean
    priority?: boolean
    status?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assignedTo?: boolean
    adminNotes?: boolean
    resolvedAt?: boolean
    trackingId?: boolean
  }, ExtArgs["result"]["grievance"]>

  export type GrievanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    subject?: boolean
    description?: boolean
    category?: boolean
    priority?: boolean
    status?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assignedTo?: boolean
    adminNotes?: boolean
    resolvedAt?: boolean
    trackingId?: boolean
  }, ExtArgs["result"]["grievance"]>

  export type GrievanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    subject?: boolean
    description?: boolean
    category?: boolean
    priority?: boolean
    status?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assignedTo?: boolean
    adminNotes?: boolean
    resolvedAt?: boolean
    trackingId?: boolean
  }, ExtArgs["result"]["grievance"]>

  export type GrievanceSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    subject?: boolean
    description?: boolean
    category?: boolean
    priority?: boolean
    status?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assignedTo?: boolean
    adminNotes?: boolean
    resolvedAt?: boolean
    trackingId?: boolean
  }

  export type GrievanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "address" | "subject" | "description" | "category" | "priority" | "status" | "attachments" | "createdAt" | "updatedAt" | "assignedTo" | "adminNotes" | "resolvedAt" | "trackingId", ExtArgs["result"]["grievance"]>

  export type $GrievancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grievance"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string
      address: string
      subject: string
      description: string
      category: string | null
      priority: string
      status: string
      attachments: string[]
      createdAt: Date
      updatedAt: Date
      assignedTo: string | null
      adminNotes: string | null
      resolvedAt: Date | null
      trackingId: string
    }, ExtArgs["result"]["grievance"]>
    composites: {}
  }

  type GrievanceGetPayload<S extends boolean | null | undefined | GrievanceDefaultArgs> = $Result.GetResult<Prisma.$GrievancePayload, S>

  type GrievanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GrievanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GrievanceCountAggregateInputType | true
    }

  export interface GrievanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grievance'], meta: { name: 'Grievance' } }
    /**
     * Find zero or one Grievance that matches the filter.
     * @param {GrievanceFindUniqueArgs} args - Arguments to find a Grievance
     * @example
     * // Get one Grievance
     * const grievance = await prisma.grievance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GrievanceFindUniqueArgs>(args: SelectSubset<T, GrievanceFindUniqueArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Grievance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GrievanceFindUniqueOrThrowArgs} args - Arguments to find a Grievance
     * @example
     * // Get one Grievance
     * const grievance = await prisma.grievance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GrievanceFindUniqueOrThrowArgs>(args: SelectSubset<T, GrievanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grievance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceFindFirstArgs} args - Arguments to find a Grievance
     * @example
     * // Get one Grievance
     * const grievance = await prisma.grievance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GrievanceFindFirstArgs>(args?: SelectSubset<T, GrievanceFindFirstArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grievance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceFindFirstOrThrowArgs} args - Arguments to find a Grievance
     * @example
     * // Get one Grievance
     * const grievance = await prisma.grievance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GrievanceFindFirstOrThrowArgs>(args?: SelectSubset<T, GrievanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Grievances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grievances
     * const grievances = await prisma.grievance.findMany()
     * 
     * // Get first 10 Grievances
     * const grievances = await prisma.grievance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grievanceWithIdOnly = await prisma.grievance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GrievanceFindManyArgs>(args?: SelectSubset<T, GrievanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Grievance.
     * @param {GrievanceCreateArgs} args - Arguments to create a Grievance.
     * @example
     * // Create one Grievance
     * const Grievance = await prisma.grievance.create({
     *   data: {
     *     // ... data to create a Grievance
     *   }
     * })
     * 
     */
    create<T extends GrievanceCreateArgs>(args: SelectSubset<T, GrievanceCreateArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Grievances.
     * @param {GrievanceCreateManyArgs} args - Arguments to create many Grievances.
     * @example
     * // Create many Grievances
     * const grievance = await prisma.grievance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GrievanceCreateManyArgs>(args?: SelectSubset<T, GrievanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Grievances and returns the data saved in the database.
     * @param {GrievanceCreateManyAndReturnArgs} args - Arguments to create many Grievances.
     * @example
     * // Create many Grievances
     * const grievance = await prisma.grievance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Grievances and only return the `id`
     * const grievanceWithIdOnly = await prisma.grievance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GrievanceCreateManyAndReturnArgs>(args?: SelectSubset<T, GrievanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Grievance.
     * @param {GrievanceDeleteArgs} args - Arguments to delete one Grievance.
     * @example
     * // Delete one Grievance
     * const Grievance = await prisma.grievance.delete({
     *   where: {
     *     // ... filter to delete one Grievance
     *   }
     * })
     * 
     */
    delete<T extends GrievanceDeleteArgs>(args: SelectSubset<T, GrievanceDeleteArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Grievance.
     * @param {GrievanceUpdateArgs} args - Arguments to update one Grievance.
     * @example
     * // Update one Grievance
     * const grievance = await prisma.grievance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GrievanceUpdateArgs>(args: SelectSubset<T, GrievanceUpdateArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Grievances.
     * @param {GrievanceDeleteManyArgs} args - Arguments to filter Grievances to delete.
     * @example
     * // Delete a few Grievances
     * const { count } = await prisma.grievance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GrievanceDeleteManyArgs>(args?: SelectSubset<T, GrievanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grievances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grievances
     * const grievance = await prisma.grievance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GrievanceUpdateManyArgs>(args: SelectSubset<T, GrievanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grievances and returns the data updated in the database.
     * @param {GrievanceUpdateManyAndReturnArgs} args - Arguments to update many Grievances.
     * @example
     * // Update many Grievances
     * const grievance = await prisma.grievance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Grievances and only return the `id`
     * const grievanceWithIdOnly = await prisma.grievance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GrievanceUpdateManyAndReturnArgs>(args: SelectSubset<T, GrievanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Grievance.
     * @param {GrievanceUpsertArgs} args - Arguments to update or create a Grievance.
     * @example
     * // Update or create a Grievance
     * const grievance = await prisma.grievance.upsert({
     *   create: {
     *     // ... data to create a Grievance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grievance we want to update
     *   }
     * })
     */
    upsert<T extends GrievanceUpsertArgs>(args: SelectSubset<T, GrievanceUpsertArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Grievances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCountArgs} args - Arguments to filter Grievances to count.
     * @example
     * // Count the number of Grievances
     * const count = await prisma.grievance.count({
     *   where: {
     *     // ... the filter for the Grievances we want to count
     *   }
     * })
    **/
    count<T extends GrievanceCountArgs>(
      args?: Subset<T, GrievanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrievanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grievance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrievanceAggregateArgs>(args: Subset<T, GrievanceAggregateArgs>): Prisma.PrismaPromise<GetGrievanceAggregateType<T>>

    /**
     * Group by Grievance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrievanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrievanceGroupByArgs['orderBy'] }
        : { orderBy?: GrievanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrievanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrievanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grievance model
   */
  readonly fields: GrievanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grievance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrievanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Grievance model
   */
  interface GrievanceFieldRefs {
    readonly id: FieldRef<"Grievance", 'Int'>
    readonly name: FieldRef<"Grievance", 'String'>
    readonly email: FieldRef<"Grievance", 'String'>
    readonly phone: FieldRef<"Grievance", 'String'>
    readonly address: FieldRef<"Grievance", 'String'>
    readonly subject: FieldRef<"Grievance", 'String'>
    readonly description: FieldRef<"Grievance", 'String'>
    readonly category: FieldRef<"Grievance", 'String'>
    readonly priority: FieldRef<"Grievance", 'String'>
    readonly status: FieldRef<"Grievance", 'String'>
    readonly attachments: FieldRef<"Grievance", 'String[]'>
    readonly createdAt: FieldRef<"Grievance", 'DateTime'>
    readonly updatedAt: FieldRef<"Grievance", 'DateTime'>
    readonly assignedTo: FieldRef<"Grievance", 'String'>
    readonly adminNotes: FieldRef<"Grievance", 'String'>
    readonly resolvedAt: FieldRef<"Grievance", 'DateTime'>
    readonly trackingId: FieldRef<"Grievance", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Grievance findUnique
   */
  export type GrievanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
    /**
     * Filter, which Grievance to fetch.
     */
    where: GrievanceWhereUniqueInput
  }

  /**
   * Grievance findUniqueOrThrow
   */
  export type GrievanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
    /**
     * Filter, which Grievance to fetch.
     */
    where: GrievanceWhereUniqueInput
  }

  /**
   * Grievance findFirst
   */
  export type GrievanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
    /**
     * Filter, which Grievance to fetch.
     */
    where?: GrievanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grievances to fetch.
     */
    orderBy?: GrievanceOrderByWithRelationInput | GrievanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grievances.
     */
    cursor?: GrievanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grievances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grievances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grievances.
     */
    distinct?: GrievanceScalarFieldEnum | GrievanceScalarFieldEnum[]
  }

  /**
   * Grievance findFirstOrThrow
   */
  export type GrievanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
    /**
     * Filter, which Grievance to fetch.
     */
    where?: GrievanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grievances to fetch.
     */
    orderBy?: GrievanceOrderByWithRelationInput | GrievanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grievances.
     */
    cursor?: GrievanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grievances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grievances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grievances.
     */
    distinct?: GrievanceScalarFieldEnum | GrievanceScalarFieldEnum[]
  }

  /**
   * Grievance findMany
   */
  export type GrievanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
    /**
     * Filter, which Grievances to fetch.
     */
    where?: GrievanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grievances to fetch.
     */
    orderBy?: GrievanceOrderByWithRelationInput | GrievanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grievances.
     */
    cursor?: GrievanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grievances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grievances.
     */
    skip?: number
    distinct?: GrievanceScalarFieldEnum | GrievanceScalarFieldEnum[]
  }

  /**
   * Grievance create
   */
  export type GrievanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
    /**
     * The data needed to create a Grievance.
     */
    data: XOR<GrievanceCreateInput, GrievanceUncheckedCreateInput>
  }

  /**
   * Grievance createMany
   */
  export type GrievanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grievances.
     */
    data: GrievanceCreateManyInput | GrievanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Grievance createManyAndReturn
   */
  export type GrievanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
    /**
     * The data used to create many Grievances.
     */
    data: GrievanceCreateManyInput | GrievanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Grievance update
   */
  export type GrievanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
    /**
     * The data needed to update a Grievance.
     */
    data: XOR<GrievanceUpdateInput, GrievanceUncheckedUpdateInput>
    /**
     * Choose, which Grievance to update.
     */
    where: GrievanceWhereUniqueInput
  }

  /**
   * Grievance updateMany
   */
  export type GrievanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grievances.
     */
    data: XOR<GrievanceUpdateManyMutationInput, GrievanceUncheckedUpdateManyInput>
    /**
     * Filter which Grievances to update
     */
    where?: GrievanceWhereInput
    /**
     * Limit how many Grievances to update.
     */
    limit?: number
  }

  /**
   * Grievance updateManyAndReturn
   */
  export type GrievanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
    /**
     * The data used to update Grievances.
     */
    data: XOR<GrievanceUpdateManyMutationInput, GrievanceUncheckedUpdateManyInput>
    /**
     * Filter which Grievances to update
     */
    where?: GrievanceWhereInput
    /**
     * Limit how many Grievances to update.
     */
    limit?: number
  }

  /**
   * Grievance upsert
   */
  export type GrievanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
    /**
     * The filter to search for the Grievance to update in case it exists.
     */
    where: GrievanceWhereUniqueInput
    /**
     * In case the Grievance found by the `where` argument doesn't exist, create a new Grievance with this data.
     */
    create: XOR<GrievanceCreateInput, GrievanceUncheckedCreateInput>
    /**
     * In case the Grievance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrievanceUpdateInput, GrievanceUncheckedUpdateInput>
  }

  /**
   * Grievance delete
   */
  export type GrievanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
    /**
     * Filter which Grievance to delete.
     */
    where: GrievanceWhereUniqueInput
  }

  /**
   * Grievance deleteMany
   */
  export type GrievanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grievances to delete
     */
    where?: GrievanceWhereInput
    /**
     * Limit how many Grievances to delete.
     */
    limit?: number
  }

  /**
   * Grievance without action
   */
  export type GrievanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grievance
     */
    omit?: GrievanceOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const SchemeServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    type: 'type',
    targetAudience: 'targetAudience',
    applicationMode: 'applicationMode',
    onlineUrl: 'onlineUrl',
    offlineAddress: 'offlineAddress',
    status: 'status',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    adminId: 'adminId',
    eligibilityDetails: 'eligibilityDetails',
    schemeDetails: 'schemeDetails',
    processDetails: 'processDetails',
    processNew: 'processNew',
    processUpdate: 'processUpdate',
    processLost: 'processLost',
    processSurrender: 'processSurrender',
    docNew: 'docNew',
    docUpdate: 'docUpdate',
    docLost: 'docLost',
    docSurrender: 'docSurrender'
  };

  export type SchemeServiceScalarFieldEnum = (typeof SchemeServiceScalarFieldEnum)[keyof typeof SchemeServiceScalarFieldEnum]


  export const ContactPersonScalarFieldEnum: {
    id: 'id',
    serviceName: 'serviceName',
    district: 'district',
    subDistrict: 'subDistrict',
    block: 'block',
    name: 'name',
    designation: 'designation',
    contact: 'contact',
    email: 'email',
    schemeServiceId: 'schemeServiceId'
  };

  export type ContactPersonScalarFieldEnum = (typeof ContactPersonScalarFieldEnum)[keyof typeof ContactPersonScalarFieldEnum]


  export const SupportiveDocumentScalarFieldEnum: {
    id: 'id',
    slNo: 'slNo',
    documentType: 'documentType',
    validProof: 'validProof',
    isRequired: 'isRequired',
    schemeServiceId: 'schemeServiceId'
  };

  export type SupportiveDocumentScalarFieldEnum = (typeof SupportiveDocumentScalarFieldEnum)[keyof typeof SupportiveDocumentScalarFieldEnum]


  export const CertificateServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    type: 'type',
    targetAudience: 'targetAudience',
    applicationMode: 'applicationMode',
    onlineUrl: 'onlineUrl',
    offlineAddress: 'offlineAddress',
    status: 'status',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    adminId: 'adminId',
    eligibilityDetails: 'eligibilityDetails',
    certificateDetails: 'certificateDetails',
    processDetails: 'processDetails',
    processNew: 'processNew',
    processUpdate: 'processUpdate',
    processLost: 'processLost',
    processSurrender: 'processSurrender',
    docNew: 'docNew',
    docUpdate: 'docUpdate',
    docLost: 'docLost',
    docSurrender: 'docSurrender'
  };

  export type CertificateServiceScalarFieldEnum = (typeof CertificateServiceScalarFieldEnum)[keyof typeof CertificateServiceScalarFieldEnum]


  export const CertificateContactScalarFieldEnum: {
    id: 'id',
    serviceName: 'serviceName',
    district: 'district',
    subDistrict: 'subDistrict',
    block: 'block',
    name: 'name',
    designation: 'designation',
    contact: 'contact',
    email: 'email',
    applicationType: 'applicationType',
    certificateServiceId: 'certificateServiceId'
  };

  export type CertificateContactScalarFieldEnum = (typeof CertificateContactScalarFieldEnum)[keyof typeof CertificateContactScalarFieldEnum]


  export const CertificateDocumentScalarFieldEnum: {
    id: 'id',
    slNo: 'slNo',
    documentType: 'documentType',
    validProof: 'validProof',
    isRequired: 'isRequired',
    applicationType: 'applicationType',
    certificateServiceId: 'certificateServiceId'
  };

  export type CertificateDocumentScalarFieldEnum = (typeof CertificateDocumentScalarFieldEnum)[keyof typeof CertificateDocumentScalarFieldEnum]


  export const CertificateProcessStepScalarFieldEnum: {
    id: 'id',
    slNo: 'slNo',
    stepDetails: 'stepDetails',
    applicationType: 'applicationType',
    certificateServiceId: 'certificateServiceId'
  };

  export type CertificateProcessStepScalarFieldEnum = (typeof CertificateProcessStepScalarFieldEnum)[keyof typeof CertificateProcessStepScalarFieldEnum]


  export const CertificateEligibilityScalarFieldEnum: {
    id: 'id',
    eligibilityDetail: 'eligibilityDetail',
    applicationType: 'applicationType',
    certificateServiceId: 'certificateServiceId'
  };

  export type CertificateEligibilityScalarFieldEnum = (typeof CertificateEligibilityScalarFieldEnum)[keyof typeof CertificateEligibilityScalarFieldEnum]


  export const ContactServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    type: 'type',
    targetAudience: 'targetAudience',
    applicationMode: 'applicationMode',
    onlineUrl: 'onlineUrl',
    offlineAddress: 'offlineAddress',
    status: 'status',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    adminId: 'adminId',
    eligibilityDetails: 'eligibilityDetails',
    contactDetails: 'contactDetails',
    processDetails: 'processDetails',
    processNew: 'processNew',
    processUpdate: 'processUpdate',
    processLost: 'processLost',
    processSurrender: 'processSurrender',
    docNew: 'docNew',
    docUpdate: 'docUpdate',
    docLost: 'docLost',
    docSurrender: 'docSurrender'
  };

  export type ContactServiceScalarFieldEnum = (typeof ContactServiceScalarFieldEnum)[keyof typeof ContactServiceScalarFieldEnum]


  export const ContactServiceContactScalarFieldEnum: {
    id: 'id',
    serviceName: 'serviceName',
    district: 'district',
    subDistrict: 'subDistrict',
    block: 'block',
    name: 'name',
    designation: 'designation',
    contact: 'contact',
    email: 'email',
    contactServiceId: 'contactServiceId'
  };

  export type ContactServiceContactScalarFieldEnum = (typeof ContactServiceContactScalarFieldEnum)[keyof typeof ContactServiceContactScalarFieldEnum]


  export const ContactServiceDocumentScalarFieldEnum: {
    id: 'id',
    slNo: 'slNo',
    documentType: 'documentType',
    validProof: 'validProof',
    isRequired: 'isRequired',
    contactServiceId: 'contactServiceId'
  };

  export type ContactServiceDocumentScalarFieldEnum = (typeof ContactServiceDocumentScalarFieldEnum)[keyof typeof ContactServiceDocumentScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    postName: 'postName',
    rank: 'rank',
    description: 'description',
    department: 'department',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    officeId: 'officeId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    designation: 'designation',
    employeeId: 'employeeId',
    joiningDate: 'joiningDate',
    salary: 'salary',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    postId: 'postId'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    subject: 'subject',
    message: 'message',
    rating: 'rating',
    category: 'category',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    resolvedAt: 'resolvedAt',
    resolvedBy: 'resolvedBy',
    adminNotes: 'adminNotes'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const GrievanceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    address: 'address',
    subject: 'subject',
    description: 'description',
    category: 'category',
    priority: 'priority',
    status: 'status',
    attachments: 'attachments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    assignedTo: 'assignedTo',
    adminNotes: 'adminNotes',
    resolvedAt: 'resolvedAt',
    trackingId: 'trackingId'
  };

  export type GrievanceScalarFieldEnum = (typeof GrievanceScalarFieldEnum)[keyof typeof GrievanceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    email?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    name?: StringFilter<"Admin"> | string
    role?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    schemeServices?: SchemeServiceListRelationFilter
    certificateServices?: CertificateServiceListRelationFilter
    contactServices?: ContactServiceListRelationFilter
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    schemeServices?: SchemeServiceOrderByRelationAggregateInput
    certificateServices?: CertificateServiceOrderByRelationAggregateInput
    contactServices?: ContactServiceOrderByRelationAggregateInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    password?: StringFilter<"Admin"> | string
    name?: StringFilter<"Admin"> | string
    role?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    schemeServices?: SchemeServiceListRelationFilter
    certificateServices?: CertificateServiceListRelationFilter
    contactServices?: ContactServiceListRelationFilter
  }, "id" | "email">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    email?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    name?: StringWithAggregatesFilter<"Admin"> | string
    role?: StringWithAggregatesFilter<"Admin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
  }

  export type SchemeServiceWhereInput = {
    AND?: SchemeServiceWhereInput | SchemeServiceWhereInput[]
    OR?: SchemeServiceWhereInput[]
    NOT?: SchemeServiceWhereInput | SchemeServiceWhereInput[]
    id?: IntFilter<"SchemeService"> | number
    name?: StringFilter<"SchemeService"> | string
    summary?: StringFilter<"SchemeService"> | string
    type?: StringNullableFilter<"SchemeService"> | string | null
    targetAudience?: StringNullableListFilter<"SchemeService">
    applicationMode?: StringFilter<"SchemeService"> | string
    onlineUrl?: StringNullableFilter<"SchemeService"> | string | null
    offlineAddress?: StringNullableFilter<"SchemeService"> | string | null
    status?: StringFilter<"SchemeService"> | string
    isActive?: BoolFilter<"SchemeService"> | boolean
    createdAt?: DateTimeFilter<"SchemeService"> | Date | string
    updatedAt?: DateTimeFilter<"SchemeService"> | Date | string
    adminId?: IntFilter<"SchemeService"> | number
    eligibilityDetails?: StringNullableListFilter<"SchemeService">
    schemeDetails?: StringNullableListFilter<"SchemeService">
    processDetails?: StringNullableListFilter<"SchemeService">
    processNew?: StringNullableFilter<"SchemeService"> | string | null
    processUpdate?: StringNullableFilter<"SchemeService"> | string | null
    processLost?: StringNullableFilter<"SchemeService"> | string | null
    processSurrender?: StringNullableFilter<"SchemeService"> | string | null
    docNew?: StringNullableFilter<"SchemeService"> | string | null
    docUpdate?: StringNullableFilter<"SchemeService"> | string | null
    docLost?: StringNullableFilter<"SchemeService"> | string | null
    docSurrender?: StringNullableFilter<"SchemeService"> | string | null
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    contacts?: ContactPersonListRelationFilter
    documents?: SupportiveDocumentListRelationFilter
  }

  export type SchemeServiceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrderInput | SortOrder
    targetAudience?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrderInput | SortOrder
    offlineAddress?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    eligibilityDetails?: SortOrder
    schemeDetails?: SortOrder
    processDetails?: SortOrder
    processNew?: SortOrderInput | SortOrder
    processUpdate?: SortOrderInput | SortOrder
    processLost?: SortOrderInput | SortOrder
    processSurrender?: SortOrderInput | SortOrder
    docNew?: SortOrderInput | SortOrder
    docUpdate?: SortOrderInput | SortOrder
    docLost?: SortOrderInput | SortOrder
    docSurrender?: SortOrderInput | SortOrder
    admin?: AdminOrderByWithRelationInput
    contacts?: ContactPersonOrderByRelationAggregateInput
    documents?: SupportiveDocumentOrderByRelationAggregateInput
  }

  export type SchemeServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SchemeServiceWhereInput | SchemeServiceWhereInput[]
    OR?: SchemeServiceWhereInput[]
    NOT?: SchemeServiceWhereInput | SchemeServiceWhereInput[]
    name?: StringFilter<"SchemeService"> | string
    summary?: StringFilter<"SchemeService"> | string
    type?: StringNullableFilter<"SchemeService"> | string | null
    targetAudience?: StringNullableListFilter<"SchemeService">
    applicationMode?: StringFilter<"SchemeService"> | string
    onlineUrl?: StringNullableFilter<"SchemeService"> | string | null
    offlineAddress?: StringNullableFilter<"SchemeService"> | string | null
    status?: StringFilter<"SchemeService"> | string
    isActive?: BoolFilter<"SchemeService"> | boolean
    createdAt?: DateTimeFilter<"SchemeService"> | Date | string
    updatedAt?: DateTimeFilter<"SchemeService"> | Date | string
    adminId?: IntFilter<"SchemeService"> | number
    eligibilityDetails?: StringNullableListFilter<"SchemeService">
    schemeDetails?: StringNullableListFilter<"SchemeService">
    processDetails?: StringNullableListFilter<"SchemeService">
    processNew?: StringNullableFilter<"SchemeService"> | string | null
    processUpdate?: StringNullableFilter<"SchemeService"> | string | null
    processLost?: StringNullableFilter<"SchemeService"> | string | null
    processSurrender?: StringNullableFilter<"SchemeService"> | string | null
    docNew?: StringNullableFilter<"SchemeService"> | string | null
    docUpdate?: StringNullableFilter<"SchemeService"> | string | null
    docLost?: StringNullableFilter<"SchemeService"> | string | null
    docSurrender?: StringNullableFilter<"SchemeService"> | string | null
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    contacts?: ContactPersonListRelationFilter
    documents?: SupportiveDocumentListRelationFilter
  }, "id">

  export type SchemeServiceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrderInput | SortOrder
    targetAudience?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrderInput | SortOrder
    offlineAddress?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    eligibilityDetails?: SortOrder
    schemeDetails?: SortOrder
    processDetails?: SortOrder
    processNew?: SortOrderInput | SortOrder
    processUpdate?: SortOrderInput | SortOrder
    processLost?: SortOrderInput | SortOrder
    processSurrender?: SortOrderInput | SortOrder
    docNew?: SortOrderInput | SortOrder
    docUpdate?: SortOrderInput | SortOrder
    docLost?: SortOrderInput | SortOrder
    docSurrender?: SortOrderInput | SortOrder
    _count?: SchemeServiceCountOrderByAggregateInput
    _avg?: SchemeServiceAvgOrderByAggregateInput
    _max?: SchemeServiceMaxOrderByAggregateInput
    _min?: SchemeServiceMinOrderByAggregateInput
    _sum?: SchemeServiceSumOrderByAggregateInput
  }

  export type SchemeServiceScalarWhereWithAggregatesInput = {
    AND?: SchemeServiceScalarWhereWithAggregatesInput | SchemeServiceScalarWhereWithAggregatesInput[]
    OR?: SchemeServiceScalarWhereWithAggregatesInput[]
    NOT?: SchemeServiceScalarWhereWithAggregatesInput | SchemeServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SchemeService"> | number
    name?: StringWithAggregatesFilter<"SchemeService"> | string
    summary?: StringWithAggregatesFilter<"SchemeService"> | string
    type?: StringNullableWithAggregatesFilter<"SchemeService"> | string | null
    targetAudience?: StringNullableListFilter<"SchemeService">
    applicationMode?: StringWithAggregatesFilter<"SchemeService"> | string
    onlineUrl?: StringNullableWithAggregatesFilter<"SchemeService"> | string | null
    offlineAddress?: StringNullableWithAggregatesFilter<"SchemeService"> | string | null
    status?: StringWithAggregatesFilter<"SchemeService"> | string
    isActive?: BoolWithAggregatesFilter<"SchemeService"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SchemeService"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SchemeService"> | Date | string
    adminId?: IntWithAggregatesFilter<"SchemeService"> | number
    eligibilityDetails?: StringNullableListFilter<"SchemeService">
    schemeDetails?: StringNullableListFilter<"SchemeService">
    processDetails?: StringNullableListFilter<"SchemeService">
    processNew?: StringNullableWithAggregatesFilter<"SchemeService"> | string | null
    processUpdate?: StringNullableWithAggregatesFilter<"SchemeService"> | string | null
    processLost?: StringNullableWithAggregatesFilter<"SchemeService"> | string | null
    processSurrender?: StringNullableWithAggregatesFilter<"SchemeService"> | string | null
    docNew?: StringNullableWithAggregatesFilter<"SchemeService"> | string | null
    docUpdate?: StringNullableWithAggregatesFilter<"SchemeService"> | string | null
    docLost?: StringNullableWithAggregatesFilter<"SchemeService"> | string | null
    docSurrender?: StringNullableWithAggregatesFilter<"SchemeService"> | string | null
  }

  export type ContactPersonWhereInput = {
    AND?: ContactPersonWhereInput | ContactPersonWhereInput[]
    OR?: ContactPersonWhereInput[]
    NOT?: ContactPersonWhereInput | ContactPersonWhereInput[]
    id?: IntFilter<"ContactPerson"> | number
    serviceName?: StringFilter<"ContactPerson"> | string
    district?: StringFilter<"ContactPerson"> | string
    subDistrict?: StringFilter<"ContactPerson"> | string
    block?: StringFilter<"ContactPerson"> | string
    name?: StringFilter<"ContactPerson"> | string
    designation?: StringFilter<"ContactPerson"> | string
    contact?: StringFilter<"ContactPerson"> | string
    email?: StringFilter<"ContactPerson"> | string
    schemeServiceId?: IntFilter<"ContactPerson"> | number
    schemeService?: XOR<SchemeServiceScalarRelationFilter, SchemeServiceWhereInput>
  }

  export type ContactPersonOrderByWithRelationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    schemeServiceId?: SortOrder
    schemeService?: SchemeServiceOrderByWithRelationInput
  }

  export type ContactPersonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactPersonWhereInput | ContactPersonWhereInput[]
    OR?: ContactPersonWhereInput[]
    NOT?: ContactPersonWhereInput | ContactPersonWhereInput[]
    serviceName?: StringFilter<"ContactPerson"> | string
    district?: StringFilter<"ContactPerson"> | string
    subDistrict?: StringFilter<"ContactPerson"> | string
    block?: StringFilter<"ContactPerson"> | string
    name?: StringFilter<"ContactPerson"> | string
    designation?: StringFilter<"ContactPerson"> | string
    contact?: StringFilter<"ContactPerson"> | string
    email?: StringFilter<"ContactPerson"> | string
    schemeServiceId?: IntFilter<"ContactPerson"> | number
    schemeService?: XOR<SchemeServiceScalarRelationFilter, SchemeServiceWhereInput>
  }, "id">

  export type ContactPersonOrderByWithAggregationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    schemeServiceId?: SortOrder
    _count?: ContactPersonCountOrderByAggregateInput
    _avg?: ContactPersonAvgOrderByAggregateInput
    _max?: ContactPersonMaxOrderByAggregateInput
    _min?: ContactPersonMinOrderByAggregateInput
    _sum?: ContactPersonSumOrderByAggregateInput
  }

  export type ContactPersonScalarWhereWithAggregatesInput = {
    AND?: ContactPersonScalarWhereWithAggregatesInput | ContactPersonScalarWhereWithAggregatesInput[]
    OR?: ContactPersonScalarWhereWithAggregatesInput[]
    NOT?: ContactPersonScalarWhereWithAggregatesInput | ContactPersonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactPerson"> | number
    serviceName?: StringWithAggregatesFilter<"ContactPerson"> | string
    district?: StringWithAggregatesFilter<"ContactPerson"> | string
    subDistrict?: StringWithAggregatesFilter<"ContactPerson"> | string
    block?: StringWithAggregatesFilter<"ContactPerson"> | string
    name?: StringWithAggregatesFilter<"ContactPerson"> | string
    designation?: StringWithAggregatesFilter<"ContactPerson"> | string
    contact?: StringWithAggregatesFilter<"ContactPerson"> | string
    email?: StringWithAggregatesFilter<"ContactPerson"> | string
    schemeServiceId?: IntWithAggregatesFilter<"ContactPerson"> | number
  }

  export type SupportiveDocumentWhereInput = {
    AND?: SupportiveDocumentWhereInput | SupportiveDocumentWhereInput[]
    OR?: SupportiveDocumentWhereInput[]
    NOT?: SupportiveDocumentWhereInput | SupportiveDocumentWhereInput[]
    id?: IntFilter<"SupportiveDocument"> | number
    slNo?: IntFilter<"SupportiveDocument"> | number
    documentType?: StringFilter<"SupportiveDocument"> | string
    validProof?: StringFilter<"SupportiveDocument"> | string
    isRequired?: BoolFilter<"SupportiveDocument"> | boolean
    schemeServiceId?: IntFilter<"SupportiveDocument"> | number
    schemeService?: XOR<SchemeServiceScalarRelationFilter, SchemeServiceWhereInput>
  }

  export type SupportiveDocumentOrderByWithRelationInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    schemeServiceId?: SortOrder
    schemeService?: SchemeServiceOrderByWithRelationInput
  }

  export type SupportiveDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SupportiveDocumentWhereInput | SupportiveDocumentWhereInput[]
    OR?: SupportiveDocumentWhereInput[]
    NOT?: SupportiveDocumentWhereInput | SupportiveDocumentWhereInput[]
    slNo?: IntFilter<"SupportiveDocument"> | number
    documentType?: StringFilter<"SupportiveDocument"> | string
    validProof?: StringFilter<"SupportiveDocument"> | string
    isRequired?: BoolFilter<"SupportiveDocument"> | boolean
    schemeServiceId?: IntFilter<"SupportiveDocument"> | number
    schemeService?: XOR<SchemeServiceScalarRelationFilter, SchemeServiceWhereInput>
  }, "id">

  export type SupportiveDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    schemeServiceId?: SortOrder
    _count?: SupportiveDocumentCountOrderByAggregateInput
    _avg?: SupportiveDocumentAvgOrderByAggregateInput
    _max?: SupportiveDocumentMaxOrderByAggregateInput
    _min?: SupportiveDocumentMinOrderByAggregateInput
    _sum?: SupportiveDocumentSumOrderByAggregateInput
  }

  export type SupportiveDocumentScalarWhereWithAggregatesInput = {
    AND?: SupportiveDocumentScalarWhereWithAggregatesInput | SupportiveDocumentScalarWhereWithAggregatesInput[]
    OR?: SupportiveDocumentScalarWhereWithAggregatesInput[]
    NOT?: SupportiveDocumentScalarWhereWithAggregatesInput | SupportiveDocumentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SupportiveDocument"> | number
    slNo?: IntWithAggregatesFilter<"SupportiveDocument"> | number
    documentType?: StringWithAggregatesFilter<"SupportiveDocument"> | string
    validProof?: StringWithAggregatesFilter<"SupportiveDocument"> | string
    isRequired?: BoolWithAggregatesFilter<"SupportiveDocument"> | boolean
    schemeServiceId?: IntWithAggregatesFilter<"SupportiveDocument"> | number
  }

  export type CertificateServiceWhereInput = {
    AND?: CertificateServiceWhereInput | CertificateServiceWhereInput[]
    OR?: CertificateServiceWhereInput[]
    NOT?: CertificateServiceWhereInput | CertificateServiceWhereInput[]
    id?: IntFilter<"CertificateService"> | number
    name?: StringFilter<"CertificateService"> | string
    summary?: StringFilter<"CertificateService"> | string
    type?: StringNullableFilter<"CertificateService"> | string | null
    targetAudience?: StringNullableListFilter<"CertificateService">
    applicationMode?: StringFilter<"CertificateService"> | string
    onlineUrl?: StringNullableFilter<"CertificateService"> | string | null
    offlineAddress?: StringNullableFilter<"CertificateService"> | string | null
    status?: StringFilter<"CertificateService"> | string
    isActive?: BoolFilter<"CertificateService"> | boolean
    createdAt?: DateTimeFilter<"CertificateService"> | Date | string
    updatedAt?: DateTimeFilter<"CertificateService"> | Date | string
    adminId?: IntFilter<"CertificateService"> | number
    eligibilityDetails?: StringNullableListFilter<"CertificateService">
    certificateDetails?: StringNullableListFilter<"CertificateService">
    processDetails?: StringNullableListFilter<"CertificateService">
    processNew?: StringNullableFilter<"CertificateService"> | string | null
    processUpdate?: StringNullableFilter<"CertificateService"> | string | null
    processLost?: StringNullableFilter<"CertificateService"> | string | null
    processSurrender?: StringNullableFilter<"CertificateService"> | string | null
    docNew?: StringNullableFilter<"CertificateService"> | string | null
    docUpdate?: StringNullableFilter<"CertificateService"> | string | null
    docLost?: StringNullableFilter<"CertificateService"> | string | null
    docSurrender?: StringNullableFilter<"CertificateService"> | string | null
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    contacts?: CertificateContactListRelationFilter
    documents?: CertificateDocumentListRelationFilter
    processSteps?: CertificateProcessStepListRelationFilter
    eligibilityItems?: CertificateEligibilityListRelationFilter
  }

  export type CertificateServiceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrderInput | SortOrder
    targetAudience?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrderInput | SortOrder
    offlineAddress?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    eligibilityDetails?: SortOrder
    certificateDetails?: SortOrder
    processDetails?: SortOrder
    processNew?: SortOrderInput | SortOrder
    processUpdate?: SortOrderInput | SortOrder
    processLost?: SortOrderInput | SortOrder
    processSurrender?: SortOrderInput | SortOrder
    docNew?: SortOrderInput | SortOrder
    docUpdate?: SortOrderInput | SortOrder
    docLost?: SortOrderInput | SortOrder
    docSurrender?: SortOrderInput | SortOrder
    admin?: AdminOrderByWithRelationInput
    contacts?: CertificateContactOrderByRelationAggregateInput
    documents?: CertificateDocumentOrderByRelationAggregateInput
    processSteps?: CertificateProcessStepOrderByRelationAggregateInput
    eligibilityItems?: CertificateEligibilityOrderByRelationAggregateInput
  }

  export type CertificateServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CertificateServiceWhereInput | CertificateServiceWhereInput[]
    OR?: CertificateServiceWhereInput[]
    NOT?: CertificateServiceWhereInput | CertificateServiceWhereInput[]
    name?: StringFilter<"CertificateService"> | string
    summary?: StringFilter<"CertificateService"> | string
    type?: StringNullableFilter<"CertificateService"> | string | null
    targetAudience?: StringNullableListFilter<"CertificateService">
    applicationMode?: StringFilter<"CertificateService"> | string
    onlineUrl?: StringNullableFilter<"CertificateService"> | string | null
    offlineAddress?: StringNullableFilter<"CertificateService"> | string | null
    status?: StringFilter<"CertificateService"> | string
    isActive?: BoolFilter<"CertificateService"> | boolean
    createdAt?: DateTimeFilter<"CertificateService"> | Date | string
    updatedAt?: DateTimeFilter<"CertificateService"> | Date | string
    adminId?: IntFilter<"CertificateService"> | number
    eligibilityDetails?: StringNullableListFilter<"CertificateService">
    certificateDetails?: StringNullableListFilter<"CertificateService">
    processDetails?: StringNullableListFilter<"CertificateService">
    processNew?: StringNullableFilter<"CertificateService"> | string | null
    processUpdate?: StringNullableFilter<"CertificateService"> | string | null
    processLost?: StringNullableFilter<"CertificateService"> | string | null
    processSurrender?: StringNullableFilter<"CertificateService"> | string | null
    docNew?: StringNullableFilter<"CertificateService"> | string | null
    docUpdate?: StringNullableFilter<"CertificateService"> | string | null
    docLost?: StringNullableFilter<"CertificateService"> | string | null
    docSurrender?: StringNullableFilter<"CertificateService"> | string | null
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    contacts?: CertificateContactListRelationFilter
    documents?: CertificateDocumentListRelationFilter
    processSteps?: CertificateProcessStepListRelationFilter
    eligibilityItems?: CertificateEligibilityListRelationFilter
  }, "id">

  export type CertificateServiceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrderInput | SortOrder
    targetAudience?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrderInput | SortOrder
    offlineAddress?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    eligibilityDetails?: SortOrder
    certificateDetails?: SortOrder
    processDetails?: SortOrder
    processNew?: SortOrderInput | SortOrder
    processUpdate?: SortOrderInput | SortOrder
    processLost?: SortOrderInput | SortOrder
    processSurrender?: SortOrderInput | SortOrder
    docNew?: SortOrderInput | SortOrder
    docUpdate?: SortOrderInput | SortOrder
    docLost?: SortOrderInput | SortOrder
    docSurrender?: SortOrderInput | SortOrder
    _count?: CertificateServiceCountOrderByAggregateInput
    _avg?: CertificateServiceAvgOrderByAggregateInput
    _max?: CertificateServiceMaxOrderByAggregateInput
    _min?: CertificateServiceMinOrderByAggregateInput
    _sum?: CertificateServiceSumOrderByAggregateInput
  }

  export type CertificateServiceScalarWhereWithAggregatesInput = {
    AND?: CertificateServiceScalarWhereWithAggregatesInput | CertificateServiceScalarWhereWithAggregatesInput[]
    OR?: CertificateServiceScalarWhereWithAggregatesInput[]
    NOT?: CertificateServiceScalarWhereWithAggregatesInput | CertificateServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CertificateService"> | number
    name?: StringWithAggregatesFilter<"CertificateService"> | string
    summary?: StringWithAggregatesFilter<"CertificateService"> | string
    type?: StringNullableWithAggregatesFilter<"CertificateService"> | string | null
    targetAudience?: StringNullableListFilter<"CertificateService">
    applicationMode?: StringWithAggregatesFilter<"CertificateService"> | string
    onlineUrl?: StringNullableWithAggregatesFilter<"CertificateService"> | string | null
    offlineAddress?: StringNullableWithAggregatesFilter<"CertificateService"> | string | null
    status?: StringWithAggregatesFilter<"CertificateService"> | string
    isActive?: BoolWithAggregatesFilter<"CertificateService"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CertificateService"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CertificateService"> | Date | string
    adminId?: IntWithAggregatesFilter<"CertificateService"> | number
    eligibilityDetails?: StringNullableListFilter<"CertificateService">
    certificateDetails?: StringNullableListFilter<"CertificateService">
    processDetails?: StringNullableListFilter<"CertificateService">
    processNew?: StringNullableWithAggregatesFilter<"CertificateService"> | string | null
    processUpdate?: StringNullableWithAggregatesFilter<"CertificateService"> | string | null
    processLost?: StringNullableWithAggregatesFilter<"CertificateService"> | string | null
    processSurrender?: StringNullableWithAggregatesFilter<"CertificateService"> | string | null
    docNew?: StringNullableWithAggregatesFilter<"CertificateService"> | string | null
    docUpdate?: StringNullableWithAggregatesFilter<"CertificateService"> | string | null
    docLost?: StringNullableWithAggregatesFilter<"CertificateService"> | string | null
    docSurrender?: StringNullableWithAggregatesFilter<"CertificateService"> | string | null
  }

  export type CertificateContactWhereInput = {
    AND?: CertificateContactWhereInput | CertificateContactWhereInput[]
    OR?: CertificateContactWhereInput[]
    NOT?: CertificateContactWhereInput | CertificateContactWhereInput[]
    id?: IntFilter<"CertificateContact"> | number
    serviceName?: StringFilter<"CertificateContact"> | string
    district?: StringFilter<"CertificateContact"> | string
    subDistrict?: StringFilter<"CertificateContact"> | string
    block?: StringFilter<"CertificateContact"> | string
    name?: StringFilter<"CertificateContact"> | string
    designation?: StringFilter<"CertificateContact"> | string
    contact?: StringFilter<"CertificateContact"> | string
    email?: StringFilter<"CertificateContact"> | string
    applicationType?: StringFilter<"CertificateContact"> | string
    certificateServiceId?: IntFilter<"CertificateContact"> | number
    certificateService?: XOR<CertificateServiceScalarRelationFilter, CertificateServiceWhereInput>
  }

  export type CertificateContactOrderByWithRelationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
    certificateService?: CertificateServiceOrderByWithRelationInput
  }

  export type CertificateContactWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CertificateContactWhereInput | CertificateContactWhereInput[]
    OR?: CertificateContactWhereInput[]
    NOT?: CertificateContactWhereInput | CertificateContactWhereInput[]
    serviceName?: StringFilter<"CertificateContact"> | string
    district?: StringFilter<"CertificateContact"> | string
    subDistrict?: StringFilter<"CertificateContact"> | string
    block?: StringFilter<"CertificateContact"> | string
    name?: StringFilter<"CertificateContact"> | string
    designation?: StringFilter<"CertificateContact"> | string
    contact?: StringFilter<"CertificateContact"> | string
    email?: StringFilter<"CertificateContact"> | string
    applicationType?: StringFilter<"CertificateContact"> | string
    certificateServiceId?: IntFilter<"CertificateContact"> | number
    certificateService?: XOR<CertificateServiceScalarRelationFilter, CertificateServiceWhereInput>
  }, "id">

  export type CertificateContactOrderByWithAggregationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
    _count?: CertificateContactCountOrderByAggregateInput
    _avg?: CertificateContactAvgOrderByAggregateInput
    _max?: CertificateContactMaxOrderByAggregateInput
    _min?: CertificateContactMinOrderByAggregateInput
    _sum?: CertificateContactSumOrderByAggregateInput
  }

  export type CertificateContactScalarWhereWithAggregatesInput = {
    AND?: CertificateContactScalarWhereWithAggregatesInput | CertificateContactScalarWhereWithAggregatesInput[]
    OR?: CertificateContactScalarWhereWithAggregatesInput[]
    NOT?: CertificateContactScalarWhereWithAggregatesInput | CertificateContactScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CertificateContact"> | number
    serviceName?: StringWithAggregatesFilter<"CertificateContact"> | string
    district?: StringWithAggregatesFilter<"CertificateContact"> | string
    subDistrict?: StringWithAggregatesFilter<"CertificateContact"> | string
    block?: StringWithAggregatesFilter<"CertificateContact"> | string
    name?: StringWithAggregatesFilter<"CertificateContact"> | string
    designation?: StringWithAggregatesFilter<"CertificateContact"> | string
    contact?: StringWithAggregatesFilter<"CertificateContact"> | string
    email?: StringWithAggregatesFilter<"CertificateContact"> | string
    applicationType?: StringWithAggregatesFilter<"CertificateContact"> | string
    certificateServiceId?: IntWithAggregatesFilter<"CertificateContact"> | number
  }

  export type CertificateDocumentWhereInput = {
    AND?: CertificateDocumentWhereInput | CertificateDocumentWhereInput[]
    OR?: CertificateDocumentWhereInput[]
    NOT?: CertificateDocumentWhereInput | CertificateDocumentWhereInput[]
    id?: IntFilter<"CertificateDocument"> | number
    slNo?: IntFilter<"CertificateDocument"> | number
    documentType?: StringFilter<"CertificateDocument"> | string
    validProof?: StringFilter<"CertificateDocument"> | string
    isRequired?: BoolFilter<"CertificateDocument"> | boolean
    applicationType?: StringFilter<"CertificateDocument"> | string
    certificateServiceId?: IntFilter<"CertificateDocument"> | number
    certificateService?: XOR<CertificateServiceScalarRelationFilter, CertificateServiceWhereInput>
  }

  export type CertificateDocumentOrderByWithRelationInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
    certificateService?: CertificateServiceOrderByWithRelationInput
  }

  export type CertificateDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CertificateDocumentWhereInput | CertificateDocumentWhereInput[]
    OR?: CertificateDocumentWhereInput[]
    NOT?: CertificateDocumentWhereInput | CertificateDocumentWhereInput[]
    slNo?: IntFilter<"CertificateDocument"> | number
    documentType?: StringFilter<"CertificateDocument"> | string
    validProof?: StringFilter<"CertificateDocument"> | string
    isRequired?: BoolFilter<"CertificateDocument"> | boolean
    applicationType?: StringFilter<"CertificateDocument"> | string
    certificateServiceId?: IntFilter<"CertificateDocument"> | number
    certificateService?: XOR<CertificateServiceScalarRelationFilter, CertificateServiceWhereInput>
  }, "id">

  export type CertificateDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
    _count?: CertificateDocumentCountOrderByAggregateInput
    _avg?: CertificateDocumentAvgOrderByAggregateInput
    _max?: CertificateDocumentMaxOrderByAggregateInput
    _min?: CertificateDocumentMinOrderByAggregateInput
    _sum?: CertificateDocumentSumOrderByAggregateInput
  }

  export type CertificateDocumentScalarWhereWithAggregatesInput = {
    AND?: CertificateDocumentScalarWhereWithAggregatesInput | CertificateDocumentScalarWhereWithAggregatesInput[]
    OR?: CertificateDocumentScalarWhereWithAggregatesInput[]
    NOT?: CertificateDocumentScalarWhereWithAggregatesInput | CertificateDocumentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CertificateDocument"> | number
    slNo?: IntWithAggregatesFilter<"CertificateDocument"> | number
    documentType?: StringWithAggregatesFilter<"CertificateDocument"> | string
    validProof?: StringWithAggregatesFilter<"CertificateDocument"> | string
    isRequired?: BoolWithAggregatesFilter<"CertificateDocument"> | boolean
    applicationType?: StringWithAggregatesFilter<"CertificateDocument"> | string
    certificateServiceId?: IntWithAggregatesFilter<"CertificateDocument"> | number
  }

  export type CertificateProcessStepWhereInput = {
    AND?: CertificateProcessStepWhereInput | CertificateProcessStepWhereInput[]
    OR?: CertificateProcessStepWhereInput[]
    NOT?: CertificateProcessStepWhereInput | CertificateProcessStepWhereInput[]
    id?: IntFilter<"CertificateProcessStep"> | number
    slNo?: IntFilter<"CertificateProcessStep"> | number
    stepDetails?: StringFilter<"CertificateProcessStep"> | string
    applicationType?: StringFilter<"CertificateProcessStep"> | string
    certificateServiceId?: IntFilter<"CertificateProcessStep"> | number
    certificateService?: XOR<CertificateServiceScalarRelationFilter, CertificateServiceWhereInput>
  }

  export type CertificateProcessStepOrderByWithRelationInput = {
    id?: SortOrder
    slNo?: SortOrder
    stepDetails?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
    certificateService?: CertificateServiceOrderByWithRelationInput
  }

  export type CertificateProcessStepWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CertificateProcessStepWhereInput | CertificateProcessStepWhereInput[]
    OR?: CertificateProcessStepWhereInput[]
    NOT?: CertificateProcessStepWhereInput | CertificateProcessStepWhereInput[]
    slNo?: IntFilter<"CertificateProcessStep"> | number
    stepDetails?: StringFilter<"CertificateProcessStep"> | string
    applicationType?: StringFilter<"CertificateProcessStep"> | string
    certificateServiceId?: IntFilter<"CertificateProcessStep"> | number
    certificateService?: XOR<CertificateServiceScalarRelationFilter, CertificateServiceWhereInput>
  }, "id">

  export type CertificateProcessStepOrderByWithAggregationInput = {
    id?: SortOrder
    slNo?: SortOrder
    stepDetails?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
    _count?: CertificateProcessStepCountOrderByAggregateInput
    _avg?: CertificateProcessStepAvgOrderByAggregateInput
    _max?: CertificateProcessStepMaxOrderByAggregateInput
    _min?: CertificateProcessStepMinOrderByAggregateInput
    _sum?: CertificateProcessStepSumOrderByAggregateInput
  }

  export type CertificateProcessStepScalarWhereWithAggregatesInput = {
    AND?: CertificateProcessStepScalarWhereWithAggregatesInput | CertificateProcessStepScalarWhereWithAggregatesInput[]
    OR?: CertificateProcessStepScalarWhereWithAggregatesInput[]
    NOT?: CertificateProcessStepScalarWhereWithAggregatesInput | CertificateProcessStepScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CertificateProcessStep"> | number
    slNo?: IntWithAggregatesFilter<"CertificateProcessStep"> | number
    stepDetails?: StringWithAggregatesFilter<"CertificateProcessStep"> | string
    applicationType?: StringWithAggregatesFilter<"CertificateProcessStep"> | string
    certificateServiceId?: IntWithAggregatesFilter<"CertificateProcessStep"> | number
  }

  export type CertificateEligibilityWhereInput = {
    AND?: CertificateEligibilityWhereInput | CertificateEligibilityWhereInput[]
    OR?: CertificateEligibilityWhereInput[]
    NOT?: CertificateEligibilityWhereInput | CertificateEligibilityWhereInput[]
    id?: IntFilter<"CertificateEligibility"> | number
    eligibilityDetail?: StringFilter<"CertificateEligibility"> | string
    applicationType?: StringFilter<"CertificateEligibility"> | string
    certificateServiceId?: IntFilter<"CertificateEligibility"> | number
    certificateService?: XOR<CertificateServiceScalarRelationFilter, CertificateServiceWhereInput>
  }

  export type CertificateEligibilityOrderByWithRelationInput = {
    id?: SortOrder
    eligibilityDetail?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
    certificateService?: CertificateServiceOrderByWithRelationInput
  }

  export type CertificateEligibilityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CertificateEligibilityWhereInput | CertificateEligibilityWhereInput[]
    OR?: CertificateEligibilityWhereInput[]
    NOT?: CertificateEligibilityWhereInput | CertificateEligibilityWhereInput[]
    eligibilityDetail?: StringFilter<"CertificateEligibility"> | string
    applicationType?: StringFilter<"CertificateEligibility"> | string
    certificateServiceId?: IntFilter<"CertificateEligibility"> | number
    certificateService?: XOR<CertificateServiceScalarRelationFilter, CertificateServiceWhereInput>
  }, "id">

  export type CertificateEligibilityOrderByWithAggregationInput = {
    id?: SortOrder
    eligibilityDetail?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
    _count?: CertificateEligibilityCountOrderByAggregateInput
    _avg?: CertificateEligibilityAvgOrderByAggregateInput
    _max?: CertificateEligibilityMaxOrderByAggregateInput
    _min?: CertificateEligibilityMinOrderByAggregateInput
    _sum?: CertificateEligibilitySumOrderByAggregateInput
  }

  export type CertificateEligibilityScalarWhereWithAggregatesInput = {
    AND?: CertificateEligibilityScalarWhereWithAggregatesInput | CertificateEligibilityScalarWhereWithAggregatesInput[]
    OR?: CertificateEligibilityScalarWhereWithAggregatesInput[]
    NOT?: CertificateEligibilityScalarWhereWithAggregatesInput | CertificateEligibilityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CertificateEligibility"> | number
    eligibilityDetail?: StringWithAggregatesFilter<"CertificateEligibility"> | string
    applicationType?: StringWithAggregatesFilter<"CertificateEligibility"> | string
    certificateServiceId?: IntWithAggregatesFilter<"CertificateEligibility"> | number
  }

  export type ContactServiceWhereInput = {
    AND?: ContactServiceWhereInput | ContactServiceWhereInput[]
    OR?: ContactServiceWhereInput[]
    NOT?: ContactServiceWhereInput | ContactServiceWhereInput[]
    id?: IntFilter<"ContactService"> | number
    name?: StringFilter<"ContactService"> | string
    summary?: StringFilter<"ContactService"> | string
    type?: StringNullableFilter<"ContactService"> | string | null
    targetAudience?: StringNullableListFilter<"ContactService">
    applicationMode?: StringFilter<"ContactService"> | string
    onlineUrl?: StringNullableFilter<"ContactService"> | string | null
    offlineAddress?: StringNullableFilter<"ContactService"> | string | null
    status?: StringFilter<"ContactService"> | string
    isActive?: BoolFilter<"ContactService"> | boolean
    createdAt?: DateTimeFilter<"ContactService"> | Date | string
    updatedAt?: DateTimeFilter<"ContactService"> | Date | string
    adminId?: IntFilter<"ContactService"> | number
    eligibilityDetails?: StringNullableListFilter<"ContactService">
    contactDetails?: StringNullableListFilter<"ContactService">
    processDetails?: StringNullableListFilter<"ContactService">
    processNew?: StringNullableFilter<"ContactService"> | string | null
    processUpdate?: StringNullableFilter<"ContactService"> | string | null
    processLost?: StringNullableFilter<"ContactService"> | string | null
    processSurrender?: StringNullableFilter<"ContactService"> | string | null
    docNew?: StringNullableFilter<"ContactService"> | string | null
    docUpdate?: StringNullableFilter<"ContactService"> | string | null
    docLost?: StringNullableFilter<"ContactService"> | string | null
    docSurrender?: StringNullableFilter<"ContactService"> | string | null
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    contacts?: ContactServiceContactListRelationFilter
    documents?: ContactServiceDocumentListRelationFilter
  }

  export type ContactServiceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrderInput | SortOrder
    targetAudience?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrderInput | SortOrder
    offlineAddress?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    eligibilityDetails?: SortOrder
    contactDetails?: SortOrder
    processDetails?: SortOrder
    processNew?: SortOrderInput | SortOrder
    processUpdate?: SortOrderInput | SortOrder
    processLost?: SortOrderInput | SortOrder
    processSurrender?: SortOrderInput | SortOrder
    docNew?: SortOrderInput | SortOrder
    docUpdate?: SortOrderInput | SortOrder
    docLost?: SortOrderInput | SortOrder
    docSurrender?: SortOrderInput | SortOrder
    admin?: AdminOrderByWithRelationInput
    contacts?: ContactServiceContactOrderByRelationAggregateInput
    documents?: ContactServiceDocumentOrderByRelationAggregateInput
  }

  export type ContactServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactServiceWhereInput | ContactServiceWhereInput[]
    OR?: ContactServiceWhereInput[]
    NOT?: ContactServiceWhereInput | ContactServiceWhereInput[]
    name?: StringFilter<"ContactService"> | string
    summary?: StringFilter<"ContactService"> | string
    type?: StringNullableFilter<"ContactService"> | string | null
    targetAudience?: StringNullableListFilter<"ContactService">
    applicationMode?: StringFilter<"ContactService"> | string
    onlineUrl?: StringNullableFilter<"ContactService"> | string | null
    offlineAddress?: StringNullableFilter<"ContactService"> | string | null
    status?: StringFilter<"ContactService"> | string
    isActive?: BoolFilter<"ContactService"> | boolean
    createdAt?: DateTimeFilter<"ContactService"> | Date | string
    updatedAt?: DateTimeFilter<"ContactService"> | Date | string
    adminId?: IntFilter<"ContactService"> | number
    eligibilityDetails?: StringNullableListFilter<"ContactService">
    contactDetails?: StringNullableListFilter<"ContactService">
    processDetails?: StringNullableListFilter<"ContactService">
    processNew?: StringNullableFilter<"ContactService"> | string | null
    processUpdate?: StringNullableFilter<"ContactService"> | string | null
    processLost?: StringNullableFilter<"ContactService"> | string | null
    processSurrender?: StringNullableFilter<"ContactService"> | string | null
    docNew?: StringNullableFilter<"ContactService"> | string | null
    docUpdate?: StringNullableFilter<"ContactService"> | string | null
    docLost?: StringNullableFilter<"ContactService"> | string | null
    docSurrender?: StringNullableFilter<"ContactService"> | string | null
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    contacts?: ContactServiceContactListRelationFilter
    documents?: ContactServiceDocumentListRelationFilter
  }, "id">

  export type ContactServiceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrderInput | SortOrder
    targetAudience?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrderInput | SortOrder
    offlineAddress?: SortOrderInput | SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    eligibilityDetails?: SortOrder
    contactDetails?: SortOrder
    processDetails?: SortOrder
    processNew?: SortOrderInput | SortOrder
    processUpdate?: SortOrderInput | SortOrder
    processLost?: SortOrderInput | SortOrder
    processSurrender?: SortOrderInput | SortOrder
    docNew?: SortOrderInput | SortOrder
    docUpdate?: SortOrderInput | SortOrder
    docLost?: SortOrderInput | SortOrder
    docSurrender?: SortOrderInput | SortOrder
    _count?: ContactServiceCountOrderByAggregateInput
    _avg?: ContactServiceAvgOrderByAggregateInput
    _max?: ContactServiceMaxOrderByAggregateInput
    _min?: ContactServiceMinOrderByAggregateInput
    _sum?: ContactServiceSumOrderByAggregateInput
  }

  export type ContactServiceScalarWhereWithAggregatesInput = {
    AND?: ContactServiceScalarWhereWithAggregatesInput | ContactServiceScalarWhereWithAggregatesInput[]
    OR?: ContactServiceScalarWhereWithAggregatesInput[]
    NOT?: ContactServiceScalarWhereWithAggregatesInput | ContactServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactService"> | number
    name?: StringWithAggregatesFilter<"ContactService"> | string
    summary?: StringWithAggregatesFilter<"ContactService"> | string
    type?: StringNullableWithAggregatesFilter<"ContactService"> | string | null
    targetAudience?: StringNullableListFilter<"ContactService">
    applicationMode?: StringWithAggregatesFilter<"ContactService"> | string
    onlineUrl?: StringNullableWithAggregatesFilter<"ContactService"> | string | null
    offlineAddress?: StringNullableWithAggregatesFilter<"ContactService"> | string | null
    status?: StringWithAggregatesFilter<"ContactService"> | string
    isActive?: BoolWithAggregatesFilter<"ContactService"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ContactService"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ContactService"> | Date | string
    adminId?: IntWithAggregatesFilter<"ContactService"> | number
    eligibilityDetails?: StringNullableListFilter<"ContactService">
    contactDetails?: StringNullableListFilter<"ContactService">
    processDetails?: StringNullableListFilter<"ContactService">
    processNew?: StringNullableWithAggregatesFilter<"ContactService"> | string | null
    processUpdate?: StringNullableWithAggregatesFilter<"ContactService"> | string | null
    processLost?: StringNullableWithAggregatesFilter<"ContactService"> | string | null
    processSurrender?: StringNullableWithAggregatesFilter<"ContactService"> | string | null
    docNew?: StringNullableWithAggregatesFilter<"ContactService"> | string | null
    docUpdate?: StringNullableWithAggregatesFilter<"ContactService"> | string | null
    docLost?: StringNullableWithAggregatesFilter<"ContactService"> | string | null
    docSurrender?: StringNullableWithAggregatesFilter<"ContactService"> | string | null
  }

  export type ContactServiceContactWhereInput = {
    AND?: ContactServiceContactWhereInput | ContactServiceContactWhereInput[]
    OR?: ContactServiceContactWhereInput[]
    NOT?: ContactServiceContactWhereInput | ContactServiceContactWhereInput[]
    id?: IntFilter<"ContactServiceContact"> | number
    serviceName?: StringFilter<"ContactServiceContact"> | string
    district?: StringFilter<"ContactServiceContact"> | string
    subDistrict?: StringFilter<"ContactServiceContact"> | string
    block?: StringFilter<"ContactServiceContact"> | string
    name?: StringFilter<"ContactServiceContact"> | string
    designation?: StringFilter<"ContactServiceContact"> | string
    contact?: StringFilter<"ContactServiceContact"> | string
    email?: StringFilter<"ContactServiceContact"> | string
    contactServiceId?: IntFilter<"ContactServiceContact"> | number
    contactService?: XOR<ContactServiceScalarRelationFilter, ContactServiceWhereInput>
    posts?: PostListRelationFilter
  }

  export type ContactServiceContactOrderByWithRelationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    contactServiceId?: SortOrder
    contactService?: ContactServiceOrderByWithRelationInput
    posts?: PostOrderByRelationAggregateInput
  }

  export type ContactServiceContactWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactServiceContactWhereInput | ContactServiceContactWhereInput[]
    OR?: ContactServiceContactWhereInput[]
    NOT?: ContactServiceContactWhereInput | ContactServiceContactWhereInput[]
    serviceName?: StringFilter<"ContactServiceContact"> | string
    district?: StringFilter<"ContactServiceContact"> | string
    subDistrict?: StringFilter<"ContactServiceContact"> | string
    block?: StringFilter<"ContactServiceContact"> | string
    name?: StringFilter<"ContactServiceContact"> | string
    designation?: StringFilter<"ContactServiceContact"> | string
    contact?: StringFilter<"ContactServiceContact"> | string
    email?: StringFilter<"ContactServiceContact"> | string
    contactServiceId?: IntFilter<"ContactServiceContact"> | number
    contactService?: XOR<ContactServiceScalarRelationFilter, ContactServiceWhereInput>
    posts?: PostListRelationFilter
  }, "id">

  export type ContactServiceContactOrderByWithAggregationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    contactServiceId?: SortOrder
    _count?: ContactServiceContactCountOrderByAggregateInput
    _avg?: ContactServiceContactAvgOrderByAggregateInput
    _max?: ContactServiceContactMaxOrderByAggregateInput
    _min?: ContactServiceContactMinOrderByAggregateInput
    _sum?: ContactServiceContactSumOrderByAggregateInput
  }

  export type ContactServiceContactScalarWhereWithAggregatesInput = {
    AND?: ContactServiceContactScalarWhereWithAggregatesInput | ContactServiceContactScalarWhereWithAggregatesInput[]
    OR?: ContactServiceContactScalarWhereWithAggregatesInput[]
    NOT?: ContactServiceContactScalarWhereWithAggregatesInput | ContactServiceContactScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactServiceContact"> | number
    serviceName?: StringWithAggregatesFilter<"ContactServiceContact"> | string
    district?: StringWithAggregatesFilter<"ContactServiceContact"> | string
    subDistrict?: StringWithAggregatesFilter<"ContactServiceContact"> | string
    block?: StringWithAggregatesFilter<"ContactServiceContact"> | string
    name?: StringWithAggregatesFilter<"ContactServiceContact"> | string
    designation?: StringWithAggregatesFilter<"ContactServiceContact"> | string
    contact?: StringWithAggregatesFilter<"ContactServiceContact"> | string
    email?: StringWithAggregatesFilter<"ContactServiceContact"> | string
    contactServiceId?: IntWithAggregatesFilter<"ContactServiceContact"> | number
  }

  export type ContactServiceDocumentWhereInput = {
    AND?: ContactServiceDocumentWhereInput | ContactServiceDocumentWhereInput[]
    OR?: ContactServiceDocumentWhereInput[]
    NOT?: ContactServiceDocumentWhereInput | ContactServiceDocumentWhereInput[]
    id?: IntFilter<"ContactServiceDocument"> | number
    slNo?: IntFilter<"ContactServiceDocument"> | number
    documentType?: StringFilter<"ContactServiceDocument"> | string
    validProof?: StringFilter<"ContactServiceDocument"> | string
    isRequired?: BoolFilter<"ContactServiceDocument"> | boolean
    contactServiceId?: IntFilter<"ContactServiceDocument"> | number
    contactService?: XOR<ContactServiceScalarRelationFilter, ContactServiceWhereInput>
  }

  export type ContactServiceDocumentOrderByWithRelationInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    contactServiceId?: SortOrder
    contactService?: ContactServiceOrderByWithRelationInput
  }

  export type ContactServiceDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactServiceDocumentWhereInput | ContactServiceDocumentWhereInput[]
    OR?: ContactServiceDocumentWhereInput[]
    NOT?: ContactServiceDocumentWhereInput | ContactServiceDocumentWhereInput[]
    slNo?: IntFilter<"ContactServiceDocument"> | number
    documentType?: StringFilter<"ContactServiceDocument"> | string
    validProof?: StringFilter<"ContactServiceDocument"> | string
    isRequired?: BoolFilter<"ContactServiceDocument"> | boolean
    contactServiceId?: IntFilter<"ContactServiceDocument"> | number
    contactService?: XOR<ContactServiceScalarRelationFilter, ContactServiceWhereInput>
  }, "id">

  export type ContactServiceDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    contactServiceId?: SortOrder
    _count?: ContactServiceDocumentCountOrderByAggregateInput
    _avg?: ContactServiceDocumentAvgOrderByAggregateInput
    _max?: ContactServiceDocumentMaxOrderByAggregateInput
    _min?: ContactServiceDocumentMinOrderByAggregateInput
    _sum?: ContactServiceDocumentSumOrderByAggregateInput
  }

  export type ContactServiceDocumentScalarWhereWithAggregatesInput = {
    AND?: ContactServiceDocumentScalarWhereWithAggregatesInput | ContactServiceDocumentScalarWhereWithAggregatesInput[]
    OR?: ContactServiceDocumentScalarWhereWithAggregatesInput[]
    NOT?: ContactServiceDocumentScalarWhereWithAggregatesInput | ContactServiceDocumentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactServiceDocument"> | number
    slNo?: IntWithAggregatesFilter<"ContactServiceDocument"> | number
    documentType?: StringWithAggregatesFilter<"ContactServiceDocument"> | string
    validProof?: StringWithAggregatesFilter<"ContactServiceDocument"> | string
    isRequired?: BoolWithAggregatesFilter<"ContactServiceDocument"> | boolean
    contactServiceId?: IntWithAggregatesFilter<"ContactServiceDocument"> | number
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: IntFilter<"Post"> | number
    postName?: StringFilter<"Post"> | string
    rank?: StringFilter<"Post"> | string
    description?: StringNullableFilter<"Post"> | string | null
    department?: StringNullableFilter<"Post"> | string | null
    status?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    officeId?: IntFilter<"Post"> | number
    office?: XOR<ContactServiceContactScalarRelationFilter, ContactServiceContactWhereInput>
    employees?: EmployeeListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    postName?: SortOrder
    rank?: SortOrder
    description?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    officeId?: SortOrder
    office?: ContactServiceContactOrderByWithRelationInput
    employees?: EmployeeOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    postName?: StringFilter<"Post"> | string
    rank?: StringFilter<"Post"> | string
    description?: StringNullableFilter<"Post"> | string | null
    department?: StringNullableFilter<"Post"> | string | null
    status?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    officeId?: IntFilter<"Post"> | number
    office?: XOR<ContactServiceContactScalarRelationFilter, ContactServiceContactWhereInput>
    employees?: EmployeeListRelationFilter
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    postName?: SortOrder
    rank?: SortOrder
    description?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    officeId?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Post"> | number
    postName?: StringWithAggregatesFilter<"Post"> | string
    rank?: StringWithAggregatesFilter<"Post"> | string
    description?: StringNullableWithAggregatesFilter<"Post"> | string | null
    department?: StringNullableWithAggregatesFilter<"Post"> | string | null
    status?: StringWithAggregatesFilter<"Post"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    officeId?: IntWithAggregatesFilter<"Post"> | number
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: IntFilter<"Employee"> | number
    name?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    phone?: StringFilter<"Employee"> | string
    designation?: StringFilter<"Employee"> | string
    employeeId?: StringNullableFilter<"Employee"> | string | null
    joiningDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    salary?: FloatNullableFilter<"Employee"> | number | null
    status?: StringFilter<"Employee"> | string
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    postId?: IntFilter<"Employee"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    designation?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    joiningDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    postId?: SortOrder
    post?: PostOrderByWithRelationInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    name?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    phone?: StringFilter<"Employee"> | string
    designation?: StringFilter<"Employee"> | string
    employeeId?: StringNullableFilter<"Employee"> | string | null
    joiningDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    salary?: FloatNullableFilter<"Employee"> | number | null
    status?: StringFilter<"Employee"> | string
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    postId?: IntFilter<"Employee"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "id">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    designation?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    joiningDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    postId?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Employee"> | number
    name?: StringWithAggregatesFilter<"Employee"> | string
    email?: StringWithAggregatesFilter<"Employee"> | string
    phone?: StringWithAggregatesFilter<"Employee"> | string
    designation?: StringWithAggregatesFilter<"Employee"> | string
    employeeId?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    joiningDate?: DateTimeNullableWithAggregatesFilter<"Employee"> | Date | string | null
    salary?: FloatNullableWithAggregatesFilter<"Employee"> | number | null
    status?: StringWithAggregatesFilter<"Employee"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    postId?: IntWithAggregatesFilter<"Employee"> | number
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: IntFilter<"Feedback"> | number
    name?: StringFilter<"Feedback"> | string
    email?: StringFilter<"Feedback"> | string
    phone?: StringNullableFilter<"Feedback"> | string | null
    subject?: StringFilter<"Feedback"> | string
    message?: StringFilter<"Feedback"> | string
    rating?: IntNullableFilter<"Feedback"> | number | null
    category?: StringNullableFilter<"Feedback"> | string | null
    status?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeFilter<"Feedback"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Feedback"> | Date | string | null
    resolvedBy?: StringNullableFilter<"Feedback"> | string | null
    adminNotes?: StringNullableFilter<"Feedback"> | string | null
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    subject?: SortOrder
    message?: SortOrder
    rating?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolvedBy?: SortOrderInput | SortOrder
    adminNotes?: SortOrderInput | SortOrder
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    name?: StringFilter<"Feedback"> | string
    email?: StringFilter<"Feedback"> | string
    phone?: StringNullableFilter<"Feedback"> | string | null
    subject?: StringFilter<"Feedback"> | string
    message?: StringFilter<"Feedback"> | string
    rating?: IntNullableFilter<"Feedback"> | number | null
    category?: StringNullableFilter<"Feedback"> | string | null
    status?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeFilter<"Feedback"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Feedback"> | Date | string | null
    resolvedBy?: StringNullableFilter<"Feedback"> | string | null
    adminNotes?: StringNullableFilter<"Feedback"> | string | null
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    subject?: SortOrder
    message?: SortOrder
    rating?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolvedBy?: SortOrderInput | SortOrder
    adminNotes?: SortOrderInput | SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Feedback"> | number
    name?: StringWithAggregatesFilter<"Feedback"> | string
    email?: StringWithAggregatesFilter<"Feedback"> | string
    phone?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    subject?: StringWithAggregatesFilter<"Feedback"> | string
    message?: StringWithAggregatesFilter<"Feedback"> | string
    rating?: IntNullableWithAggregatesFilter<"Feedback"> | number | null
    category?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    status?: StringWithAggregatesFilter<"Feedback"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Feedback"> | Date | string | null
    resolvedBy?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    adminNotes?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
  }

  export type GrievanceWhereInput = {
    AND?: GrievanceWhereInput | GrievanceWhereInput[]
    OR?: GrievanceWhereInput[]
    NOT?: GrievanceWhereInput | GrievanceWhereInput[]
    id?: IntFilter<"Grievance"> | number
    name?: StringFilter<"Grievance"> | string
    email?: StringFilter<"Grievance"> | string
    phone?: StringFilter<"Grievance"> | string
    address?: StringFilter<"Grievance"> | string
    subject?: StringFilter<"Grievance"> | string
    description?: StringFilter<"Grievance"> | string
    category?: StringNullableFilter<"Grievance"> | string | null
    priority?: StringFilter<"Grievance"> | string
    status?: StringFilter<"Grievance"> | string
    attachments?: StringNullableListFilter<"Grievance">
    createdAt?: DateTimeFilter<"Grievance"> | Date | string
    updatedAt?: DateTimeFilter<"Grievance"> | Date | string
    assignedTo?: StringNullableFilter<"Grievance"> | string | null
    adminNotes?: StringNullableFilter<"Grievance"> | string | null
    resolvedAt?: DateTimeNullableFilter<"Grievance"> | Date | string | null
    trackingId?: StringFilter<"Grievance"> | string
  }

  export type GrievanceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    category?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assignedTo?: SortOrderInput | SortOrder
    adminNotes?: SortOrderInput | SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    trackingId?: SortOrder
  }

  export type GrievanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    trackingId?: string
    AND?: GrievanceWhereInput | GrievanceWhereInput[]
    OR?: GrievanceWhereInput[]
    NOT?: GrievanceWhereInput | GrievanceWhereInput[]
    name?: StringFilter<"Grievance"> | string
    email?: StringFilter<"Grievance"> | string
    phone?: StringFilter<"Grievance"> | string
    address?: StringFilter<"Grievance"> | string
    subject?: StringFilter<"Grievance"> | string
    description?: StringFilter<"Grievance"> | string
    category?: StringNullableFilter<"Grievance"> | string | null
    priority?: StringFilter<"Grievance"> | string
    status?: StringFilter<"Grievance"> | string
    attachments?: StringNullableListFilter<"Grievance">
    createdAt?: DateTimeFilter<"Grievance"> | Date | string
    updatedAt?: DateTimeFilter<"Grievance"> | Date | string
    assignedTo?: StringNullableFilter<"Grievance"> | string | null
    adminNotes?: StringNullableFilter<"Grievance"> | string | null
    resolvedAt?: DateTimeNullableFilter<"Grievance"> | Date | string | null
  }, "id" | "trackingId">

  export type GrievanceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    category?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assignedTo?: SortOrderInput | SortOrder
    adminNotes?: SortOrderInput | SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    trackingId?: SortOrder
    _count?: GrievanceCountOrderByAggregateInput
    _avg?: GrievanceAvgOrderByAggregateInput
    _max?: GrievanceMaxOrderByAggregateInput
    _min?: GrievanceMinOrderByAggregateInput
    _sum?: GrievanceSumOrderByAggregateInput
  }

  export type GrievanceScalarWhereWithAggregatesInput = {
    AND?: GrievanceScalarWhereWithAggregatesInput | GrievanceScalarWhereWithAggregatesInput[]
    OR?: GrievanceScalarWhereWithAggregatesInput[]
    NOT?: GrievanceScalarWhereWithAggregatesInput | GrievanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Grievance"> | number
    name?: StringWithAggregatesFilter<"Grievance"> | string
    email?: StringWithAggregatesFilter<"Grievance"> | string
    phone?: StringWithAggregatesFilter<"Grievance"> | string
    address?: StringWithAggregatesFilter<"Grievance"> | string
    subject?: StringWithAggregatesFilter<"Grievance"> | string
    description?: StringWithAggregatesFilter<"Grievance"> | string
    category?: StringNullableWithAggregatesFilter<"Grievance"> | string | null
    priority?: StringWithAggregatesFilter<"Grievance"> | string
    status?: StringWithAggregatesFilter<"Grievance"> | string
    attachments?: StringNullableListFilter<"Grievance">
    createdAt?: DateTimeWithAggregatesFilter<"Grievance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Grievance"> | Date | string
    assignedTo?: StringNullableWithAggregatesFilter<"Grievance"> | string | null
    adminNotes?: StringNullableWithAggregatesFilter<"Grievance"> | string | null
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Grievance"> | Date | string | null
    trackingId?: StringWithAggregatesFilter<"Grievance"> | string
  }

  export type AdminCreateInput = {
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    schemeServices?: SchemeServiceCreateNestedManyWithoutAdminInput
    certificateServices?: CertificateServiceCreateNestedManyWithoutAdminInput
    contactServices?: ContactServiceCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    schemeServices?: SchemeServiceUncheckedCreateNestedManyWithoutAdminInput
    certificateServices?: CertificateServiceUncheckedCreateNestedManyWithoutAdminInput
    contactServices?: ContactServiceUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemeServices?: SchemeServiceUpdateManyWithoutAdminNestedInput
    certificateServices?: CertificateServiceUpdateManyWithoutAdminNestedInput
    contactServices?: ContactServiceUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemeServices?: SchemeServiceUncheckedUpdateManyWithoutAdminNestedInput
    certificateServices?: CertificateServiceUncheckedUpdateManyWithoutAdminNestedInput
    contactServices?: ContactServiceUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AdminCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchemeServiceCreateInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: SchemeServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: SchemeServiceCreateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceCreateschemeDetailsInput | string[]
    processDetails?: SchemeServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    admin: AdminCreateNestedOneWithoutSchemeServicesInput
    contacts?: ContactPersonCreateNestedManyWithoutSchemeServiceInput
    documents?: SupportiveDocumentCreateNestedManyWithoutSchemeServiceInput
  }

  export type SchemeServiceUncheckedCreateInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: SchemeServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: SchemeServiceCreateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceCreateschemeDetailsInput | string[]
    processDetails?: SchemeServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: ContactPersonUncheckedCreateNestedManyWithoutSchemeServiceInput
    documents?: SupportiveDocumentUncheckedCreateNestedManyWithoutSchemeServiceInput
  }

  export type SchemeServiceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: SchemeServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: SchemeServiceUpdateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceUpdateschemeDetailsInput | string[]
    processDetails?: SchemeServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneRequiredWithoutSchemeServicesNestedInput
    contacts?: ContactPersonUpdateManyWithoutSchemeServiceNestedInput
    documents?: SupportiveDocumentUpdateManyWithoutSchemeServiceNestedInput
  }

  export type SchemeServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: SchemeServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: SchemeServiceUpdateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceUpdateschemeDetailsInput | string[]
    processDetails?: SchemeServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactPersonUncheckedUpdateManyWithoutSchemeServiceNestedInput
    documents?: SupportiveDocumentUncheckedUpdateManyWithoutSchemeServiceNestedInput
  }

  export type SchemeServiceCreateManyInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: SchemeServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: SchemeServiceCreateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceCreateschemeDetailsInput | string[]
    processDetails?: SchemeServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
  }

  export type SchemeServiceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: SchemeServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: SchemeServiceUpdateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceUpdateschemeDetailsInput | string[]
    processDetails?: SchemeServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SchemeServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: SchemeServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: SchemeServiceUpdateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceUpdateschemeDetailsInput | string[]
    processDetails?: SchemeServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactPersonCreateInput = {
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    schemeService: SchemeServiceCreateNestedOneWithoutContactsInput
  }

  export type ContactPersonUncheckedCreateInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    schemeServiceId: number
  }

  export type ContactPersonUpdateInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    schemeService?: SchemeServiceUpdateOneRequiredWithoutContactsNestedInput
  }

  export type ContactPersonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    schemeServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type ContactPersonCreateManyInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    schemeServiceId: number
  }

  export type ContactPersonUpdateManyMutationInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ContactPersonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    schemeServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type SupportiveDocumentCreateInput = {
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    schemeService: SchemeServiceCreateNestedOneWithoutDocumentsInput
  }

  export type SupportiveDocumentUncheckedCreateInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    schemeServiceId: number
  }

  export type SupportiveDocumentUpdateInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    schemeService?: SchemeServiceUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type SupportiveDocumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    schemeServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type SupportiveDocumentCreateManyInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    schemeServiceId: number
  }

  export type SupportiveDocumentUpdateManyMutationInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SupportiveDocumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    schemeServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type CertificateServiceCreateInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    admin: AdminCreateNestedOneWithoutCertificateServicesInput
    contacts?: CertificateContactCreateNestedManyWithoutCertificateServiceInput
    documents?: CertificateDocumentCreateNestedManyWithoutCertificateServiceInput
    processSteps?: CertificateProcessStepCreateNestedManyWithoutCertificateServiceInput
    eligibilityItems?: CertificateEligibilityCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceUncheckedCreateInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: CertificateContactUncheckedCreateNestedManyWithoutCertificateServiceInput
    documents?: CertificateDocumentUncheckedCreateNestedManyWithoutCertificateServiceInput
    processSteps?: CertificateProcessStepUncheckedCreateNestedManyWithoutCertificateServiceInput
    eligibilityItems?: CertificateEligibilityUncheckedCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneRequiredWithoutCertificateServicesNestedInput
    contacts?: CertificateContactUpdateManyWithoutCertificateServiceNestedInput
    documents?: CertificateDocumentUpdateManyWithoutCertificateServiceNestedInput
    processSteps?: CertificateProcessStepUpdateManyWithoutCertificateServiceNestedInput
    eligibilityItems?: CertificateEligibilityUpdateManyWithoutCertificateServiceNestedInput
  }

  export type CertificateServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: CertificateContactUncheckedUpdateManyWithoutCertificateServiceNestedInput
    documents?: CertificateDocumentUncheckedUpdateManyWithoutCertificateServiceNestedInput
    processSteps?: CertificateProcessStepUncheckedUpdateManyWithoutCertificateServiceNestedInput
    eligibilityItems?: CertificateEligibilityUncheckedUpdateManyWithoutCertificateServiceNestedInput
  }

  export type CertificateServiceCreateManyInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
  }

  export type CertificateServiceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CertificateServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CertificateContactCreateInput = {
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    applicationType?: string
    certificateService: CertificateServiceCreateNestedOneWithoutContactsInput
  }

  export type CertificateContactUncheckedCreateInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    applicationType?: string
    certificateServiceId: number
  }

  export type CertificateContactUpdateInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateService?: CertificateServiceUpdateOneRequiredWithoutContactsNestedInput
  }

  export type CertificateContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type CertificateContactCreateManyInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    applicationType?: string
    certificateServiceId: number
  }

  export type CertificateContactUpdateManyMutationInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type CertificateDocumentCreateInput = {
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    applicationType?: string
    certificateService: CertificateServiceCreateNestedOneWithoutDocumentsInput
  }

  export type CertificateDocumentUncheckedCreateInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    applicationType?: string
    certificateServiceId: number
  }

  export type CertificateDocumentUpdateInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateService?: CertificateServiceUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type CertificateDocumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type CertificateDocumentCreateManyInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    applicationType?: string
    certificateServiceId: number
  }

  export type CertificateDocumentUpdateManyMutationInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateDocumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type CertificateProcessStepCreateInput = {
    slNo: number
    stepDetails: string
    applicationType?: string
    certificateService: CertificateServiceCreateNestedOneWithoutProcessStepsInput
  }

  export type CertificateProcessStepUncheckedCreateInput = {
    id?: number
    slNo: number
    stepDetails: string
    applicationType?: string
    certificateServiceId: number
  }

  export type CertificateProcessStepUpdateInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    stepDetails?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateService?: CertificateServiceUpdateOneRequiredWithoutProcessStepsNestedInput
  }

  export type CertificateProcessStepUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    stepDetails?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type CertificateProcessStepCreateManyInput = {
    id?: number
    slNo: number
    stepDetails: string
    applicationType?: string
    certificateServiceId: number
  }

  export type CertificateProcessStepUpdateManyMutationInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    stepDetails?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateProcessStepUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    stepDetails?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type CertificateEligibilityCreateInput = {
    eligibilityDetail: string
    applicationType?: string
    certificateService: CertificateServiceCreateNestedOneWithoutEligibilityItemsInput
  }

  export type CertificateEligibilityUncheckedCreateInput = {
    id?: number
    eligibilityDetail: string
    applicationType?: string
    certificateServiceId: number
  }

  export type CertificateEligibilityUpdateInput = {
    eligibilityDetail?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateService?: CertificateServiceUpdateOneRequiredWithoutEligibilityItemsNestedInput
  }

  export type CertificateEligibilityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    eligibilityDetail?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type CertificateEligibilityCreateManyInput = {
    id?: number
    eligibilityDetail: string
    applicationType?: string
    certificateServiceId: number
  }

  export type CertificateEligibilityUpdateManyMutationInput = {
    eligibilityDetail?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateEligibilityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    eligibilityDetail?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
    certificateServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type ContactServiceCreateInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: ContactServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: ContactServiceCreateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceCreatecontactDetailsInput | string[]
    processDetails?: ContactServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    admin: AdminCreateNestedOneWithoutContactServicesInput
    contacts?: ContactServiceContactCreateNestedManyWithoutContactServiceInput
    documents?: ContactServiceDocumentCreateNestedManyWithoutContactServiceInput
  }

  export type ContactServiceUncheckedCreateInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: ContactServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: ContactServiceCreateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceCreatecontactDetailsInput | string[]
    processDetails?: ContactServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: ContactServiceContactUncheckedCreateNestedManyWithoutContactServiceInput
    documents?: ContactServiceDocumentUncheckedCreateNestedManyWithoutContactServiceInput
  }

  export type ContactServiceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: ContactServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: ContactServiceUpdateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceUpdatecontactDetailsInput | string[]
    processDetails?: ContactServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneRequiredWithoutContactServicesNestedInput
    contacts?: ContactServiceContactUpdateManyWithoutContactServiceNestedInput
    documents?: ContactServiceDocumentUpdateManyWithoutContactServiceNestedInput
  }

  export type ContactServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: ContactServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: ContactServiceUpdateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceUpdatecontactDetailsInput | string[]
    processDetails?: ContactServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactServiceContactUncheckedUpdateManyWithoutContactServiceNestedInput
    documents?: ContactServiceDocumentUncheckedUpdateManyWithoutContactServiceNestedInput
  }

  export type ContactServiceCreateManyInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: ContactServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: ContactServiceCreateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceCreatecontactDetailsInput | string[]
    processDetails?: ContactServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
  }

  export type ContactServiceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: ContactServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: ContactServiceUpdateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceUpdatecontactDetailsInput | string[]
    processDetails?: ContactServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: ContactServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: ContactServiceUpdateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceUpdatecontactDetailsInput | string[]
    processDetails?: ContactServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactServiceContactCreateInput = {
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    contactService: ContactServiceCreateNestedOneWithoutContactsInput
    posts?: PostCreateNestedManyWithoutOfficeInput
  }

  export type ContactServiceContactUncheckedCreateInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    contactServiceId: number
    posts?: PostUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type ContactServiceContactUpdateInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contactService?: ContactServiceUpdateOneRequiredWithoutContactsNestedInput
    posts?: PostUpdateManyWithoutOfficeNestedInput
  }

  export type ContactServiceContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contactServiceId?: IntFieldUpdateOperationsInput | number
    posts?: PostUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type ContactServiceContactCreateManyInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    contactServiceId: number
  }

  export type ContactServiceContactUpdateManyMutationInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ContactServiceContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contactServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type ContactServiceDocumentCreateInput = {
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    contactService: ContactServiceCreateNestedOneWithoutDocumentsInput
  }

  export type ContactServiceDocumentUncheckedCreateInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    contactServiceId: number
  }

  export type ContactServiceDocumentUpdateInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    contactService?: ContactServiceUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type ContactServiceDocumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    contactServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type ContactServiceDocumentCreateManyInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    contactServiceId: number
  }

  export type ContactServiceDocumentUpdateManyMutationInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactServiceDocumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    contactServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateInput = {
    postName: string
    rank: string
    description?: string | null
    department?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    office: ContactServiceContactCreateNestedOneWithoutPostsInput
    employees?: EmployeeCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    postName: string
    rank: string
    description?: string | null
    department?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    officeId: number
    employees?: EmployeeUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    postName?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    office?: ContactServiceContactUpdateOneRequiredWithoutPostsNestedInput
    employees?: EmployeeUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postName?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    officeId?: IntFieldUpdateOperationsInput | number
    employees?: EmployeeUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: number
    postName: string
    rank: string
    description?: string | null
    department?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    officeId: number
  }

  export type PostUpdateManyMutationInput = {
    postName?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postName?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    officeId?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeCreateInput = {
    name: string
    email: string
    phone: string
    designation: string
    employeeId?: string | null
    joiningDate?: Date | string | null
    salary?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    post: PostCreateNestedOneWithoutEmployeesInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone: string
    designation: string
    employeeId?: string | null
    joiningDate?: Date | string | null
    salary?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId: number
  }

  export type EmployeeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    joiningDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutEmployeesNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    joiningDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeCreateManyInput = {
    id?: number
    name: string
    email: string
    phone: string
    designation: string
    employeeId?: string | null
    joiningDate?: Date | string | null
    salary?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId: number
  }

  export type EmployeeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    joiningDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    joiningDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackCreateInput = {
    name: string
    email: string
    phone?: string | null
    subject: string
    message: string
    rating?: number | null
    category?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    resolvedBy?: string | null
    adminNotes?: string | null
  }

  export type FeedbackUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    subject: string
    message: string
    rating?: number | null
    category?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    resolvedBy?: string | null
    adminNotes?: string | null
  }

  export type FeedbackUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackCreateManyInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    subject: string
    message: string
    rating?: number | null
    category?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    resolvedBy?: string | null
    adminNotes?: string | null
  }

  export type FeedbackUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GrievanceCreateInput = {
    name: string
    email: string
    phone: string
    address: string
    subject: string
    description: string
    category?: string | null
    priority?: string
    status?: string
    attachments?: GrievanceCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: string | null
    adminNotes?: string | null
    resolvedAt?: Date | string | null
    trackingId: string
  }

  export type GrievanceUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone: string
    address: string
    subject: string
    description: string
    category?: string | null
    priority?: string
    status?: string
    attachments?: GrievanceCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: string | null
    adminNotes?: string | null
    resolvedAt?: Date | string | null
    trackingId: string
  }

  export type GrievanceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    attachments?: GrievanceUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trackingId?: StringFieldUpdateOperationsInput | string
  }

  export type GrievanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    attachments?: GrievanceUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trackingId?: StringFieldUpdateOperationsInput | string
  }

  export type GrievanceCreateManyInput = {
    id?: number
    name: string
    email: string
    phone: string
    address: string
    subject: string
    description: string
    category?: string | null
    priority?: string
    status?: string
    attachments?: GrievanceCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: string | null
    adminNotes?: string | null
    resolvedAt?: Date | string | null
    trackingId: string
  }

  export type GrievanceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    attachments?: GrievanceUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trackingId?: StringFieldUpdateOperationsInput | string
  }

  export type GrievanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    attachments?: GrievanceUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trackingId?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SchemeServiceListRelationFilter = {
    every?: SchemeServiceWhereInput
    some?: SchemeServiceWhereInput
    none?: SchemeServiceWhereInput
  }

  export type CertificateServiceListRelationFilter = {
    every?: CertificateServiceWhereInput
    some?: CertificateServiceWhereInput
    none?: CertificateServiceWhereInput
  }

  export type ContactServiceListRelationFilter = {
    every?: ContactServiceWhereInput
    some?: ContactServiceWhereInput
    none?: ContactServiceWhereInput
  }

  export type SchemeServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CertificateServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AdminScalarRelationFilter = {
    is?: AdminWhereInput
    isNot?: AdminWhereInput
  }

  export type ContactPersonListRelationFilter = {
    every?: ContactPersonWhereInput
    some?: ContactPersonWhereInput
    none?: ContactPersonWhereInput
  }

  export type SupportiveDocumentListRelationFilter = {
    every?: SupportiveDocumentWhereInput
    some?: SupportiveDocumentWhereInput
    none?: SupportiveDocumentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ContactPersonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SupportiveDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchemeServiceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrder
    targetAudience?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrder
    offlineAddress?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    eligibilityDetails?: SortOrder
    schemeDetails?: SortOrder
    processDetails?: SortOrder
    processNew?: SortOrder
    processUpdate?: SortOrder
    processLost?: SortOrder
    processSurrender?: SortOrder
    docNew?: SortOrder
    docUpdate?: SortOrder
    docLost?: SortOrder
    docSurrender?: SortOrder
  }

  export type SchemeServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
  }

  export type SchemeServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrder
    offlineAddress?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    processNew?: SortOrder
    processUpdate?: SortOrder
    processLost?: SortOrder
    processSurrender?: SortOrder
    docNew?: SortOrder
    docUpdate?: SortOrder
    docLost?: SortOrder
    docSurrender?: SortOrder
  }

  export type SchemeServiceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrder
    offlineAddress?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    processNew?: SortOrder
    processUpdate?: SortOrder
    processLost?: SortOrder
    processSurrender?: SortOrder
    docNew?: SortOrder
    docUpdate?: SortOrder
    docLost?: SortOrder
    docSurrender?: SortOrder
  }

  export type SchemeServiceSumOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type SchemeServiceScalarRelationFilter = {
    is?: SchemeServiceWhereInput
    isNot?: SchemeServiceWhereInput
  }

  export type ContactPersonCountOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    schemeServiceId?: SortOrder
  }

  export type ContactPersonAvgOrderByAggregateInput = {
    id?: SortOrder
    schemeServiceId?: SortOrder
  }

  export type ContactPersonMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    schemeServiceId?: SortOrder
  }

  export type ContactPersonMinOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    schemeServiceId?: SortOrder
  }

  export type ContactPersonSumOrderByAggregateInput = {
    id?: SortOrder
    schemeServiceId?: SortOrder
  }

  export type SupportiveDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    schemeServiceId?: SortOrder
  }

  export type SupportiveDocumentAvgOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    schemeServiceId?: SortOrder
  }

  export type SupportiveDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    schemeServiceId?: SortOrder
  }

  export type SupportiveDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    schemeServiceId?: SortOrder
  }

  export type SupportiveDocumentSumOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    schemeServiceId?: SortOrder
  }

  export type CertificateContactListRelationFilter = {
    every?: CertificateContactWhereInput
    some?: CertificateContactWhereInput
    none?: CertificateContactWhereInput
  }

  export type CertificateDocumentListRelationFilter = {
    every?: CertificateDocumentWhereInput
    some?: CertificateDocumentWhereInput
    none?: CertificateDocumentWhereInput
  }

  export type CertificateProcessStepListRelationFilter = {
    every?: CertificateProcessStepWhereInput
    some?: CertificateProcessStepWhereInput
    none?: CertificateProcessStepWhereInput
  }

  export type CertificateEligibilityListRelationFilter = {
    every?: CertificateEligibilityWhereInput
    some?: CertificateEligibilityWhereInput
    none?: CertificateEligibilityWhereInput
  }

  export type CertificateContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CertificateDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CertificateProcessStepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CertificateEligibilityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CertificateServiceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrder
    targetAudience?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrder
    offlineAddress?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    eligibilityDetails?: SortOrder
    certificateDetails?: SortOrder
    processDetails?: SortOrder
    processNew?: SortOrder
    processUpdate?: SortOrder
    processLost?: SortOrder
    processSurrender?: SortOrder
    docNew?: SortOrder
    docUpdate?: SortOrder
    docLost?: SortOrder
    docSurrender?: SortOrder
  }

  export type CertificateServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
  }

  export type CertificateServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrder
    offlineAddress?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    processNew?: SortOrder
    processUpdate?: SortOrder
    processLost?: SortOrder
    processSurrender?: SortOrder
    docNew?: SortOrder
    docUpdate?: SortOrder
    docLost?: SortOrder
    docSurrender?: SortOrder
  }

  export type CertificateServiceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrder
    offlineAddress?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    processNew?: SortOrder
    processUpdate?: SortOrder
    processLost?: SortOrder
    processSurrender?: SortOrder
    docNew?: SortOrder
    docUpdate?: SortOrder
    docLost?: SortOrder
    docSurrender?: SortOrder
  }

  export type CertificateServiceSumOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
  }

  export type CertificateServiceScalarRelationFilter = {
    is?: CertificateServiceWhereInput
    isNot?: CertificateServiceWhereInput
  }

  export type CertificateContactCountOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateContactAvgOrderByAggregateInput = {
    id?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateContactMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateContactMinOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateContactSumOrderByAggregateInput = {
    id?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateDocumentAvgOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateDocumentSumOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateProcessStepCountOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    stepDetails?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateProcessStepAvgOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateProcessStepMaxOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    stepDetails?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateProcessStepMinOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    stepDetails?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateProcessStepSumOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateEligibilityCountOrderByAggregateInput = {
    id?: SortOrder
    eligibilityDetail?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateEligibilityAvgOrderByAggregateInput = {
    id?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateEligibilityMaxOrderByAggregateInput = {
    id?: SortOrder
    eligibilityDetail?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateEligibilityMinOrderByAggregateInput = {
    id?: SortOrder
    eligibilityDetail?: SortOrder
    applicationType?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type CertificateEligibilitySumOrderByAggregateInput = {
    id?: SortOrder
    certificateServiceId?: SortOrder
  }

  export type ContactServiceContactListRelationFilter = {
    every?: ContactServiceContactWhereInput
    some?: ContactServiceContactWhereInput
    none?: ContactServiceContactWhereInput
  }

  export type ContactServiceDocumentListRelationFilter = {
    every?: ContactServiceDocumentWhereInput
    some?: ContactServiceDocumentWhereInput
    none?: ContactServiceDocumentWhereInput
  }

  export type ContactServiceContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactServiceDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactServiceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrder
    targetAudience?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrder
    offlineAddress?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    eligibilityDetails?: SortOrder
    contactDetails?: SortOrder
    processDetails?: SortOrder
    processNew?: SortOrder
    processUpdate?: SortOrder
    processLost?: SortOrder
    processSurrender?: SortOrder
    docNew?: SortOrder
    docUpdate?: SortOrder
    docLost?: SortOrder
    docSurrender?: SortOrder
  }

  export type ContactServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
  }

  export type ContactServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrder
    offlineAddress?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    processNew?: SortOrder
    processUpdate?: SortOrder
    processLost?: SortOrder
    processSurrender?: SortOrder
    docNew?: SortOrder
    docUpdate?: SortOrder
    docLost?: SortOrder
    docSurrender?: SortOrder
  }

  export type ContactServiceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    type?: SortOrder
    applicationMode?: SortOrder
    onlineUrl?: SortOrder
    offlineAddress?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    processNew?: SortOrder
    processUpdate?: SortOrder
    processLost?: SortOrder
    processSurrender?: SortOrder
    docNew?: SortOrder
    docUpdate?: SortOrder
    docLost?: SortOrder
    docSurrender?: SortOrder
  }

  export type ContactServiceSumOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
  }

  export type ContactServiceScalarRelationFilter = {
    is?: ContactServiceWhereInput
    isNot?: ContactServiceWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactServiceContactCountOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    contactServiceId?: SortOrder
  }

  export type ContactServiceContactAvgOrderByAggregateInput = {
    id?: SortOrder
    contactServiceId?: SortOrder
  }

  export type ContactServiceContactMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    contactServiceId?: SortOrder
  }

  export type ContactServiceContactMinOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    block?: SortOrder
    name?: SortOrder
    designation?: SortOrder
    contact?: SortOrder
    email?: SortOrder
    contactServiceId?: SortOrder
  }

  export type ContactServiceContactSumOrderByAggregateInput = {
    id?: SortOrder
    contactServiceId?: SortOrder
  }

  export type ContactServiceDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    contactServiceId?: SortOrder
  }

  export type ContactServiceDocumentAvgOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    contactServiceId?: SortOrder
  }

  export type ContactServiceDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    contactServiceId?: SortOrder
  }

  export type ContactServiceDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    documentType?: SortOrder
    validProof?: SortOrder
    isRequired?: SortOrder
    contactServiceId?: SortOrder
  }

  export type ContactServiceDocumentSumOrderByAggregateInput = {
    id?: SortOrder
    slNo?: SortOrder
    contactServiceId?: SortOrder
  }

  export type ContactServiceContactScalarRelationFilter = {
    is?: ContactServiceContactWhereInput
    isNot?: ContactServiceContactWhereInput
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    postName?: SortOrder
    rank?: SortOrder
    description?: SortOrder
    department?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    officeId?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    officeId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    postName?: SortOrder
    rank?: SortOrder
    description?: SortOrder
    department?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    officeId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    postName?: SortOrder
    rank?: SortOrder
    description?: SortOrder
    department?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    officeId?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    officeId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type PostScalarRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    designation?: SortOrder
    employeeId?: SortOrder
    joiningDate?: SortOrder
    salary?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    postId?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    id?: SortOrder
    salary?: SortOrder
    postId?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    designation?: SortOrder
    employeeId?: SortOrder
    joiningDate?: SortOrder
    salary?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    postId?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    designation?: SortOrder
    employeeId?: SortOrder
    joiningDate?: SortOrder
    salary?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    postId?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    id?: SortOrder
    salary?: SortOrder
    postId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    rating?: SortOrder
    category?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    resolvedBy?: SortOrder
    adminNotes?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    rating?: SortOrder
    category?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    resolvedBy?: SortOrder
    adminNotes?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    rating?: SortOrder
    category?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    resolvedBy?: SortOrder
    adminNotes?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type GrievanceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assignedTo?: SortOrder
    adminNotes?: SortOrder
    resolvedAt?: SortOrder
    trackingId?: SortOrder
  }

  export type GrievanceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GrievanceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assignedTo?: SortOrder
    adminNotes?: SortOrder
    resolvedAt?: SortOrder
    trackingId?: SortOrder
  }

  export type GrievanceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assignedTo?: SortOrder
    adminNotes?: SortOrder
    resolvedAt?: SortOrder
    trackingId?: SortOrder
  }

  export type GrievanceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SchemeServiceCreateNestedManyWithoutAdminInput = {
    create?: XOR<SchemeServiceCreateWithoutAdminInput, SchemeServiceUncheckedCreateWithoutAdminInput> | SchemeServiceCreateWithoutAdminInput[] | SchemeServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: SchemeServiceCreateOrConnectWithoutAdminInput | SchemeServiceCreateOrConnectWithoutAdminInput[]
    createMany?: SchemeServiceCreateManyAdminInputEnvelope
    connect?: SchemeServiceWhereUniqueInput | SchemeServiceWhereUniqueInput[]
  }

  export type CertificateServiceCreateNestedManyWithoutAdminInput = {
    create?: XOR<CertificateServiceCreateWithoutAdminInput, CertificateServiceUncheckedCreateWithoutAdminInput> | CertificateServiceCreateWithoutAdminInput[] | CertificateServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutAdminInput | CertificateServiceCreateOrConnectWithoutAdminInput[]
    createMany?: CertificateServiceCreateManyAdminInputEnvelope
    connect?: CertificateServiceWhereUniqueInput | CertificateServiceWhereUniqueInput[]
  }

  export type ContactServiceCreateNestedManyWithoutAdminInput = {
    create?: XOR<ContactServiceCreateWithoutAdminInput, ContactServiceUncheckedCreateWithoutAdminInput> | ContactServiceCreateWithoutAdminInput[] | ContactServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ContactServiceCreateOrConnectWithoutAdminInput | ContactServiceCreateOrConnectWithoutAdminInput[]
    createMany?: ContactServiceCreateManyAdminInputEnvelope
    connect?: ContactServiceWhereUniqueInput | ContactServiceWhereUniqueInput[]
  }

  export type SchemeServiceUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<SchemeServiceCreateWithoutAdminInput, SchemeServiceUncheckedCreateWithoutAdminInput> | SchemeServiceCreateWithoutAdminInput[] | SchemeServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: SchemeServiceCreateOrConnectWithoutAdminInput | SchemeServiceCreateOrConnectWithoutAdminInput[]
    createMany?: SchemeServiceCreateManyAdminInputEnvelope
    connect?: SchemeServiceWhereUniqueInput | SchemeServiceWhereUniqueInput[]
  }

  export type CertificateServiceUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<CertificateServiceCreateWithoutAdminInput, CertificateServiceUncheckedCreateWithoutAdminInput> | CertificateServiceCreateWithoutAdminInput[] | CertificateServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutAdminInput | CertificateServiceCreateOrConnectWithoutAdminInput[]
    createMany?: CertificateServiceCreateManyAdminInputEnvelope
    connect?: CertificateServiceWhereUniqueInput | CertificateServiceWhereUniqueInput[]
  }

  export type ContactServiceUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<ContactServiceCreateWithoutAdminInput, ContactServiceUncheckedCreateWithoutAdminInput> | ContactServiceCreateWithoutAdminInput[] | ContactServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ContactServiceCreateOrConnectWithoutAdminInput | ContactServiceCreateOrConnectWithoutAdminInput[]
    createMany?: ContactServiceCreateManyAdminInputEnvelope
    connect?: ContactServiceWhereUniqueInput | ContactServiceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SchemeServiceUpdateManyWithoutAdminNestedInput = {
    create?: XOR<SchemeServiceCreateWithoutAdminInput, SchemeServiceUncheckedCreateWithoutAdminInput> | SchemeServiceCreateWithoutAdminInput[] | SchemeServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: SchemeServiceCreateOrConnectWithoutAdminInput | SchemeServiceCreateOrConnectWithoutAdminInput[]
    upsert?: SchemeServiceUpsertWithWhereUniqueWithoutAdminInput | SchemeServiceUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: SchemeServiceCreateManyAdminInputEnvelope
    set?: SchemeServiceWhereUniqueInput | SchemeServiceWhereUniqueInput[]
    disconnect?: SchemeServiceWhereUniqueInput | SchemeServiceWhereUniqueInput[]
    delete?: SchemeServiceWhereUniqueInput | SchemeServiceWhereUniqueInput[]
    connect?: SchemeServiceWhereUniqueInput | SchemeServiceWhereUniqueInput[]
    update?: SchemeServiceUpdateWithWhereUniqueWithoutAdminInput | SchemeServiceUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: SchemeServiceUpdateManyWithWhereWithoutAdminInput | SchemeServiceUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: SchemeServiceScalarWhereInput | SchemeServiceScalarWhereInput[]
  }

  export type CertificateServiceUpdateManyWithoutAdminNestedInput = {
    create?: XOR<CertificateServiceCreateWithoutAdminInput, CertificateServiceUncheckedCreateWithoutAdminInput> | CertificateServiceCreateWithoutAdminInput[] | CertificateServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutAdminInput | CertificateServiceCreateOrConnectWithoutAdminInput[]
    upsert?: CertificateServiceUpsertWithWhereUniqueWithoutAdminInput | CertificateServiceUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: CertificateServiceCreateManyAdminInputEnvelope
    set?: CertificateServiceWhereUniqueInput | CertificateServiceWhereUniqueInput[]
    disconnect?: CertificateServiceWhereUniqueInput | CertificateServiceWhereUniqueInput[]
    delete?: CertificateServiceWhereUniqueInput | CertificateServiceWhereUniqueInput[]
    connect?: CertificateServiceWhereUniqueInput | CertificateServiceWhereUniqueInput[]
    update?: CertificateServiceUpdateWithWhereUniqueWithoutAdminInput | CertificateServiceUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: CertificateServiceUpdateManyWithWhereWithoutAdminInput | CertificateServiceUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: CertificateServiceScalarWhereInput | CertificateServiceScalarWhereInput[]
  }

  export type ContactServiceUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ContactServiceCreateWithoutAdminInput, ContactServiceUncheckedCreateWithoutAdminInput> | ContactServiceCreateWithoutAdminInput[] | ContactServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ContactServiceCreateOrConnectWithoutAdminInput | ContactServiceCreateOrConnectWithoutAdminInput[]
    upsert?: ContactServiceUpsertWithWhereUniqueWithoutAdminInput | ContactServiceUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ContactServiceCreateManyAdminInputEnvelope
    set?: ContactServiceWhereUniqueInput | ContactServiceWhereUniqueInput[]
    disconnect?: ContactServiceWhereUniqueInput | ContactServiceWhereUniqueInput[]
    delete?: ContactServiceWhereUniqueInput | ContactServiceWhereUniqueInput[]
    connect?: ContactServiceWhereUniqueInput | ContactServiceWhereUniqueInput[]
    update?: ContactServiceUpdateWithWhereUniqueWithoutAdminInput | ContactServiceUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ContactServiceUpdateManyWithWhereWithoutAdminInput | ContactServiceUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ContactServiceScalarWhereInput | ContactServiceScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SchemeServiceUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<SchemeServiceCreateWithoutAdminInput, SchemeServiceUncheckedCreateWithoutAdminInput> | SchemeServiceCreateWithoutAdminInput[] | SchemeServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: SchemeServiceCreateOrConnectWithoutAdminInput | SchemeServiceCreateOrConnectWithoutAdminInput[]
    upsert?: SchemeServiceUpsertWithWhereUniqueWithoutAdminInput | SchemeServiceUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: SchemeServiceCreateManyAdminInputEnvelope
    set?: SchemeServiceWhereUniqueInput | SchemeServiceWhereUniqueInput[]
    disconnect?: SchemeServiceWhereUniqueInput | SchemeServiceWhereUniqueInput[]
    delete?: SchemeServiceWhereUniqueInput | SchemeServiceWhereUniqueInput[]
    connect?: SchemeServiceWhereUniqueInput | SchemeServiceWhereUniqueInput[]
    update?: SchemeServiceUpdateWithWhereUniqueWithoutAdminInput | SchemeServiceUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: SchemeServiceUpdateManyWithWhereWithoutAdminInput | SchemeServiceUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: SchemeServiceScalarWhereInput | SchemeServiceScalarWhereInput[]
  }

  export type CertificateServiceUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<CertificateServiceCreateWithoutAdminInput, CertificateServiceUncheckedCreateWithoutAdminInput> | CertificateServiceCreateWithoutAdminInput[] | CertificateServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutAdminInput | CertificateServiceCreateOrConnectWithoutAdminInput[]
    upsert?: CertificateServiceUpsertWithWhereUniqueWithoutAdminInput | CertificateServiceUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: CertificateServiceCreateManyAdminInputEnvelope
    set?: CertificateServiceWhereUniqueInput | CertificateServiceWhereUniqueInput[]
    disconnect?: CertificateServiceWhereUniqueInput | CertificateServiceWhereUniqueInput[]
    delete?: CertificateServiceWhereUniqueInput | CertificateServiceWhereUniqueInput[]
    connect?: CertificateServiceWhereUniqueInput | CertificateServiceWhereUniqueInput[]
    update?: CertificateServiceUpdateWithWhereUniqueWithoutAdminInput | CertificateServiceUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: CertificateServiceUpdateManyWithWhereWithoutAdminInput | CertificateServiceUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: CertificateServiceScalarWhereInput | CertificateServiceScalarWhereInput[]
  }

  export type ContactServiceUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ContactServiceCreateWithoutAdminInput, ContactServiceUncheckedCreateWithoutAdminInput> | ContactServiceCreateWithoutAdminInput[] | ContactServiceUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ContactServiceCreateOrConnectWithoutAdminInput | ContactServiceCreateOrConnectWithoutAdminInput[]
    upsert?: ContactServiceUpsertWithWhereUniqueWithoutAdminInput | ContactServiceUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ContactServiceCreateManyAdminInputEnvelope
    set?: ContactServiceWhereUniqueInput | ContactServiceWhereUniqueInput[]
    disconnect?: ContactServiceWhereUniqueInput | ContactServiceWhereUniqueInput[]
    delete?: ContactServiceWhereUniqueInput | ContactServiceWhereUniqueInput[]
    connect?: ContactServiceWhereUniqueInput | ContactServiceWhereUniqueInput[]
    update?: ContactServiceUpdateWithWhereUniqueWithoutAdminInput | ContactServiceUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ContactServiceUpdateManyWithWhereWithoutAdminInput | ContactServiceUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ContactServiceScalarWhereInput | ContactServiceScalarWhereInput[]
  }

  export type SchemeServiceCreatetargetAudienceInput = {
    set: string[]
  }

  export type SchemeServiceCreateeligibilityDetailsInput = {
    set: string[]
  }

  export type SchemeServiceCreateschemeDetailsInput = {
    set: string[]
  }

  export type SchemeServiceCreateprocessDetailsInput = {
    set: string[]
  }

  export type AdminCreateNestedOneWithoutSchemeServicesInput = {
    create?: XOR<AdminCreateWithoutSchemeServicesInput, AdminUncheckedCreateWithoutSchemeServicesInput>
    connectOrCreate?: AdminCreateOrConnectWithoutSchemeServicesInput
    connect?: AdminWhereUniqueInput
  }

  export type ContactPersonCreateNestedManyWithoutSchemeServiceInput = {
    create?: XOR<ContactPersonCreateWithoutSchemeServiceInput, ContactPersonUncheckedCreateWithoutSchemeServiceInput> | ContactPersonCreateWithoutSchemeServiceInput[] | ContactPersonUncheckedCreateWithoutSchemeServiceInput[]
    connectOrCreate?: ContactPersonCreateOrConnectWithoutSchemeServiceInput | ContactPersonCreateOrConnectWithoutSchemeServiceInput[]
    createMany?: ContactPersonCreateManySchemeServiceInputEnvelope
    connect?: ContactPersonWhereUniqueInput | ContactPersonWhereUniqueInput[]
  }

  export type SupportiveDocumentCreateNestedManyWithoutSchemeServiceInput = {
    create?: XOR<SupportiveDocumentCreateWithoutSchemeServiceInput, SupportiveDocumentUncheckedCreateWithoutSchemeServiceInput> | SupportiveDocumentCreateWithoutSchemeServiceInput[] | SupportiveDocumentUncheckedCreateWithoutSchemeServiceInput[]
    connectOrCreate?: SupportiveDocumentCreateOrConnectWithoutSchemeServiceInput | SupportiveDocumentCreateOrConnectWithoutSchemeServiceInput[]
    createMany?: SupportiveDocumentCreateManySchemeServiceInputEnvelope
    connect?: SupportiveDocumentWhereUniqueInput | SupportiveDocumentWhereUniqueInput[]
  }

  export type ContactPersonUncheckedCreateNestedManyWithoutSchemeServiceInput = {
    create?: XOR<ContactPersonCreateWithoutSchemeServiceInput, ContactPersonUncheckedCreateWithoutSchemeServiceInput> | ContactPersonCreateWithoutSchemeServiceInput[] | ContactPersonUncheckedCreateWithoutSchemeServiceInput[]
    connectOrCreate?: ContactPersonCreateOrConnectWithoutSchemeServiceInput | ContactPersonCreateOrConnectWithoutSchemeServiceInput[]
    createMany?: ContactPersonCreateManySchemeServiceInputEnvelope
    connect?: ContactPersonWhereUniqueInput | ContactPersonWhereUniqueInput[]
  }

  export type SupportiveDocumentUncheckedCreateNestedManyWithoutSchemeServiceInput = {
    create?: XOR<SupportiveDocumentCreateWithoutSchemeServiceInput, SupportiveDocumentUncheckedCreateWithoutSchemeServiceInput> | SupportiveDocumentCreateWithoutSchemeServiceInput[] | SupportiveDocumentUncheckedCreateWithoutSchemeServiceInput[]
    connectOrCreate?: SupportiveDocumentCreateOrConnectWithoutSchemeServiceInput | SupportiveDocumentCreateOrConnectWithoutSchemeServiceInput[]
    createMany?: SupportiveDocumentCreateManySchemeServiceInputEnvelope
    connect?: SupportiveDocumentWhereUniqueInput | SupportiveDocumentWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SchemeServiceUpdatetargetAudienceInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type SchemeServiceUpdateeligibilityDetailsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SchemeServiceUpdateschemeDetailsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SchemeServiceUpdateprocessDetailsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AdminUpdateOneRequiredWithoutSchemeServicesNestedInput = {
    create?: XOR<AdminCreateWithoutSchemeServicesInput, AdminUncheckedCreateWithoutSchemeServicesInput>
    connectOrCreate?: AdminCreateOrConnectWithoutSchemeServicesInput
    upsert?: AdminUpsertWithoutSchemeServicesInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutSchemeServicesInput, AdminUpdateWithoutSchemeServicesInput>, AdminUncheckedUpdateWithoutSchemeServicesInput>
  }

  export type ContactPersonUpdateManyWithoutSchemeServiceNestedInput = {
    create?: XOR<ContactPersonCreateWithoutSchemeServiceInput, ContactPersonUncheckedCreateWithoutSchemeServiceInput> | ContactPersonCreateWithoutSchemeServiceInput[] | ContactPersonUncheckedCreateWithoutSchemeServiceInput[]
    connectOrCreate?: ContactPersonCreateOrConnectWithoutSchemeServiceInput | ContactPersonCreateOrConnectWithoutSchemeServiceInput[]
    upsert?: ContactPersonUpsertWithWhereUniqueWithoutSchemeServiceInput | ContactPersonUpsertWithWhereUniqueWithoutSchemeServiceInput[]
    createMany?: ContactPersonCreateManySchemeServiceInputEnvelope
    set?: ContactPersonWhereUniqueInput | ContactPersonWhereUniqueInput[]
    disconnect?: ContactPersonWhereUniqueInput | ContactPersonWhereUniqueInput[]
    delete?: ContactPersonWhereUniqueInput | ContactPersonWhereUniqueInput[]
    connect?: ContactPersonWhereUniqueInput | ContactPersonWhereUniqueInput[]
    update?: ContactPersonUpdateWithWhereUniqueWithoutSchemeServiceInput | ContactPersonUpdateWithWhereUniqueWithoutSchemeServiceInput[]
    updateMany?: ContactPersonUpdateManyWithWhereWithoutSchemeServiceInput | ContactPersonUpdateManyWithWhereWithoutSchemeServiceInput[]
    deleteMany?: ContactPersonScalarWhereInput | ContactPersonScalarWhereInput[]
  }

  export type SupportiveDocumentUpdateManyWithoutSchemeServiceNestedInput = {
    create?: XOR<SupportiveDocumentCreateWithoutSchemeServiceInput, SupportiveDocumentUncheckedCreateWithoutSchemeServiceInput> | SupportiveDocumentCreateWithoutSchemeServiceInput[] | SupportiveDocumentUncheckedCreateWithoutSchemeServiceInput[]
    connectOrCreate?: SupportiveDocumentCreateOrConnectWithoutSchemeServiceInput | SupportiveDocumentCreateOrConnectWithoutSchemeServiceInput[]
    upsert?: SupportiveDocumentUpsertWithWhereUniqueWithoutSchemeServiceInput | SupportiveDocumentUpsertWithWhereUniqueWithoutSchemeServiceInput[]
    createMany?: SupportiveDocumentCreateManySchemeServiceInputEnvelope
    set?: SupportiveDocumentWhereUniqueInput | SupportiveDocumentWhereUniqueInput[]
    disconnect?: SupportiveDocumentWhereUniqueInput | SupportiveDocumentWhereUniqueInput[]
    delete?: SupportiveDocumentWhereUniqueInput | SupportiveDocumentWhereUniqueInput[]
    connect?: SupportiveDocumentWhereUniqueInput | SupportiveDocumentWhereUniqueInput[]
    update?: SupportiveDocumentUpdateWithWhereUniqueWithoutSchemeServiceInput | SupportiveDocumentUpdateWithWhereUniqueWithoutSchemeServiceInput[]
    updateMany?: SupportiveDocumentUpdateManyWithWhereWithoutSchemeServiceInput | SupportiveDocumentUpdateManyWithWhereWithoutSchemeServiceInput[]
    deleteMany?: SupportiveDocumentScalarWhereInput | SupportiveDocumentScalarWhereInput[]
  }

  export type ContactPersonUncheckedUpdateManyWithoutSchemeServiceNestedInput = {
    create?: XOR<ContactPersonCreateWithoutSchemeServiceInput, ContactPersonUncheckedCreateWithoutSchemeServiceInput> | ContactPersonCreateWithoutSchemeServiceInput[] | ContactPersonUncheckedCreateWithoutSchemeServiceInput[]
    connectOrCreate?: ContactPersonCreateOrConnectWithoutSchemeServiceInput | ContactPersonCreateOrConnectWithoutSchemeServiceInput[]
    upsert?: ContactPersonUpsertWithWhereUniqueWithoutSchemeServiceInput | ContactPersonUpsertWithWhereUniqueWithoutSchemeServiceInput[]
    createMany?: ContactPersonCreateManySchemeServiceInputEnvelope
    set?: ContactPersonWhereUniqueInput | ContactPersonWhereUniqueInput[]
    disconnect?: ContactPersonWhereUniqueInput | ContactPersonWhereUniqueInput[]
    delete?: ContactPersonWhereUniqueInput | ContactPersonWhereUniqueInput[]
    connect?: ContactPersonWhereUniqueInput | ContactPersonWhereUniqueInput[]
    update?: ContactPersonUpdateWithWhereUniqueWithoutSchemeServiceInput | ContactPersonUpdateWithWhereUniqueWithoutSchemeServiceInput[]
    updateMany?: ContactPersonUpdateManyWithWhereWithoutSchemeServiceInput | ContactPersonUpdateManyWithWhereWithoutSchemeServiceInput[]
    deleteMany?: ContactPersonScalarWhereInput | ContactPersonScalarWhereInput[]
  }

  export type SupportiveDocumentUncheckedUpdateManyWithoutSchemeServiceNestedInput = {
    create?: XOR<SupportiveDocumentCreateWithoutSchemeServiceInput, SupportiveDocumentUncheckedCreateWithoutSchemeServiceInput> | SupportiveDocumentCreateWithoutSchemeServiceInput[] | SupportiveDocumentUncheckedCreateWithoutSchemeServiceInput[]
    connectOrCreate?: SupportiveDocumentCreateOrConnectWithoutSchemeServiceInput | SupportiveDocumentCreateOrConnectWithoutSchemeServiceInput[]
    upsert?: SupportiveDocumentUpsertWithWhereUniqueWithoutSchemeServiceInput | SupportiveDocumentUpsertWithWhereUniqueWithoutSchemeServiceInput[]
    createMany?: SupportiveDocumentCreateManySchemeServiceInputEnvelope
    set?: SupportiveDocumentWhereUniqueInput | SupportiveDocumentWhereUniqueInput[]
    disconnect?: SupportiveDocumentWhereUniqueInput | SupportiveDocumentWhereUniqueInput[]
    delete?: SupportiveDocumentWhereUniqueInput | SupportiveDocumentWhereUniqueInput[]
    connect?: SupportiveDocumentWhereUniqueInput | SupportiveDocumentWhereUniqueInput[]
    update?: SupportiveDocumentUpdateWithWhereUniqueWithoutSchemeServiceInput | SupportiveDocumentUpdateWithWhereUniqueWithoutSchemeServiceInput[]
    updateMany?: SupportiveDocumentUpdateManyWithWhereWithoutSchemeServiceInput | SupportiveDocumentUpdateManyWithWhereWithoutSchemeServiceInput[]
    deleteMany?: SupportiveDocumentScalarWhereInput | SupportiveDocumentScalarWhereInput[]
  }

  export type SchemeServiceCreateNestedOneWithoutContactsInput = {
    create?: XOR<SchemeServiceCreateWithoutContactsInput, SchemeServiceUncheckedCreateWithoutContactsInput>
    connectOrCreate?: SchemeServiceCreateOrConnectWithoutContactsInput
    connect?: SchemeServiceWhereUniqueInput
  }

  export type SchemeServiceUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<SchemeServiceCreateWithoutContactsInput, SchemeServiceUncheckedCreateWithoutContactsInput>
    connectOrCreate?: SchemeServiceCreateOrConnectWithoutContactsInput
    upsert?: SchemeServiceUpsertWithoutContactsInput
    connect?: SchemeServiceWhereUniqueInput
    update?: XOR<XOR<SchemeServiceUpdateToOneWithWhereWithoutContactsInput, SchemeServiceUpdateWithoutContactsInput>, SchemeServiceUncheckedUpdateWithoutContactsInput>
  }

  export type SchemeServiceCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<SchemeServiceCreateWithoutDocumentsInput, SchemeServiceUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: SchemeServiceCreateOrConnectWithoutDocumentsInput
    connect?: SchemeServiceWhereUniqueInput
  }

  export type SchemeServiceUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<SchemeServiceCreateWithoutDocumentsInput, SchemeServiceUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: SchemeServiceCreateOrConnectWithoutDocumentsInput
    upsert?: SchemeServiceUpsertWithoutDocumentsInput
    connect?: SchemeServiceWhereUniqueInput
    update?: XOR<XOR<SchemeServiceUpdateToOneWithWhereWithoutDocumentsInput, SchemeServiceUpdateWithoutDocumentsInput>, SchemeServiceUncheckedUpdateWithoutDocumentsInput>
  }

  export type CertificateServiceCreatetargetAudienceInput = {
    set: string[]
  }

  export type CertificateServiceCreateeligibilityDetailsInput = {
    set: string[]
  }

  export type CertificateServiceCreatecertificateDetailsInput = {
    set: string[]
  }

  export type CertificateServiceCreateprocessDetailsInput = {
    set: string[]
  }

  export type AdminCreateNestedOneWithoutCertificateServicesInput = {
    create?: XOR<AdminCreateWithoutCertificateServicesInput, AdminUncheckedCreateWithoutCertificateServicesInput>
    connectOrCreate?: AdminCreateOrConnectWithoutCertificateServicesInput
    connect?: AdminWhereUniqueInput
  }

  export type CertificateContactCreateNestedManyWithoutCertificateServiceInput = {
    create?: XOR<CertificateContactCreateWithoutCertificateServiceInput, CertificateContactUncheckedCreateWithoutCertificateServiceInput> | CertificateContactCreateWithoutCertificateServiceInput[] | CertificateContactUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateContactCreateOrConnectWithoutCertificateServiceInput | CertificateContactCreateOrConnectWithoutCertificateServiceInput[]
    createMany?: CertificateContactCreateManyCertificateServiceInputEnvelope
    connect?: CertificateContactWhereUniqueInput | CertificateContactWhereUniqueInput[]
  }

  export type CertificateDocumentCreateNestedManyWithoutCertificateServiceInput = {
    create?: XOR<CertificateDocumentCreateWithoutCertificateServiceInput, CertificateDocumentUncheckedCreateWithoutCertificateServiceInput> | CertificateDocumentCreateWithoutCertificateServiceInput[] | CertificateDocumentUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateDocumentCreateOrConnectWithoutCertificateServiceInput | CertificateDocumentCreateOrConnectWithoutCertificateServiceInput[]
    createMany?: CertificateDocumentCreateManyCertificateServiceInputEnvelope
    connect?: CertificateDocumentWhereUniqueInput | CertificateDocumentWhereUniqueInput[]
  }

  export type CertificateProcessStepCreateNestedManyWithoutCertificateServiceInput = {
    create?: XOR<CertificateProcessStepCreateWithoutCertificateServiceInput, CertificateProcessStepUncheckedCreateWithoutCertificateServiceInput> | CertificateProcessStepCreateWithoutCertificateServiceInput[] | CertificateProcessStepUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateProcessStepCreateOrConnectWithoutCertificateServiceInput | CertificateProcessStepCreateOrConnectWithoutCertificateServiceInput[]
    createMany?: CertificateProcessStepCreateManyCertificateServiceInputEnvelope
    connect?: CertificateProcessStepWhereUniqueInput | CertificateProcessStepWhereUniqueInput[]
  }

  export type CertificateEligibilityCreateNestedManyWithoutCertificateServiceInput = {
    create?: XOR<CertificateEligibilityCreateWithoutCertificateServiceInput, CertificateEligibilityUncheckedCreateWithoutCertificateServiceInput> | CertificateEligibilityCreateWithoutCertificateServiceInput[] | CertificateEligibilityUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateEligibilityCreateOrConnectWithoutCertificateServiceInput | CertificateEligibilityCreateOrConnectWithoutCertificateServiceInput[]
    createMany?: CertificateEligibilityCreateManyCertificateServiceInputEnvelope
    connect?: CertificateEligibilityWhereUniqueInput | CertificateEligibilityWhereUniqueInput[]
  }

  export type CertificateContactUncheckedCreateNestedManyWithoutCertificateServiceInput = {
    create?: XOR<CertificateContactCreateWithoutCertificateServiceInput, CertificateContactUncheckedCreateWithoutCertificateServiceInput> | CertificateContactCreateWithoutCertificateServiceInput[] | CertificateContactUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateContactCreateOrConnectWithoutCertificateServiceInput | CertificateContactCreateOrConnectWithoutCertificateServiceInput[]
    createMany?: CertificateContactCreateManyCertificateServiceInputEnvelope
    connect?: CertificateContactWhereUniqueInput | CertificateContactWhereUniqueInput[]
  }

  export type CertificateDocumentUncheckedCreateNestedManyWithoutCertificateServiceInput = {
    create?: XOR<CertificateDocumentCreateWithoutCertificateServiceInput, CertificateDocumentUncheckedCreateWithoutCertificateServiceInput> | CertificateDocumentCreateWithoutCertificateServiceInput[] | CertificateDocumentUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateDocumentCreateOrConnectWithoutCertificateServiceInput | CertificateDocumentCreateOrConnectWithoutCertificateServiceInput[]
    createMany?: CertificateDocumentCreateManyCertificateServiceInputEnvelope
    connect?: CertificateDocumentWhereUniqueInput | CertificateDocumentWhereUniqueInput[]
  }

  export type CertificateProcessStepUncheckedCreateNestedManyWithoutCertificateServiceInput = {
    create?: XOR<CertificateProcessStepCreateWithoutCertificateServiceInput, CertificateProcessStepUncheckedCreateWithoutCertificateServiceInput> | CertificateProcessStepCreateWithoutCertificateServiceInput[] | CertificateProcessStepUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateProcessStepCreateOrConnectWithoutCertificateServiceInput | CertificateProcessStepCreateOrConnectWithoutCertificateServiceInput[]
    createMany?: CertificateProcessStepCreateManyCertificateServiceInputEnvelope
    connect?: CertificateProcessStepWhereUniqueInput | CertificateProcessStepWhereUniqueInput[]
  }

  export type CertificateEligibilityUncheckedCreateNestedManyWithoutCertificateServiceInput = {
    create?: XOR<CertificateEligibilityCreateWithoutCertificateServiceInput, CertificateEligibilityUncheckedCreateWithoutCertificateServiceInput> | CertificateEligibilityCreateWithoutCertificateServiceInput[] | CertificateEligibilityUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateEligibilityCreateOrConnectWithoutCertificateServiceInput | CertificateEligibilityCreateOrConnectWithoutCertificateServiceInput[]
    createMany?: CertificateEligibilityCreateManyCertificateServiceInputEnvelope
    connect?: CertificateEligibilityWhereUniqueInput | CertificateEligibilityWhereUniqueInput[]
  }

  export type CertificateServiceUpdatetargetAudienceInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CertificateServiceUpdateeligibilityDetailsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CertificateServiceUpdatecertificateDetailsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CertificateServiceUpdateprocessDetailsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AdminUpdateOneRequiredWithoutCertificateServicesNestedInput = {
    create?: XOR<AdminCreateWithoutCertificateServicesInput, AdminUncheckedCreateWithoutCertificateServicesInput>
    connectOrCreate?: AdminCreateOrConnectWithoutCertificateServicesInput
    upsert?: AdminUpsertWithoutCertificateServicesInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutCertificateServicesInput, AdminUpdateWithoutCertificateServicesInput>, AdminUncheckedUpdateWithoutCertificateServicesInput>
  }

  export type CertificateContactUpdateManyWithoutCertificateServiceNestedInput = {
    create?: XOR<CertificateContactCreateWithoutCertificateServiceInput, CertificateContactUncheckedCreateWithoutCertificateServiceInput> | CertificateContactCreateWithoutCertificateServiceInput[] | CertificateContactUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateContactCreateOrConnectWithoutCertificateServiceInput | CertificateContactCreateOrConnectWithoutCertificateServiceInput[]
    upsert?: CertificateContactUpsertWithWhereUniqueWithoutCertificateServiceInput | CertificateContactUpsertWithWhereUniqueWithoutCertificateServiceInput[]
    createMany?: CertificateContactCreateManyCertificateServiceInputEnvelope
    set?: CertificateContactWhereUniqueInput | CertificateContactWhereUniqueInput[]
    disconnect?: CertificateContactWhereUniqueInput | CertificateContactWhereUniqueInput[]
    delete?: CertificateContactWhereUniqueInput | CertificateContactWhereUniqueInput[]
    connect?: CertificateContactWhereUniqueInput | CertificateContactWhereUniqueInput[]
    update?: CertificateContactUpdateWithWhereUniqueWithoutCertificateServiceInput | CertificateContactUpdateWithWhereUniqueWithoutCertificateServiceInput[]
    updateMany?: CertificateContactUpdateManyWithWhereWithoutCertificateServiceInput | CertificateContactUpdateManyWithWhereWithoutCertificateServiceInput[]
    deleteMany?: CertificateContactScalarWhereInput | CertificateContactScalarWhereInput[]
  }

  export type CertificateDocumentUpdateManyWithoutCertificateServiceNestedInput = {
    create?: XOR<CertificateDocumentCreateWithoutCertificateServiceInput, CertificateDocumentUncheckedCreateWithoutCertificateServiceInput> | CertificateDocumentCreateWithoutCertificateServiceInput[] | CertificateDocumentUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateDocumentCreateOrConnectWithoutCertificateServiceInput | CertificateDocumentCreateOrConnectWithoutCertificateServiceInput[]
    upsert?: CertificateDocumentUpsertWithWhereUniqueWithoutCertificateServiceInput | CertificateDocumentUpsertWithWhereUniqueWithoutCertificateServiceInput[]
    createMany?: CertificateDocumentCreateManyCertificateServiceInputEnvelope
    set?: CertificateDocumentWhereUniqueInput | CertificateDocumentWhereUniqueInput[]
    disconnect?: CertificateDocumentWhereUniqueInput | CertificateDocumentWhereUniqueInput[]
    delete?: CertificateDocumentWhereUniqueInput | CertificateDocumentWhereUniqueInput[]
    connect?: CertificateDocumentWhereUniqueInput | CertificateDocumentWhereUniqueInput[]
    update?: CertificateDocumentUpdateWithWhereUniqueWithoutCertificateServiceInput | CertificateDocumentUpdateWithWhereUniqueWithoutCertificateServiceInput[]
    updateMany?: CertificateDocumentUpdateManyWithWhereWithoutCertificateServiceInput | CertificateDocumentUpdateManyWithWhereWithoutCertificateServiceInput[]
    deleteMany?: CertificateDocumentScalarWhereInput | CertificateDocumentScalarWhereInput[]
  }

  export type CertificateProcessStepUpdateManyWithoutCertificateServiceNestedInput = {
    create?: XOR<CertificateProcessStepCreateWithoutCertificateServiceInput, CertificateProcessStepUncheckedCreateWithoutCertificateServiceInput> | CertificateProcessStepCreateWithoutCertificateServiceInput[] | CertificateProcessStepUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateProcessStepCreateOrConnectWithoutCertificateServiceInput | CertificateProcessStepCreateOrConnectWithoutCertificateServiceInput[]
    upsert?: CertificateProcessStepUpsertWithWhereUniqueWithoutCertificateServiceInput | CertificateProcessStepUpsertWithWhereUniqueWithoutCertificateServiceInput[]
    createMany?: CertificateProcessStepCreateManyCertificateServiceInputEnvelope
    set?: CertificateProcessStepWhereUniqueInput | CertificateProcessStepWhereUniqueInput[]
    disconnect?: CertificateProcessStepWhereUniqueInput | CertificateProcessStepWhereUniqueInput[]
    delete?: CertificateProcessStepWhereUniqueInput | CertificateProcessStepWhereUniqueInput[]
    connect?: CertificateProcessStepWhereUniqueInput | CertificateProcessStepWhereUniqueInput[]
    update?: CertificateProcessStepUpdateWithWhereUniqueWithoutCertificateServiceInput | CertificateProcessStepUpdateWithWhereUniqueWithoutCertificateServiceInput[]
    updateMany?: CertificateProcessStepUpdateManyWithWhereWithoutCertificateServiceInput | CertificateProcessStepUpdateManyWithWhereWithoutCertificateServiceInput[]
    deleteMany?: CertificateProcessStepScalarWhereInput | CertificateProcessStepScalarWhereInput[]
  }

  export type CertificateEligibilityUpdateManyWithoutCertificateServiceNestedInput = {
    create?: XOR<CertificateEligibilityCreateWithoutCertificateServiceInput, CertificateEligibilityUncheckedCreateWithoutCertificateServiceInput> | CertificateEligibilityCreateWithoutCertificateServiceInput[] | CertificateEligibilityUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateEligibilityCreateOrConnectWithoutCertificateServiceInput | CertificateEligibilityCreateOrConnectWithoutCertificateServiceInput[]
    upsert?: CertificateEligibilityUpsertWithWhereUniqueWithoutCertificateServiceInput | CertificateEligibilityUpsertWithWhereUniqueWithoutCertificateServiceInput[]
    createMany?: CertificateEligibilityCreateManyCertificateServiceInputEnvelope
    set?: CertificateEligibilityWhereUniqueInput | CertificateEligibilityWhereUniqueInput[]
    disconnect?: CertificateEligibilityWhereUniqueInput | CertificateEligibilityWhereUniqueInput[]
    delete?: CertificateEligibilityWhereUniqueInput | CertificateEligibilityWhereUniqueInput[]
    connect?: CertificateEligibilityWhereUniqueInput | CertificateEligibilityWhereUniqueInput[]
    update?: CertificateEligibilityUpdateWithWhereUniqueWithoutCertificateServiceInput | CertificateEligibilityUpdateWithWhereUniqueWithoutCertificateServiceInput[]
    updateMany?: CertificateEligibilityUpdateManyWithWhereWithoutCertificateServiceInput | CertificateEligibilityUpdateManyWithWhereWithoutCertificateServiceInput[]
    deleteMany?: CertificateEligibilityScalarWhereInput | CertificateEligibilityScalarWhereInput[]
  }

  export type CertificateContactUncheckedUpdateManyWithoutCertificateServiceNestedInput = {
    create?: XOR<CertificateContactCreateWithoutCertificateServiceInput, CertificateContactUncheckedCreateWithoutCertificateServiceInput> | CertificateContactCreateWithoutCertificateServiceInput[] | CertificateContactUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateContactCreateOrConnectWithoutCertificateServiceInput | CertificateContactCreateOrConnectWithoutCertificateServiceInput[]
    upsert?: CertificateContactUpsertWithWhereUniqueWithoutCertificateServiceInput | CertificateContactUpsertWithWhereUniqueWithoutCertificateServiceInput[]
    createMany?: CertificateContactCreateManyCertificateServiceInputEnvelope
    set?: CertificateContactWhereUniqueInput | CertificateContactWhereUniqueInput[]
    disconnect?: CertificateContactWhereUniqueInput | CertificateContactWhereUniqueInput[]
    delete?: CertificateContactWhereUniqueInput | CertificateContactWhereUniqueInput[]
    connect?: CertificateContactWhereUniqueInput | CertificateContactWhereUniqueInput[]
    update?: CertificateContactUpdateWithWhereUniqueWithoutCertificateServiceInput | CertificateContactUpdateWithWhereUniqueWithoutCertificateServiceInput[]
    updateMany?: CertificateContactUpdateManyWithWhereWithoutCertificateServiceInput | CertificateContactUpdateManyWithWhereWithoutCertificateServiceInput[]
    deleteMany?: CertificateContactScalarWhereInput | CertificateContactScalarWhereInput[]
  }

  export type CertificateDocumentUncheckedUpdateManyWithoutCertificateServiceNestedInput = {
    create?: XOR<CertificateDocumentCreateWithoutCertificateServiceInput, CertificateDocumentUncheckedCreateWithoutCertificateServiceInput> | CertificateDocumentCreateWithoutCertificateServiceInput[] | CertificateDocumentUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateDocumentCreateOrConnectWithoutCertificateServiceInput | CertificateDocumentCreateOrConnectWithoutCertificateServiceInput[]
    upsert?: CertificateDocumentUpsertWithWhereUniqueWithoutCertificateServiceInput | CertificateDocumentUpsertWithWhereUniqueWithoutCertificateServiceInput[]
    createMany?: CertificateDocumentCreateManyCertificateServiceInputEnvelope
    set?: CertificateDocumentWhereUniqueInput | CertificateDocumentWhereUniqueInput[]
    disconnect?: CertificateDocumentWhereUniqueInput | CertificateDocumentWhereUniqueInput[]
    delete?: CertificateDocumentWhereUniqueInput | CertificateDocumentWhereUniqueInput[]
    connect?: CertificateDocumentWhereUniqueInput | CertificateDocumentWhereUniqueInput[]
    update?: CertificateDocumentUpdateWithWhereUniqueWithoutCertificateServiceInput | CertificateDocumentUpdateWithWhereUniqueWithoutCertificateServiceInput[]
    updateMany?: CertificateDocumentUpdateManyWithWhereWithoutCertificateServiceInput | CertificateDocumentUpdateManyWithWhereWithoutCertificateServiceInput[]
    deleteMany?: CertificateDocumentScalarWhereInput | CertificateDocumentScalarWhereInput[]
  }

  export type CertificateProcessStepUncheckedUpdateManyWithoutCertificateServiceNestedInput = {
    create?: XOR<CertificateProcessStepCreateWithoutCertificateServiceInput, CertificateProcessStepUncheckedCreateWithoutCertificateServiceInput> | CertificateProcessStepCreateWithoutCertificateServiceInput[] | CertificateProcessStepUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateProcessStepCreateOrConnectWithoutCertificateServiceInput | CertificateProcessStepCreateOrConnectWithoutCertificateServiceInput[]
    upsert?: CertificateProcessStepUpsertWithWhereUniqueWithoutCertificateServiceInput | CertificateProcessStepUpsertWithWhereUniqueWithoutCertificateServiceInput[]
    createMany?: CertificateProcessStepCreateManyCertificateServiceInputEnvelope
    set?: CertificateProcessStepWhereUniqueInput | CertificateProcessStepWhereUniqueInput[]
    disconnect?: CertificateProcessStepWhereUniqueInput | CertificateProcessStepWhereUniqueInput[]
    delete?: CertificateProcessStepWhereUniqueInput | CertificateProcessStepWhereUniqueInput[]
    connect?: CertificateProcessStepWhereUniqueInput | CertificateProcessStepWhereUniqueInput[]
    update?: CertificateProcessStepUpdateWithWhereUniqueWithoutCertificateServiceInput | CertificateProcessStepUpdateWithWhereUniqueWithoutCertificateServiceInput[]
    updateMany?: CertificateProcessStepUpdateManyWithWhereWithoutCertificateServiceInput | CertificateProcessStepUpdateManyWithWhereWithoutCertificateServiceInput[]
    deleteMany?: CertificateProcessStepScalarWhereInput | CertificateProcessStepScalarWhereInput[]
  }

  export type CertificateEligibilityUncheckedUpdateManyWithoutCertificateServiceNestedInput = {
    create?: XOR<CertificateEligibilityCreateWithoutCertificateServiceInput, CertificateEligibilityUncheckedCreateWithoutCertificateServiceInput> | CertificateEligibilityCreateWithoutCertificateServiceInput[] | CertificateEligibilityUncheckedCreateWithoutCertificateServiceInput[]
    connectOrCreate?: CertificateEligibilityCreateOrConnectWithoutCertificateServiceInput | CertificateEligibilityCreateOrConnectWithoutCertificateServiceInput[]
    upsert?: CertificateEligibilityUpsertWithWhereUniqueWithoutCertificateServiceInput | CertificateEligibilityUpsertWithWhereUniqueWithoutCertificateServiceInput[]
    createMany?: CertificateEligibilityCreateManyCertificateServiceInputEnvelope
    set?: CertificateEligibilityWhereUniqueInput | CertificateEligibilityWhereUniqueInput[]
    disconnect?: CertificateEligibilityWhereUniqueInput | CertificateEligibilityWhereUniqueInput[]
    delete?: CertificateEligibilityWhereUniqueInput | CertificateEligibilityWhereUniqueInput[]
    connect?: CertificateEligibilityWhereUniqueInput | CertificateEligibilityWhereUniqueInput[]
    update?: CertificateEligibilityUpdateWithWhereUniqueWithoutCertificateServiceInput | CertificateEligibilityUpdateWithWhereUniqueWithoutCertificateServiceInput[]
    updateMany?: CertificateEligibilityUpdateManyWithWhereWithoutCertificateServiceInput | CertificateEligibilityUpdateManyWithWhereWithoutCertificateServiceInput[]
    deleteMany?: CertificateEligibilityScalarWhereInput | CertificateEligibilityScalarWhereInput[]
  }

  export type CertificateServiceCreateNestedOneWithoutContactsInput = {
    create?: XOR<CertificateServiceCreateWithoutContactsInput, CertificateServiceUncheckedCreateWithoutContactsInput>
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutContactsInput
    connect?: CertificateServiceWhereUniqueInput
  }

  export type CertificateServiceUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<CertificateServiceCreateWithoutContactsInput, CertificateServiceUncheckedCreateWithoutContactsInput>
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutContactsInput
    upsert?: CertificateServiceUpsertWithoutContactsInput
    connect?: CertificateServiceWhereUniqueInput
    update?: XOR<XOR<CertificateServiceUpdateToOneWithWhereWithoutContactsInput, CertificateServiceUpdateWithoutContactsInput>, CertificateServiceUncheckedUpdateWithoutContactsInput>
  }

  export type CertificateServiceCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<CertificateServiceCreateWithoutDocumentsInput, CertificateServiceUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutDocumentsInput
    connect?: CertificateServiceWhereUniqueInput
  }

  export type CertificateServiceUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<CertificateServiceCreateWithoutDocumentsInput, CertificateServiceUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutDocumentsInput
    upsert?: CertificateServiceUpsertWithoutDocumentsInput
    connect?: CertificateServiceWhereUniqueInput
    update?: XOR<XOR<CertificateServiceUpdateToOneWithWhereWithoutDocumentsInput, CertificateServiceUpdateWithoutDocumentsInput>, CertificateServiceUncheckedUpdateWithoutDocumentsInput>
  }

  export type CertificateServiceCreateNestedOneWithoutProcessStepsInput = {
    create?: XOR<CertificateServiceCreateWithoutProcessStepsInput, CertificateServiceUncheckedCreateWithoutProcessStepsInput>
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutProcessStepsInput
    connect?: CertificateServiceWhereUniqueInput
  }

  export type CertificateServiceUpdateOneRequiredWithoutProcessStepsNestedInput = {
    create?: XOR<CertificateServiceCreateWithoutProcessStepsInput, CertificateServiceUncheckedCreateWithoutProcessStepsInput>
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutProcessStepsInput
    upsert?: CertificateServiceUpsertWithoutProcessStepsInput
    connect?: CertificateServiceWhereUniqueInput
    update?: XOR<XOR<CertificateServiceUpdateToOneWithWhereWithoutProcessStepsInput, CertificateServiceUpdateWithoutProcessStepsInput>, CertificateServiceUncheckedUpdateWithoutProcessStepsInput>
  }

  export type CertificateServiceCreateNestedOneWithoutEligibilityItemsInput = {
    create?: XOR<CertificateServiceCreateWithoutEligibilityItemsInput, CertificateServiceUncheckedCreateWithoutEligibilityItemsInput>
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutEligibilityItemsInput
    connect?: CertificateServiceWhereUniqueInput
  }

  export type CertificateServiceUpdateOneRequiredWithoutEligibilityItemsNestedInput = {
    create?: XOR<CertificateServiceCreateWithoutEligibilityItemsInput, CertificateServiceUncheckedCreateWithoutEligibilityItemsInput>
    connectOrCreate?: CertificateServiceCreateOrConnectWithoutEligibilityItemsInput
    upsert?: CertificateServiceUpsertWithoutEligibilityItemsInput
    connect?: CertificateServiceWhereUniqueInput
    update?: XOR<XOR<CertificateServiceUpdateToOneWithWhereWithoutEligibilityItemsInput, CertificateServiceUpdateWithoutEligibilityItemsInput>, CertificateServiceUncheckedUpdateWithoutEligibilityItemsInput>
  }

  export type ContactServiceCreatetargetAudienceInput = {
    set: string[]
  }

  export type ContactServiceCreateeligibilityDetailsInput = {
    set: string[]
  }

  export type ContactServiceCreatecontactDetailsInput = {
    set: string[]
  }

  export type ContactServiceCreateprocessDetailsInput = {
    set: string[]
  }

  export type AdminCreateNestedOneWithoutContactServicesInput = {
    create?: XOR<AdminCreateWithoutContactServicesInput, AdminUncheckedCreateWithoutContactServicesInput>
    connectOrCreate?: AdminCreateOrConnectWithoutContactServicesInput
    connect?: AdminWhereUniqueInput
  }

  export type ContactServiceContactCreateNestedManyWithoutContactServiceInput = {
    create?: XOR<ContactServiceContactCreateWithoutContactServiceInput, ContactServiceContactUncheckedCreateWithoutContactServiceInput> | ContactServiceContactCreateWithoutContactServiceInput[] | ContactServiceContactUncheckedCreateWithoutContactServiceInput[]
    connectOrCreate?: ContactServiceContactCreateOrConnectWithoutContactServiceInput | ContactServiceContactCreateOrConnectWithoutContactServiceInput[]
    createMany?: ContactServiceContactCreateManyContactServiceInputEnvelope
    connect?: ContactServiceContactWhereUniqueInput | ContactServiceContactWhereUniqueInput[]
  }

  export type ContactServiceDocumentCreateNestedManyWithoutContactServiceInput = {
    create?: XOR<ContactServiceDocumentCreateWithoutContactServiceInput, ContactServiceDocumentUncheckedCreateWithoutContactServiceInput> | ContactServiceDocumentCreateWithoutContactServiceInput[] | ContactServiceDocumentUncheckedCreateWithoutContactServiceInput[]
    connectOrCreate?: ContactServiceDocumentCreateOrConnectWithoutContactServiceInput | ContactServiceDocumentCreateOrConnectWithoutContactServiceInput[]
    createMany?: ContactServiceDocumentCreateManyContactServiceInputEnvelope
    connect?: ContactServiceDocumentWhereUniqueInput | ContactServiceDocumentWhereUniqueInput[]
  }

  export type ContactServiceContactUncheckedCreateNestedManyWithoutContactServiceInput = {
    create?: XOR<ContactServiceContactCreateWithoutContactServiceInput, ContactServiceContactUncheckedCreateWithoutContactServiceInput> | ContactServiceContactCreateWithoutContactServiceInput[] | ContactServiceContactUncheckedCreateWithoutContactServiceInput[]
    connectOrCreate?: ContactServiceContactCreateOrConnectWithoutContactServiceInput | ContactServiceContactCreateOrConnectWithoutContactServiceInput[]
    createMany?: ContactServiceContactCreateManyContactServiceInputEnvelope
    connect?: ContactServiceContactWhereUniqueInput | ContactServiceContactWhereUniqueInput[]
  }

  export type ContactServiceDocumentUncheckedCreateNestedManyWithoutContactServiceInput = {
    create?: XOR<ContactServiceDocumentCreateWithoutContactServiceInput, ContactServiceDocumentUncheckedCreateWithoutContactServiceInput> | ContactServiceDocumentCreateWithoutContactServiceInput[] | ContactServiceDocumentUncheckedCreateWithoutContactServiceInput[]
    connectOrCreate?: ContactServiceDocumentCreateOrConnectWithoutContactServiceInput | ContactServiceDocumentCreateOrConnectWithoutContactServiceInput[]
    createMany?: ContactServiceDocumentCreateManyContactServiceInputEnvelope
    connect?: ContactServiceDocumentWhereUniqueInput | ContactServiceDocumentWhereUniqueInput[]
  }

  export type ContactServiceUpdatetargetAudienceInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ContactServiceUpdateeligibilityDetailsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ContactServiceUpdatecontactDetailsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ContactServiceUpdateprocessDetailsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AdminUpdateOneRequiredWithoutContactServicesNestedInput = {
    create?: XOR<AdminCreateWithoutContactServicesInput, AdminUncheckedCreateWithoutContactServicesInput>
    connectOrCreate?: AdminCreateOrConnectWithoutContactServicesInput
    upsert?: AdminUpsertWithoutContactServicesInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutContactServicesInput, AdminUpdateWithoutContactServicesInput>, AdminUncheckedUpdateWithoutContactServicesInput>
  }

  export type ContactServiceContactUpdateManyWithoutContactServiceNestedInput = {
    create?: XOR<ContactServiceContactCreateWithoutContactServiceInput, ContactServiceContactUncheckedCreateWithoutContactServiceInput> | ContactServiceContactCreateWithoutContactServiceInput[] | ContactServiceContactUncheckedCreateWithoutContactServiceInput[]
    connectOrCreate?: ContactServiceContactCreateOrConnectWithoutContactServiceInput | ContactServiceContactCreateOrConnectWithoutContactServiceInput[]
    upsert?: ContactServiceContactUpsertWithWhereUniqueWithoutContactServiceInput | ContactServiceContactUpsertWithWhereUniqueWithoutContactServiceInput[]
    createMany?: ContactServiceContactCreateManyContactServiceInputEnvelope
    set?: ContactServiceContactWhereUniqueInput | ContactServiceContactWhereUniqueInput[]
    disconnect?: ContactServiceContactWhereUniqueInput | ContactServiceContactWhereUniqueInput[]
    delete?: ContactServiceContactWhereUniqueInput | ContactServiceContactWhereUniqueInput[]
    connect?: ContactServiceContactWhereUniqueInput | ContactServiceContactWhereUniqueInput[]
    update?: ContactServiceContactUpdateWithWhereUniqueWithoutContactServiceInput | ContactServiceContactUpdateWithWhereUniqueWithoutContactServiceInput[]
    updateMany?: ContactServiceContactUpdateManyWithWhereWithoutContactServiceInput | ContactServiceContactUpdateManyWithWhereWithoutContactServiceInput[]
    deleteMany?: ContactServiceContactScalarWhereInput | ContactServiceContactScalarWhereInput[]
  }

  export type ContactServiceDocumentUpdateManyWithoutContactServiceNestedInput = {
    create?: XOR<ContactServiceDocumentCreateWithoutContactServiceInput, ContactServiceDocumentUncheckedCreateWithoutContactServiceInput> | ContactServiceDocumentCreateWithoutContactServiceInput[] | ContactServiceDocumentUncheckedCreateWithoutContactServiceInput[]
    connectOrCreate?: ContactServiceDocumentCreateOrConnectWithoutContactServiceInput | ContactServiceDocumentCreateOrConnectWithoutContactServiceInput[]
    upsert?: ContactServiceDocumentUpsertWithWhereUniqueWithoutContactServiceInput | ContactServiceDocumentUpsertWithWhereUniqueWithoutContactServiceInput[]
    createMany?: ContactServiceDocumentCreateManyContactServiceInputEnvelope
    set?: ContactServiceDocumentWhereUniqueInput | ContactServiceDocumentWhereUniqueInput[]
    disconnect?: ContactServiceDocumentWhereUniqueInput | ContactServiceDocumentWhereUniqueInput[]
    delete?: ContactServiceDocumentWhereUniqueInput | ContactServiceDocumentWhereUniqueInput[]
    connect?: ContactServiceDocumentWhereUniqueInput | ContactServiceDocumentWhereUniqueInput[]
    update?: ContactServiceDocumentUpdateWithWhereUniqueWithoutContactServiceInput | ContactServiceDocumentUpdateWithWhereUniqueWithoutContactServiceInput[]
    updateMany?: ContactServiceDocumentUpdateManyWithWhereWithoutContactServiceInput | ContactServiceDocumentUpdateManyWithWhereWithoutContactServiceInput[]
    deleteMany?: ContactServiceDocumentScalarWhereInput | ContactServiceDocumentScalarWhereInput[]
  }

  export type ContactServiceContactUncheckedUpdateManyWithoutContactServiceNestedInput = {
    create?: XOR<ContactServiceContactCreateWithoutContactServiceInput, ContactServiceContactUncheckedCreateWithoutContactServiceInput> | ContactServiceContactCreateWithoutContactServiceInput[] | ContactServiceContactUncheckedCreateWithoutContactServiceInput[]
    connectOrCreate?: ContactServiceContactCreateOrConnectWithoutContactServiceInput | ContactServiceContactCreateOrConnectWithoutContactServiceInput[]
    upsert?: ContactServiceContactUpsertWithWhereUniqueWithoutContactServiceInput | ContactServiceContactUpsertWithWhereUniqueWithoutContactServiceInput[]
    createMany?: ContactServiceContactCreateManyContactServiceInputEnvelope
    set?: ContactServiceContactWhereUniqueInput | ContactServiceContactWhereUniqueInput[]
    disconnect?: ContactServiceContactWhereUniqueInput | ContactServiceContactWhereUniqueInput[]
    delete?: ContactServiceContactWhereUniqueInput | ContactServiceContactWhereUniqueInput[]
    connect?: ContactServiceContactWhereUniqueInput | ContactServiceContactWhereUniqueInput[]
    update?: ContactServiceContactUpdateWithWhereUniqueWithoutContactServiceInput | ContactServiceContactUpdateWithWhereUniqueWithoutContactServiceInput[]
    updateMany?: ContactServiceContactUpdateManyWithWhereWithoutContactServiceInput | ContactServiceContactUpdateManyWithWhereWithoutContactServiceInput[]
    deleteMany?: ContactServiceContactScalarWhereInput | ContactServiceContactScalarWhereInput[]
  }

  export type ContactServiceDocumentUncheckedUpdateManyWithoutContactServiceNestedInput = {
    create?: XOR<ContactServiceDocumentCreateWithoutContactServiceInput, ContactServiceDocumentUncheckedCreateWithoutContactServiceInput> | ContactServiceDocumentCreateWithoutContactServiceInput[] | ContactServiceDocumentUncheckedCreateWithoutContactServiceInput[]
    connectOrCreate?: ContactServiceDocumentCreateOrConnectWithoutContactServiceInput | ContactServiceDocumentCreateOrConnectWithoutContactServiceInput[]
    upsert?: ContactServiceDocumentUpsertWithWhereUniqueWithoutContactServiceInput | ContactServiceDocumentUpsertWithWhereUniqueWithoutContactServiceInput[]
    createMany?: ContactServiceDocumentCreateManyContactServiceInputEnvelope
    set?: ContactServiceDocumentWhereUniqueInput | ContactServiceDocumentWhereUniqueInput[]
    disconnect?: ContactServiceDocumentWhereUniqueInput | ContactServiceDocumentWhereUniqueInput[]
    delete?: ContactServiceDocumentWhereUniqueInput | ContactServiceDocumentWhereUniqueInput[]
    connect?: ContactServiceDocumentWhereUniqueInput | ContactServiceDocumentWhereUniqueInput[]
    update?: ContactServiceDocumentUpdateWithWhereUniqueWithoutContactServiceInput | ContactServiceDocumentUpdateWithWhereUniqueWithoutContactServiceInput[]
    updateMany?: ContactServiceDocumentUpdateManyWithWhereWithoutContactServiceInput | ContactServiceDocumentUpdateManyWithWhereWithoutContactServiceInput[]
    deleteMany?: ContactServiceDocumentScalarWhereInput | ContactServiceDocumentScalarWhereInput[]
  }

  export type ContactServiceCreateNestedOneWithoutContactsInput = {
    create?: XOR<ContactServiceCreateWithoutContactsInput, ContactServiceUncheckedCreateWithoutContactsInput>
    connectOrCreate?: ContactServiceCreateOrConnectWithoutContactsInput
    connect?: ContactServiceWhereUniqueInput
  }

  export type PostCreateNestedManyWithoutOfficeInput = {
    create?: XOR<PostCreateWithoutOfficeInput, PostUncheckedCreateWithoutOfficeInput> | PostCreateWithoutOfficeInput[] | PostUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOfficeInput | PostCreateOrConnectWithoutOfficeInput[]
    createMany?: PostCreateManyOfficeInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutOfficeInput = {
    create?: XOR<PostCreateWithoutOfficeInput, PostUncheckedCreateWithoutOfficeInput> | PostCreateWithoutOfficeInput[] | PostUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOfficeInput | PostCreateOrConnectWithoutOfficeInput[]
    createMany?: PostCreateManyOfficeInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type ContactServiceUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<ContactServiceCreateWithoutContactsInput, ContactServiceUncheckedCreateWithoutContactsInput>
    connectOrCreate?: ContactServiceCreateOrConnectWithoutContactsInput
    upsert?: ContactServiceUpsertWithoutContactsInput
    connect?: ContactServiceWhereUniqueInput
    update?: XOR<XOR<ContactServiceUpdateToOneWithWhereWithoutContactsInput, ContactServiceUpdateWithoutContactsInput>, ContactServiceUncheckedUpdateWithoutContactsInput>
  }

  export type PostUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<PostCreateWithoutOfficeInput, PostUncheckedCreateWithoutOfficeInput> | PostCreateWithoutOfficeInput[] | PostUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOfficeInput | PostCreateOrConnectWithoutOfficeInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutOfficeInput | PostUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: PostCreateManyOfficeInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutOfficeInput | PostUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: PostUpdateManyWithWhereWithoutOfficeInput | PostUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<PostCreateWithoutOfficeInput, PostUncheckedCreateWithoutOfficeInput> | PostCreateWithoutOfficeInput[] | PostUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: PostCreateOrConnectWithoutOfficeInput | PostCreateOrConnectWithoutOfficeInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutOfficeInput | PostUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: PostCreateManyOfficeInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutOfficeInput | PostUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: PostUpdateManyWithWhereWithoutOfficeInput | PostUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type ContactServiceCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ContactServiceCreateWithoutDocumentsInput, ContactServiceUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ContactServiceCreateOrConnectWithoutDocumentsInput
    connect?: ContactServiceWhereUniqueInput
  }

  export type ContactServiceUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<ContactServiceCreateWithoutDocumentsInput, ContactServiceUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ContactServiceCreateOrConnectWithoutDocumentsInput
    upsert?: ContactServiceUpsertWithoutDocumentsInput
    connect?: ContactServiceWhereUniqueInput
    update?: XOR<XOR<ContactServiceUpdateToOneWithWhereWithoutDocumentsInput, ContactServiceUpdateWithoutDocumentsInput>, ContactServiceUncheckedUpdateWithoutDocumentsInput>
  }

  export type ContactServiceContactCreateNestedOneWithoutPostsInput = {
    create?: XOR<ContactServiceContactCreateWithoutPostsInput, ContactServiceContactUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ContactServiceContactCreateOrConnectWithoutPostsInput
    connect?: ContactServiceContactWhereUniqueInput
  }

  export type EmployeeCreateNestedManyWithoutPostInput = {
    create?: XOR<EmployeeCreateWithoutPostInput, EmployeeUncheckedCreateWithoutPostInput> | EmployeeCreateWithoutPostInput[] | EmployeeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutPostInput | EmployeeCreateOrConnectWithoutPostInput[]
    createMany?: EmployeeCreateManyPostInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<EmployeeCreateWithoutPostInput, EmployeeUncheckedCreateWithoutPostInput> | EmployeeCreateWithoutPostInput[] | EmployeeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutPostInput | EmployeeCreateOrConnectWithoutPostInput[]
    createMany?: EmployeeCreateManyPostInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type ContactServiceContactUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<ContactServiceContactCreateWithoutPostsInput, ContactServiceContactUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ContactServiceContactCreateOrConnectWithoutPostsInput
    upsert?: ContactServiceContactUpsertWithoutPostsInput
    connect?: ContactServiceContactWhereUniqueInput
    update?: XOR<XOR<ContactServiceContactUpdateToOneWithWhereWithoutPostsInput, ContactServiceContactUpdateWithoutPostsInput>, ContactServiceContactUncheckedUpdateWithoutPostsInput>
  }

  export type EmployeeUpdateManyWithoutPostNestedInput = {
    create?: XOR<EmployeeCreateWithoutPostInput, EmployeeUncheckedCreateWithoutPostInput> | EmployeeCreateWithoutPostInput[] | EmployeeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutPostInput | EmployeeCreateOrConnectWithoutPostInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutPostInput | EmployeeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: EmployeeCreateManyPostInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutPostInput | EmployeeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutPostInput | EmployeeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<EmployeeCreateWithoutPostInput, EmployeeUncheckedCreateWithoutPostInput> | EmployeeCreateWithoutPostInput[] | EmployeeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutPostInput | EmployeeCreateOrConnectWithoutPostInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutPostInput | EmployeeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: EmployeeCreateManyPostInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutPostInput | EmployeeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutPostInput | EmployeeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type PostCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<PostCreateWithoutEmployeesInput, PostUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: PostCreateOrConnectWithoutEmployeesInput
    connect?: PostWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PostUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<PostCreateWithoutEmployeesInput, PostUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: PostCreateOrConnectWithoutEmployeesInput
    upsert?: PostUpsertWithoutEmployeesInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutEmployeesInput, PostUpdateWithoutEmployeesInput>, PostUncheckedUpdateWithoutEmployeesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GrievanceCreateattachmentsInput = {
    set: string[]
  }

  export type GrievanceUpdateattachmentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SchemeServiceCreateWithoutAdminInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: SchemeServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: SchemeServiceCreateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceCreateschemeDetailsInput | string[]
    processDetails?: SchemeServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: ContactPersonCreateNestedManyWithoutSchemeServiceInput
    documents?: SupportiveDocumentCreateNestedManyWithoutSchemeServiceInput
  }

  export type SchemeServiceUncheckedCreateWithoutAdminInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: SchemeServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: SchemeServiceCreateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceCreateschemeDetailsInput | string[]
    processDetails?: SchemeServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: ContactPersonUncheckedCreateNestedManyWithoutSchemeServiceInput
    documents?: SupportiveDocumentUncheckedCreateNestedManyWithoutSchemeServiceInput
  }

  export type SchemeServiceCreateOrConnectWithoutAdminInput = {
    where: SchemeServiceWhereUniqueInput
    create: XOR<SchemeServiceCreateWithoutAdminInput, SchemeServiceUncheckedCreateWithoutAdminInput>
  }

  export type SchemeServiceCreateManyAdminInputEnvelope = {
    data: SchemeServiceCreateManyAdminInput | SchemeServiceCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type CertificateServiceCreateWithoutAdminInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: CertificateContactCreateNestedManyWithoutCertificateServiceInput
    documents?: CertificateDocumentCreateNestedManyWithoutCertificateServiceInput
    processSteps?: CertificateProcessStepCreateNestedManyWithoutCertificateServiceInput
    eligibilityItems?: CertificateEligibilityCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceUncheckedCreateWithoutAdminInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: CertificateContactUncheckedCreateNestedManyWithoutCertificateServiceInput
    documents?: CertificateDocumentUncheckedCreateNestedManyWithoutCertificateServiceInput
    processSteps?: CertificateProcessStepUncheckedCreateNestedManyWithoutCertificateServiceInput
    eligibilityItems?: CertificateEligibilityUncheckedCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceCreateOrConnectWithoutAdminInput = {
    where: CertificateServiceWhereUniqueInput
    create: XOR<CertificateServiceCreateWithoutAdminInput, CertificateServiceUncheckedCreateWithoutAdminInput>
  }

  export type CertificateServiceCreateManyAdminInputEnvelope = {
    data: CertificateServiceCreateManyAdminInput | CertificateServiceCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type ContactServiceCreateWithoutAdminInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: ContactServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: ContactServiceCreateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceCreatecontactDetailsInput | string[]
    processDetails?: ContactServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: ContactServiceContactCreateNestedManyWithoutContactServiceInput
    documents?: ContactServiceDocumentCreateNestedManyWithoutContactServiceInput
  }

  export type ContactServiceUncheckedCreateWithoutAdminInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: ContactServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: ContactServiceCreateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceCreatecontactDetailsInput | string[]
    processDetails?: ContactServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: ContactServiceContactUncheckedCreateNestedManyWithoutContactServiceInput
    documents?: ContactServiceDocumentUncheckedCreateNestedManyWithoutContactServiceInput
  }

  export type ContactServiceCreateOrConnectWithoutAdminInput = {
    where: ContactServiceWhereUniqueInput
    create: XOR<ContactServiceCreateWithoutAdminInput, ContactServiceUncheckedCreateWithoutAdminInput>
  }

  export type ContactServiceCreateManyAdminInputEnvelope = {
    data: ContactServiceCreateManyAdminInput | ContactServiceCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type SchemeServiceUpsertWithWhereUniqueWithoutAdminInput = {
    where: SchemeServiceWhereUniqueInput
    update: XOR<SchemeServiceUpdateWithoutAdminInput, SchemeServiceUncheckedUpdateWithoutAdminInput>
    create: XOR<SchemeServiceCreateWithoutAdminInput, SchemeServiceUncheckedCreateWithoutAdminInput>
  }

  export type SchemeServiceUpdateWithWhereUniqueWithoutAdminInput = {
    where: SchemeServiceWhereUniqueInput
    data: XOR<SchemeServiceUpdateWithoutAdminInput, SchemeServiceUncheckedUpdateWithoutAdminInput>
  }

  export type SchemeServiceUpdateManyWithWhereWithoutAdminInput = {
    where: SchemeServiceScalarWhereInput
    data: XOR<SchemeServiceUpdateManyMutationInput, SchemeServiceUncheckedUpdateManyWithoutAdminInput>
  }

  export type SchemeServiceScalarWhereInput = {
    AND?: SchemeServiceScalarWhereInput | SchemeServiceScalarWhereInput[]
    OR?: SchemeServiceScalarWhereInput[]
    NOT?: SchemeServiceScalarWhereInput | SchemeServiceScalarWhereInput[]
    id?: IntFilter<"SchemeService"> | number
    name?: StringFilter<"SchemeService"> | string
    summary?: StringFilter<"SchemeService"> | string
    type?: StringNullableFilter<"SchemeService"> | string | null
    targetAudience?: StringNullableListFilter<"SchemeService">
    applicationMode?: StringFilter<"SchemeService"> | string
    onlineUrl?: StringNullableFilter<"SchemeService"> | string | null
    offlineAddress?: StringNullableFilter<"SchemeService"> | string | null
    status?: StringFilter<"SchemeService"> | string
    isActive?: BoolFilter<"SchemeService"> | boolean
    createdAt?: DateTimeFilter<"SchemeService"> | Date | string
    updatedAt?: DateTimeFilter<"SchemeService"> | Date | string
    adminId?: IntFilter<"SchemeService"> | number
    eligibilityDetails?: StringNullableListFilter<"SchemeService">
    schemeDetails?: StringNullableListFilter<"SchemeService">
    processDetails?: StringNullableListFilter<"SchemeService">
    processNew?: StringNullableFilter<"SchemeService"> | string | null
    processUpdate?: StringNullableFilter<"SchemeService"> | string | null
    processLost?: StringNullableFilter<"SchemeService"> | string | null
    processSurrender?: StringNullableFilter<"SchemeService"> | string | null
    docNew?: StringNullableFilter<"SchemeService"> | string | null
    docUpdate?: StringNullableFilter<"SchemeService"> | string | null
    docLost?: StringNullableFilter<"SchemeService"> | string | null
    docSurrender?: StringNullableFilter<"SchemeService"> | string | null
  }

  export type CertificateServiceUpsertWithWhereUniqueWithoutAdminInput = {
    where: CertificateServiceWhereUniqueInput
    update: XOR<CertificateServiceUpdateWithoutAdminInput, CertificateServiceUncheckedUpdateWithoutAdminInput>
    create: XOR<CertificateServiceCreateWithoutAdminInput, CertificateServiceUncheckedCreateWithoutAdminInput>
  }

  export type CertificateServiceUpdateWithWhereUniqueWithoutAdminInput = {
    where: CertificateServiceWhereUniqueInput
    data: XOR<CertificateServiceUpdateWithoutAdminInput, CertificateServiceUncheckedUpdateWithoutAdminInput>
  }

  export type CertificateServiceUpdateManyWithWhereWithoutAdminInput = {
    where: CertificateServiceScalarWhereInput
    data: XOR<CertificateServiceUpdateManyMutationInput, CertificateServiceUncheckedUpdateManyWithoutAdminInput>
  }

  export type CertificateServiceScalarWhereInput = {
    AND?: CertificateServiceScalarWhereInput | CertificateServiceScalarWhereInput[]
    OR?: CertificateServiceScalarWhereInput[]
    NOT?: CertificateServiceScalarWhereInput | CertificateServiceScalarWhereInput[]
    id?: IntFilter<"CertificateService"> | number
    name?: StringFilter<"CertificateService"> | string
    summary?: StringFilter<"CertificateService"> | string
    type?: StringNullableFilter<"CertificateService"> | string | null
    targetAudience?: StringNullableListFilter<"CertificateService">
    applicationMode?: StringFilter<"CertificateService"> | string
    onlineUrl?: StringNullableFilter<"CertificateService"> | string | null
    offlineAddress?: StringNullableFilter<"CertificateService"> | string | null
    status?: StringFilter<"CertificateService"> | string
    isActive?: BoolFilter<"CertificateService"> | boolean
    createdAt?: DateTimeFilter<"CertificateService"> | Date | string
    updatedAt?: DateTimeFilter<"CertificateService"> | Date | string
    adminId?: IntFilter<"CertificateService"> | number
    eligibilityDetails?: StringNullableListFilter<"CertificateService">
    certificateDetails?: StringNullableListFilter<"CertificateService">
    processDetails?: StringNullableListFilter<"CertificateService">
    processNew?: StringNullableFilter<"CertificateService"> | string | null
    processUpdate?: StringNullableFilter<"CertificateService"> | string | null
    processLost?: StringNullableFilter<"CertificateService"> | string | null
    processSurrender?: StringNullableFilter<"CertificateService"> | string | null
    docNew?: StringNullableFilter<"CertificateService"> | string | null
    docUpdate?: StringNullableFilter<"CertificateService"> | string | null
    docLost?: StringNullableFilter<"CertificateService"> | string | null
    docSurrender?: StringNullableFilter<"CertificateService"> | string | null
  }

  export type ContactServiceUpsertWithWhereUniqueWithoutAdminInput = {
    where: ContactServiceWhereUniqueInput
    update: XOR<ContactServiceUpdateWithoutAdminInput, ContactServiceUncheckedUpdateWithoutAdminInput>
    create: XOR<ContactServiceCreateWithoutAdminInput, ContactServiceUncheckedCreateWithoutAdminInput>
  }

  export type ContactServiceUpdateWithWhereUniqueWithoutAdminInput = {
    where: ContactServiceWhereUniqueInput
    data: XOR<ContactServiceUpdateWithoutAdminInput, ContactServiceUncheckedUpdateWithoutAdminInput>
  }

  export type ContactServiceUpdateManyWithWhereWithoutAdminInput = {
    where: ContactServiceScalarWhereInput
    data: XOR<ContactServiceUpdateManyMutationInput, ContactServiceUncheckedUpdateManyWithoutAdminInput>
  }

  export type ContactServiceScalarWhereInput = {
    AND?: ContactServiceScalarWhereInput | ContactServiceScalarWhereInput[]
    OR?: ContactServiceScalarWhereInput[]
    NOT?: ContactServiceScalarWhereInput | ContactServiceScalarWhereInput[]
    id?: IntFilter<"ContactService"> | number
    name?: StringFilter<"ContactService"> | string
    summary?: StringFilter<"ContactService"> | string
    type?: StringNullableFilter<"ContactService"> | string | null
    targetAudience?: StringNullableListFilter<"ContactService">
    applicationMode?: StringFilter<"ContactService"> | string
    onlineUrl?: StringNullableFilter<"ContactService"> | string | null
    offlineAddress?: StringNullableFilter<"ContactService"> | string | null
    status?: StringFilter<"ContactService"> | string
    isActive?: BoolFilter<"ContactService"> | boolean
    createdAt?: DateTimeFilter<"ContactService"> | Date | string
    updatedAt?: DateTimeFilter<"ContactService"> | Date | string
    adminId?: IntFilter<"ContactService"> | number
    eligibilityDetails?: StringNullableListFilter<"ContactService">
    contactDetails?: StringNullableListFilter<"ContactService">
    processDetails?: StringNullableListFilter<"ContactService">
    processNew?: StringNullableFilter<"ContactService"> | string | null
    processUpdate?: StringNullableFilter<"ContactService"> | string | null
    processLost?: StringNullableFilter<"ContactService"> | string | null
    processSurrender?: StringNullableFilter<"ContactService"> | string | null
    docNew?: StringNullableFilter<"ContactService"> | string | null
    docUpdate?: StringNullableFilter<"ContactService"> | string | null
    docLost?: StringNullableFilter<"ContactService"> | string | null
    docSurrender?: StringNullableFilter<"ContactService"> | string | null
  }

  export type AdminCreateWithoutSchemeServicesInput = {
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    certificateServices?: CertificateServiceCreateNestedManyWithoutAdminInput
    contactServices?: ContactServiceCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutSchemeServicesInput = {
    id?: number
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    certificateServices?: CertificateServiceUncheckedCreateNestedManyWithoutAdminInput
    contactServices?: ContactServiceUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutSchemeServicesInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutSchemeServicesInput, AdminUncheckedCreateWithoutSchemeServicesInput>
  }

  export type ContactPersonCreateWithoutSchemeServiceInput = {
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
  }

  export type ContactPersonUncheckedCreateWithoutSchemeServiceInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
  }

  export type ContactPersonCreateOrConnectWithoutSchemeServiceInput = {
    where: ContactPersonWhereUniqueInput
    create: XOR<ContactPersonCreateWithoutSchemeServiceInput, ContactPersonUncheckedCreateWithoutSchemeServiceInput>
  }

  export type ContactPersonCreateManySchemeServiceInputEnvelope = {
    data: ContactPersonCreateManySchemeServiceInput | ContactPersonCreateManySchemeServiceInput[]
    skipDuplicates?: boolean
  }

  export type SupportiveDocumentCreateWithoutSchemeServiceInput = {
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
  }

  export type SupportiveDocumentUncheckedCreateWithoutSchemeServiceInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
  }

  export type SupportiveDocumentCreateOrConnectWithoutSchemeServiceInput = {
    where: SupportiveDocumentWhereUniqueInput
    create: XOR<SupportiveDocumentCreateWithoutSchemeServiceInput, SupportiveDocumentUncheckedCreateWithoutSchemeServiceInput>
  }

  export type SupportiveDocumentCreateManySchemeServiceInputEnvelope = {
    data: SupportiveDocumentCreateManySchemeServiceInput | SupportiveDocumentCreateManySchemeServiceInput[]
    skipDuplicates?: boolean
  }

  export type AdminUpsertWithoutSchemeServicesInput = {
    update: XOR<AdminUpdateWithoutSchemeServicesInput, AdminUncheckedUpdateWithoutSchemeServicesInput>
    create: XOR<AdminCreateWithoutSchemeServicesInput, AdminUncheckedCreateWithoutSchemeServicesInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutSchemeServicesInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutSchemeServicesInput, AdminUncheckedUpdateWithoutSchemeServicesInput>
  }

  export type AdminUpdateWithoutSchemeServicesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certificateServices?: CertificateServiceUpdateManyWithoutAdminNestedInput
    contactServices?: ContactServiceUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutSchemeServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    certificateServices?: CertificateServiceUncheckedUpdateManyWithoutAdminNestedInput
    contactServices?: ContactServiceUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type ContactPersonUpsertWithWhereUniqueWithoutSchemeServiceInput = {
    where: ContactPersonWhereUniqueInput
    update: XOR<ContactPersonUpdateWithoutSchemeServiceInput, ContactPersonUncheckedUpdateWithoutSchemeServiceInput>
    create: XOR<ContactPersonCreateWithoutSchemeServiceInput, ContactPersonUncheckedCreateWithoutSchemeServiceInput>
  }

  export type ContactPersonUpdateWithWhereUniqueWithoutSchemeServiceInput = {
    where: ContactPersonWhereUniqueInput
    data: XOR<ContactPersonUpdateWithoutSchemeServiceInput, ContactPersonUncheckedUpdateWithoutSchemeServiceInput>
  }

  export type ContactPersonUpdateManyWithWhereWithoutSchemeServiceInput = {
    where: ContactPersonScalarWhereInput
    data: XOR<ContactPersonUpdateManyMutationInput, ContactPersonUncheckedUpdateManyWithoutSchemeServiceInput>
  }

  export type ContactPersonScalarWhereInput = {
    AND?: ContactPersonScalarWhereInput | ContactPersonScalarWhereInput[]
    OR?: ContactPersonScalarWhereInput[]
    NOT?: ContactPersonScalarWhereInput | ContactPersonScalarWhereInput[]
    id?: IntFilter<"ContactPerson"> | number
    serviceName?: StringFilter<"ContactPerson"> | string
    district?: StringFilter<"ContactPerson"> | string
    subDistrict?: StringFilter<"ContactPerson"> | string
    block?: StringFilter<"ContactPerson"> | string
    name?: StringFilter<"ContactPerson"> | string
    designation?: StringFilter<"ContactPerson"> | string
    contact?: StringFilter<"ContactPerson"> | string
    email?: StringFilter<"ContactPerson"> | string
    schemeServiceId?: IntFilter<"ContactPerson"> | number
  }

  export type SupportiveDocumentUpsertWithWhereUniqueWithoutSchemeServiceInput = {
    where: SupportiveDocumentWhereUniqueInput
    update: XOR<SupportiveDocumentUpdateWithoutSchemeServiceInput, SupportiveDocumentUncheckedUpdateWithoutSchemeServiceInput>
    create: XOR<SupportiveDocumentCreateWithoutSchemeServiceInput, SupportiveDocumentUncheckedCreateWithoutSchemeServiceInput>
  }

  export type SupportiveDocumentUpdateWithWhereUniqueWithoutSchemeServiceInput = {
    where: SupportiveDocumentWhereUniqueInput
    data: XOR<SupportiveDocumentUpdateWithoutSchemeServiceInput, SupportiveDocumentUncheckedUpdateWithoutSchemeServiceInput>
  }

  export type SupportiveDocumentUpdateManyWithWhereWithoutSchemeServiceInput = {
    where: SupportiveDocumentScalarWhereInput
    data: XOR<SupportiveDocumentUpdateManyMutationInput, SupportiveDocumentUncheckedUpdateManyWithoutSchemeServiceInput>
  }

  export type SupportiveDocumentScalarWhereInput = {
    AND?: SupportiveDocumentScalarWhereInput | SupportiveDocumentScalarWhereInput[]
    OR?: SupportiveDocumentScalarWhereInput[]
    NOT?: SupportiveDocumentScalarWhereInput | SupportiveDocumentScalarWhereInput[]
    id?: IntFilter<"SupportiveDocument"> | number
    slNo?: IntFilter<"SupportiveDocument"> | number
    documentType?: StringFilter<"SupportiveDocument"> | string
    validProof?: StringFilter<"SupportiveDocument"> | string
    isRequired?: BoolFilter<"SupportiveDocument"> | boolean
    schemeServiceId?: IntFilter<"SupportiveDocument"> | number
  }

  export type SchemeServiceCreateWithoutContactsInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: SchemeServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: SchemeServiceCreateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceCreateschemeDetailsInput | string[]
    processDetails?: SchemeServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    admin: AdminCreateNestedOneWithoutSchemeServicesInput
    documents?: SupportiveDocumentCreateNestedManyWithoutSchemeServiceInput
  }

  export type SchemeServiceUncheckedCreateWithoutContactsInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: SchemeServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: SchemeServiceCreateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceCreateschemeDetailsInput | string[]
    processDetails?: SchemeServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    documents?: SupportiveDocumentUncheckedCreateNestedManyWithoutSchemeServiceInput
  }

  export type SchemeServiceCreateOrConnectWithoutContactsInput = {
    where: SchemeServiceWhereUniqueInput
    create: XOR<SchemeServiceCreateWithoutContactsInput, SchemeServiceUncheckedCreateWithoutContactsInput>
  }

  export type SchemeServiceUpsertWithoutContactsInput = {
    update: XOR<SchemeServiceUpdateWithoutContactsInput, SchemeServiceUncheckedUpdateWithoutContactsInput>
    create: XOR<SchemeServiceCreateWithoutContactsInput, SchemeServiceUncheckedCreateWithoutContactsInput>
    where?: SchemeServiceWhereInput
  }

  export type SchemeServiceUpdateToOneWithWhereWithoutContactsInput = {
    where?: SchemeServiceWhereInput
    data: XOR<SchemeServiceUpdateWithoutContactsInput, SchemeServiceUncheckedUpdateWithoutContactsInput>
  }

  export type SchemeServiceUpdateWithoutContactsInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: SchemeServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: SchemeServiceUpdateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceUpdateschemeDetailsInput | string[]
    processDetails?: SchemeServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneRequiredWithoutSchemeServicesNestedInput
    documents?: SupportiveDocumentUpdateManyWithoutSchemeServiceNestedInput
  }

  export type SchemeServiceUncheckedUpdateWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: SchemeServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: SchemeServiceUpdateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceUpdateschemeDetailsInput | string[]
    processDetails?: SchemeServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: SupportiveDocumentUncheckedUpdateManyWithoutSchemeServiceNestedInput
  }

  export type SchemeServiceCreateWithoutDocumentsInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: SchemeServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: SchemeServiceCreateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceCreateschemeDetailsInput | string[]
    processDetails?: SchemeServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    admin: AdminCreateNestedOneWithoutSchemeServicesInput
    contacts?: ContactPersonCreateNestedManyWithoutSchemeServiceInput
  }

  export type SchemeServiceUncheckedCreateWithoutDocumentsInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: SchemeServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: SchemeServiceCreateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceCreateschemeDetailsInput | string[]
    processDetails?: SchemeServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: ContactPersonUncheckedCreateNestedManyWithoutSchemeServiceInput
  }

  export type SchemeServiceCreateOrConnectWithoutDocumentsInput = {
    where: SchemeServiceWhereUniqueInput
    create: XOR<SchemeServiceCreateWithoutDocumentsInput, SchemeServiceUncheckedCreateWithoutDocumentsInput>
  }

  export type SchemeServiceUpsertWithoutDocumentsInput = {
    update: XOR<SchemeServiceUpdateWithoutDocumentsInput, SchemeServiceUncheckedUpdateWithoutDocumentsInput>
    create: XOR<SchemeServiceCreateWithoutDocumentsInput, SchemeServiceUncheckedCreateWithoutDocumentsInput>
    where?: SchemeServiceWhereInput
  }

  export type SchemeServiceUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: SchemeServiceWhereInput
    data: XOR<SchemeServiceUpdateWithoutDocumentsInput, SchemeServiceUncheckedUpdateWithoutDocumentsInput>
  }

  export type SchemeServiceUpdateWithoutDocumentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: SchemeServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: SchemeServiceUpdateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceUpdateschemeDetailsInput | string[]
    processDetails?: SchemeServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneRequiredWithoutSchemeServicesNestedInput
    contacts?: ContactPersonUpdateManyWithoutSchemeServiceNestedInput
  }

  export type SchemeServiceUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: SchemeServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: SchemeServiceUpdateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceUpdateschemeDetailsInput | string[]
    processDetails?: SchemeServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactPersonUncheckedUpdateManyWithoutSchemeServiceNestedInput
  }

  export type AdminCreateWithoutCertificateServicesInput = {
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    schemeServices?: SchemeServiceCreateNestedManyWithoutAdminInput
    contactServices?: ContactServiceCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutCertificateServicesInput = {
    id?: number
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    schemeServices?: SchemeServiceUncheckedCreateNestedManyWithoutAdminInput
    contactServices?: ContactServiceUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutCertificateServicesInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutCertificateServicesInput, AdminUncheckedCreateWithoutCertificateServicesInput>
  }

  export type CertificateContactCreateWithoutCertificateServiceInput = {
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    applicationType?: string
  }

  export type CertificateContactUncheckedCreateWithoutCertificateServiceInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    applicationType?: string
  }

  export type CertificateContactCreateOrConnectWithoutCertificateServiceInput = {
    where: CertificateContactWhereUniqueInput
    create: XOR<CertificateContactCreateWithoutCertificateServiceInput, CertificateContactUncheckedCreateWithoutCertificateServiceInput>
  }

  export type CertificateContactCreateManyCertificateServiceInputEnvelope = {
    data: CertificateContactCreateManyCertificateServiceInput | CertificateContactCreateManyCertificateServiceInput[]
    skipDuplicates?: boolean
  }

  export type CertificateDocumentCreateWithoutCertificateServiceInput = {
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    applicationType?: string
  }

  export type CertificateDocumentUncheckedCreateWithoutCertificateServiceInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    applicationType?: string
  }

  export type CertificateDocumentCreateOrConnectWithoutCertificateServiceInput = {
    where: CertificateDocumentWhereUniqueInput
    create: XOR<CertificateDocumentCreateWithoutCertificateServiceInput, CertificateDocumentUncheckedCreateWithoutCertificateServiceInput>
  }

  export type CertificateDocumentCreateManyCertificateServiceInputEnvelope = {
    data: CertificateDocumentCreateManyCertificateServiceInput | CertificateDocumentCreateManyCertificateServiceInput[]
    skipDuplicates?: boolean
  }

  export type CertificateProcessStepCreateWithoutCertificateServiceInput = {
    slNo: number
    stepDetails: string
    applicationType?: string
  }

  export type CertificateProcessStepUncheckedCreateWithoutCertificateServiceInput = {
    id?: number
    slNo: number
    stepDetails: string
    applicationType?: string
  }

  export type CertificateProcessStepCreateOrConnectWithoutCertificateServiceInput = {
    where: CertificateProcessStepWhereUniqueInput
    create: XOR<CertificateProcessStepCreateWithoutCertificateServiceInput, CertificateProcessStepUncheckedCreateWithoutCertificateServiceInput>
  }

  export type CertificateProcessStepCreateManyCertificateServiceInputEnvelope = {
    data: CertificateProcessStepCreateManyCertificateServiceInput | CertificateProcessStepCreateManyCertificateServiceInput[]
    skipDuplicates?: boolean
  }

  export type CertificateEligibilityCreateWithoutCertificateServiceInput = {
    eligibilityDetail: string
    applicationType?: string
  }

  export type CertificateEligibilityUncheckedCreateWithoutCertificateServiceInput = {
    id?: number
    eligibilityDetail: string
    applicationType?: string
  }

  export type CertificateEligibilityCreateOrConnectWithoutCertificateServiceInput = {
    where: CertificateEligibilityWhereUniqueInput
    create: XOR<CertificateEligibilityCreateWithoutCertificateServiceInput, CertificateEligibilityUncheckedCreateWithoutCertificateServiceInput>
  }

  export type CertificateEligibilityCreateManyCertificateServiceInputEnvelope = {
    data: CertificateEligibilityCreateManyCertificateServiceInput | CertificateEligibilityCreateManyCertificateServiceInput[]
    skipDuplicates?: boolean
  }

  export type AdminUpsertWithoutCertificateServicesInput = {
    update: XOR<AdminUpdateWithoutCertificateServicesInput, AdminUncheckedUpdateWithoutCertificateServicesInput>
    create: XOR<AdminCreateWithoutCertificateServicesInput, AdminUncheckedCreateWithoutCertificateServicesInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutCertificateServicesInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutCertificateServicesInput, AdminUncheckedUpdateWithoutCertificateServicesInput>
  }

  export type AdminUpdateWithoutCertificateServicesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemeServices?: SchemeServiceUpdateManyWithoutAdminNestedInput
    contactServices?: ContactServiceUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutCertificateServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemeServices?: SchemeServiceUncheckedUpdateManyWithoutAdminNestedInput
    contactServices?: ContactServiceUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type CertificateContactUpsertWithWhereUniqueWithoutCertificateServiceInput = {
    where: CertificateContactWhereUniqueInput
    update: XOR<CertificateContactUpdateWithoutCertificateServiceInput, CertificateContactUncheckedUpdateWithoutCertificateServiceInput>
    create: XOR<CertificateContactCreateWithoutCertificateServiceInput, CertificateContactUncheckedCreateWithoutCertificateServiceInput>
  }

  export type CertificateContactUpdateWithWhereUniqueWithoutCertificateServiceInput = {
    where: CertificateContactWhereUniqueInput
    data: XOR<CertificateContactUpdateWithoutCertificateServiceInput, CertificateContactUncheckedUpdateWithoutCertificateServiceInput>
  }

  export type CertificateContactUpdateManyWithWhereWithoutCertificateServiceInput = {
    where: CertificateContactScalarWhereInput
    data: XOR<CertificateContactUpdateManyMutationInput, CertificateContactUncheckedUpdateManyWithoutCertificateServiceInput>
  }

  export type CertificateContactScalarWhereInput = {
    AND?: CertificateContactScalarWhereInput | CertificateContactScalarWhereInput[]
    OR?: CertificateContactScalarWhereInput[]
    NOT?: CertificateContactScalarWhereInput | CertificateContactScalarWhereInput[]
    id?: IntFilter<"CertificateContact"> | number
    serviceName?: StringFilter<"CertificateContact"> | string
    district?: StringFilter<"CertificateContact"> | string
    subDistrict?: StringFilter<"CertificateContact"> | string
    block?: StringFilter<"CertificateContact"> | string
    name?: StringFilter<"CertificateContact"> | string
    designation?: StringFilter<"CertificateContact"> | string
    contact?: StringFilter<"CertificateContact"> | string
    email?: StringFilter<"CertificateContact"> | string
    applicationType?: StringFilter<"CertificateContact"> | string
    certificateServiceId?: IntFilter<"CertificateContact"> | number
  }

  export type CertificateDocumentUpsertWithWhereUniqueWithoutCertificateServiceInput = {
    where: CertificateDocumentWhereUniqueInput
    update: XOR<CertificateDocumentUpdateWithoutCertificateServiceInput, CertificateDocumentUncheckedUpdateWithoutCertificateServiceInput>
    create: XOR<CertificateDocumentCreateWithoutCertificateServiceInput, CertificateDocumentUncheckedCreateWithoutCertificateServiceInput>
  }

  export type CertificateDocumentUpdateWithWhereUniqueWithoutCertificateServiceInput = {
    where: CertificateDocumentWhereUniqueInput
    data: XOR<CertificateDocumentUpdateWithoutCertificateServiceInput, CertificateDocumentUncheckedUpdateWithoutCertificateServiceInput>
  }

  export type CertificateDocumentUpdateManyWithWhereWithoutCertificateServiceInput = {
    where: CertificateDocumentScalarWhereInput
    data: XOR<CertificateDocumentUpdateManyMutationInput, CertificateDocumentUncheckedUpdateManyWithoutCertificateServiceInput>
  }

  export type CertificateDocumentScalarWhereInput = {
    AND?: CertificateDocumentScalarWhereInput | CertificateDocumentScalarWhereInput[]
    OR?: CertificateDocumentScalarWhereInput[]
    NOT?: CertificateDocumentScalarWhereInput | CertificateDocumentScalarWhereInput[]
    id?: IntFilter<"CertificateDocument"> | number
    slNo?: IntFilter<"CertificateDocument"> | number
    documentType?: StringFilter<"CertificateDocument"> | string
    validProof?: StringFilter<"CertificateDocument"> | string
    isRequired?: BoolFilter<"CertificateDocument"> | boolean
    applicationType?: StringFilter<"CertificateDocument"> | string
    certificateServiceId?: IntFilter<"CertificateDocument"> | number
  }

  export type CertificateProcessStepUpsertWithWhereUniqueWithoutCertificateServiceInput = {
    where: CertificateProcessStepWhereUniqueInput
    update: XOR<CertificateProcessStepUpdateWithoutCertificateServiceInput, CertificateProcessStepUncheckedUpdateWithoutCertificateServiceInput>
    create: XOR<CertificateProcessStepCreateWithoutCertificateServiceInput, CertificateProcessStepUncheckedCreateWithoutCertificateServiceInput>
  }

  export type CertificateProcessStepUpdateWithWhereUniqueWithoutCertificateServiceInput = {
    where: CertificateProcessStepWhereUniqueInput
    data: XOR<CertificateProcessStepUpdateWithoutCertificateServiceInput, CertificateProcessStepUncheckedUpdateWithoutCertificateServiceInput>
  }

  export type CertificateProcessStepUpdateManyWithWhereWithoutCertificateServiceInput = {
    where: CertificateProcessStepScalarWhereInput
    data: XOR<CertificateProcessStepUpdateManyMutationInput, CertificateProcessStepUncheckedUpdateManyWithoutCertificateServiceInput>
  }

  export type CertificateProcessStepScalarWhereInput = {
    AND?: CertificateProcessStepScalarWhereInput | CertificateProcessStepScalarWhereInput[]
    OR?: CertificateProcessStepScalarWhereInput[]
    NOT?: CertificateProcessStepScalarWhereInput | CertificateProcessStepScalarWhereInput[]
    id?: IntFilter<"CertificateProcessStep"> | number
    slNo?: IntFilter<"CertificateProcessStep"> | number
    stepDetails?: StringFilter<"CertificateProcessStep"> | string
    applicationType?: StringFilter<"CertificateProcessStep"> | string
    certificateServiceId?: IntFilter<"CertificateProcessStep"> | number
  }

  export type CertificateEligibilityUpsertWithWhereUniqueWithoutCertificateServiceInput = {
    where: CertificateEligibilityWhereUniqueInput
    update: XOR<CertificateEligibilityUpdateWithoutCertificateServiceInput, CertificateEligibilityUncheckedUpdateWithoutCertificateServiceInput>
    create: XOR<CertificateEligibilityCreateWithoutCertificateServiceInput, CertificateEligibilityUncheckedCreateWithoutCertificateServiceInput>
  }

  export type CertificateEligibilityUpdateWithWhereUniqueWithoutCertificateServiceInput = {
    where: CertificateEligibilityWhereUniqueInput
    data: XOR<CertificateEligibilityUpdateWithoutCertificateServiceInput, CertificateEligibilityUncheckedUpdateWithoutCertificateServiceInput>
  }

  export type CertificateEligibilityUpdateManyWithWhereWithoutCertificateServiceInput = {
    where: CertificateEligibilityScalarWhereInput
    data: XOR<CertificateEligibilityUpdateManyMutationInput, CertificateEligibilityUncheckedUpdateManyWithoutCertificateServiceInput>
  }

  export type CertificateEligibilityScalarWhereInput = {
    AND?: CertificateEligibilityScalarWhereInput | CertificateEligibilityScalarWhereInput[]
    OR?: CertificateEligibilityScalarWhereInput[]
    NOT?: CertificateEligibilityScalarWhereInput | CertificateEligibilityScalarWhereInput[]
    id?: IntFilter<"CertificateEligibility"> | number
    eligibilityDetail?: StringFilter<"CertificateEligibility"> | string
    applicationType?: StringFilter<"CertificateEligibility"> | string
    certificateServiceId?: IntFilter<"CertificateEligibility"> | number
  }

  export type CertificateServiceCreateWithoutContactsInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    admin: AdminCreateNestedOneWithoutCertificateServicesInput
    documents?: CertificateDocumentCreateNestedManyWithoutCertificateServiceInput
    processSteps?: CertificateProcessStepCreateNestedManyWithoutCertificateServiceInput
    eligibilityItems?: CertificateEligibilityCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceUncheckedCreateWithoutContactsInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    documents?: CertificateDocumentUncheckedCreateNestedManyWithoutCertificateServiceInput
    processSteps?: CertificateProcessStepUncheckedCreateNestedManyWithoutCertificateServiceInput
    eligibilityItems?: CertificateEligibilityUncheckedCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceCreateOrConnectWithoutContactsInput = {
    where: CertificateServiceWhereUniqueInput
    create: XOR<CertificateServiceCreateWithoutContactsInput, CertificateServiceUncheckedCreateWithoutContactsInput>
  }

  export type CertificateServiceUpsertWithoutContactsInput = {
    update: XOR<CertificateServiceUpdateWithoutContactsInput, CertificateServiceUncheckedUpdateWithoutContactsInput>
    create: XOR<CertificateServiceCreateWithoutContactsInput, CertificateServiceUncheckedCreateWithoutContactsInput>
    where?: CertificateServiceWhereInput
  }

  export type CertificateServiceUpdateToOneWithWhereWithoutContactsInput = {
    where?: CertificateServiceWhereInput
    data: XOR<CertificateServiceUpdateWithoutContactsInput, CertificateServiceUncheckedUpdateWithoutContactsInput>
  }

  export type CertificateServiceUpdateWithoutContactsInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneRequiredWithoutCertificateServicesNestedInput
    documents?: CertificateDocumentUpdateManyWithoutCertificateServiceNestedInput
    processSteps?: CertificateProcessStepUpdateManyWithoutCertificateServiceNestedInput
    eligibilityItems?: CertificateEligibilityUpdateManyWithoutCertificateServiceNestedInput
  }

  export type CertificateServiceUncheckedUpdateWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: CertificateDocumentUncheckedUpdateManyWithoutCertificateServiceNestedInput
    processSteps?: CertificateProcessStepUncheckedUpdateManyWithoutCertificateServiceNestedInput
    eligibilityItems?: CertificateEligibilityUncheckedUpdateManyWithoutCertificateServiceNestedInput
  }

  export type CertificateServiceCreateWithoutDocumentsInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    admin: AdminCreateNestedOneWithoutCertificateServicesInput
    contacts?: CertificateContactCreateNestedManyWithoutCertificateServiceInput
    processSteps?: CertificateProcessStepCreateNestedManyWithoutCertificateServiceInput
    eligibilityItems?: CertificateEligibilityCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceUncheckedCreateWithoutDocumentsInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: CertificateContactUncheckedCreateNestedManyWithoutCertificateServiceInput
    processSteps?: CertificateProcessStepUncheckedCreateNestedManyWithoutCertificateServiceInput
    eligibilityItems?: CertificateEligibilityUncheckedCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceCreateOrConnectWithoutDocumentsInput = {
    where: CertificateServiceWhereUniqueInput
    create: XOR<CertificateServiceCreateWithoutDocumentsInput, CertificateServiceUncheckedCreateWithoutDocumentsInput>
  }

  export type CertificateServiceUpsertWithoutDocumentsInput = {
    update: XOR<CertificateServiceUpdateWithoutDocumentsInput, CertificateServiceUncheckedUpdateWithoutDocumentsInput>
    create: XOR<CertificateServiceCreateWithoutDocumentsInput, CertificateServiceUncheckedCreateWithoutDocumentsInput>
    where?: CertificateServiceWhereInput
  }

  export type CertificateServiceUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: CertificateServiceWhereInput
    data: XOR<CertificateServiceUpdateWithoutDocumentsInput, CertificateServiceUncheckedUpdateWithoutDocumentsInput>
  }

  export type CertificateServiceUpdateWithoutDocumentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneRequiredWithoutCertificateServicesNestedInput
    contacts?: CertificateContactUpdateManyWithoutCertificateServiceNestedInput
    processSteps?: CertificateProcessStepUpdateManyWithoutCertificateServiceNestedInput
    eligibilityItems?: CertificateEligibilityUpdateManyWithoutCertificateServiceNestedInput
  }

  export type CertificateServiceUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: CertificateContactUncheckedUpdateManyWithoutCertificateServiceNestedInput
    processSteps?: CertificateProcessStepUncheckedUpdateManyWithoutCertificateServiceNestedInput
    eligibilityItems?: CertificateEligibilityUncheckedUpdateManyWithoutCertificateServiceNestedInput
  }

  export type CertificateServiceCreateWithoutProcessStepsInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    admin: AdminCreateNestedOneWithoutCertificateServicesInput
    contacts?: CertificateContactCreateNestedManyWithoutCertificateServiceInput
    documents?: CertificateDocumentCreateNestedManyWithoutCertificateServiceInput
    eligibilityItems?: CertificateEligibilityCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceUncheckedCreateWithoutProcessStepsInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: CertificateContactUncheckedCreateNestedManyWithoutCertificateServiceInput
    documents?: CertificateDocumentUncheckedCreateNestedManyWithoutCertificateServiceInput
    eligibilityItems?: CertificateEligibilityUncheckedCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceCreateOrConnectWithoutProcessStepsInput = {
    where: CertificateServiceWhereUniqueInput
    create: XOR<CertificateServiceCreateWithoutProcessStepsInput, CertificateServiceUncheckedCreateWithoutProcessStepsInput>
  }

  export type CertificateServiceUpsertWithoutProcessStepsInput = {
    update: XOR<CertificateServiceUpdateWithoutProcessStepsInput, CertificateServiceUncheckedUpdateWithoutProcessStepsInput>
    create: XOR<CertificateServiceCreateWithoutProcessStepsInput, CertificateServiceUncheckedCreateWithoutProcessStepsInput>
    where?: CertificateServiceWhereInput
  }

  export type CertificateServiceUpdateToOneWithWhereWithoutProcessStepsInput = {
    where?: CertificateServiceWhereInput
    data: XOR<CertificateServiceUpdateWithoutProcessStepsInput, CertificateServiceUncheckedUpdateWithoutProcessStepsInput>
  }

  export type CertificateServiceUpdateWithoutProcessStepsInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneRequiredWithoutCertificateServicesNestedInput
    contacts?: CertificateContactUpdateManyWithoutCertificateServiceNestedInput
    documents?: CertificateDocumentUpdateManyWithoutCertificateServiceNestedInput
    eligibilityItems?: CertificateEligibilityUpdateManyWithoutCertificateServiceNestedInput
  }

  export type CertificateServiceUncheckedUpdateWithoutProcessStepsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: CertificateContactUncheckedUpdateManyWithoutCertificateServiceNestedInput
    documents?: CertificateDocumentUncheckedUpdateManyWithoutCertificateServiceNestedInput
    eligibilityItems?: CertificateEligibilityUncheckedUpdateManyWithoutCertificateServiceNestedInput
  }

  export type CertificateServiceCreateWithoutEligibilityItemsInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    admin: AdminCreateNestedOneWithoutCertificateServicesInput
    contacts?: CertificateContactCreateNestedManyWithoutCertificateServiceInput
    documents?: CertificateDocumentCreateNestedManyWithoutCertificateServiceInput
    processSteps?: CertificateProcessStepCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceUncheckedCreateWithoutEligibilityItemsInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: CertificateContactUncheckedCreateNestedManyWithoutCertificateServiceInput
    documents?: CertificateDocumentUncheckedCreateNestedManyWithoutCertificateServiceInput
    processSteps?: CertificateProcessStepUncheckedCreateNestedManyWithoutCertificateServiceInput
  }

  export type CertificateServiceCreateOrConnectWithoutEligibilityItemsInput = {
    where: CertificateServiceWhereUniqueInput
    create: XOR<CertificateServiceCreateWithoutEligibilityItemsInput, CertificateServiceUncheckedCreateWithoutEligibilityItemsInput>
  }

  export type CertificateServiceUpsertWithoutEligibilityItemsInput = {
    update: XOR<CertificateServiceUpdateWithoutEligibilityItemsInput, CertificateServiceUncheckedUpdateWithoutEligibilityItemsInput>
    create: XOR<CertificateServiceCreateWithoutEligibilityItemsInput, CertificateServiceUncheckedCreateWithoutEligibilityItemsInput>
    where?: CertificateServiceWhereInput
  }

  export type CertificateServiceUpdateToOneWithWhereWithoutEligibilityItemsInput = {
    where?: CertificateServiceWhereInput
    data: XOR<CertificateServiceUpdateWithoutEligibilityItemsInput, CertificateServiceUncheckedUpdateWithoutEligibilityItemsInput>
  }

  export type CertificateServiceUpdateWithoutEligibilityItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneRequiredWithoutCertificateServicesNestedInput
    contacts?: CertificateContactUpdateManyWithoutCertificateServiceNestedInput
    documents?: CertificateDocumentUpdateManyWithoutCertificateServiceNestedInput
    processSteps?: CertificateProcessStepUpdateManyWithoutCertificateServiceNestedInput
  }

  export type CertificateServiceUncheckedUpdateWithoutEligibilityItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: CertificateContactUncheckedUpdateManyWithoutCertificateServiceNestedInput
    documents?: CertificateDocumentUncheckedUpdateManyWithoutCertificateServiceNestedInput
    processSteps?: CertificateProcessStepUncheckedUpdateManyWithoutCertificateServiceNestedInput
  }

  export type AdminCreateWithoutContactServicesInput = {
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    schemeServices?: SchemeServiceCreateNestedManyWithoutAdminInput
    certificateServices?: CertificateServiceCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutContactServicesInput = {
    id?: number
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    schemeServices?: SchemeServiceUncheckedCreateNestedManyWithoutAdminInput
    certificateServices?: CertificateServiceUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutContactServicesInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutContactServicesInput, AdminUncheckedCreateWithoutContactServicesInput>
  }

  export type ContactServiceContactCreateWithoutContactServiceInput = {
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    posts?: PostCreateNestedManyWithoutOfficeInput
  }

  export type ContactServiceContactUncheckedCreateWithoutContactServiceInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    posts?: PostUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type ContactServiceContactCreateOrConnectWithoutContactServiceInput = {
    where: ContactServiceContactWhereUniqueInput
    create: XOR<ContactServiceContactCreateWithoutContactServiceInput, ContactServiceContactUncheckedCreateWithoutContactServiceInput>
  }

  export type ContactServiceContactCreateManyContactServiceInputEnvelope = {
    data: ContactServiceContactCreateManyContactServiceInput | ContactServiceContactCreateManyContactServiceInput[]
    skipDuplicates?: boolean
  }

  export type ContactServiceDocumentCreateWithoutContactServiceInput = {
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
  }

  export type ContactServiceDocumentUncheckedCreateWithoutContactServiceInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
  }

  export type ContactServiceDocumentCreateOrConnectWithoutContactServiceInput = {
    where: ContactServiceDocumentWhereUniqueInput
    create: XOR<ContactServiceDocumentCreateWithoutContactServiceInput, ContactServiceDocumentUncheckedCreateWithoutContactServiceInput>
  }

  export type ContactServiceDocumentCreateManyContactServiceInputEnvelope = {
    data: ContactServiceDocumentCreateManyContactServiceInput | ContactServiceDocumentCreateManyContactServiceInput[]
    skipDuplicates?: boolean
  }

  export type AdminUpsertWithoutContactServicesInput = {
    update: XOR<AdminUpdateWithoutContactServicesInput, AdminUncheckedUpdateWithoutContactServicesInput>
    create: XOR<AdminCreateWithoutContactServicesInput, AdminUncheckedCreateWithoutContactServicesInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutContactServicesInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutContactServicesInput, AdminUncheckedUpdateWithoutContactServicesInput>
  }

  export type AdminUpdateWithoutContactServicesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemeServices?: SchemeServiceUpdateManyWithoutAdminNestedInput
    certificateServices?: CertificateServiceUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutContactServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemeServices?: SchemeServiceUncheckedUpdateManyWithoutAdminNestedInput
    certificateServices?: CertificateServiceUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type ContactServiceContactUpsertWithWhereUniqueWithoutContactServiceInput = {
    where: ContactServiceContactWhereUniqueInput
    update: XOR<ContactServiceContactUpdateWithoutContactServiceInput, ContactServiceContactUncheckedUpdateWithoutContactServiceInput>
    create: XOR<ContactServiceContactCreateWithoutContactServiceInput, ContactServiceContactUncheckedCreateWithoutContactServiceInput>
  }

  export type ContactServiceContactUpdateWithWhereUniqueWithoutContactServiceInput = {
    where: ContactServiceContactWhereUniqueInput
    data: XOR<ContactServiceContactUpdateWithoutContactServiceInput, ContactServiceContactUncheckedUpdateWithoutContactServiceInput>
  }

  export type ContactServiceContactUpdateManyWithWhereWithoutContactServiceInput = {
    where: ContactServiceContactScalarWhereInput
    data: XOR<ContactServiceContactUpdateManyMutationInput, ContactServiceContactUncheckedUpdateManyWithoutContactServiceInput>
  }

  export type ContactServiceContactScalarWhereInput = {
    AND?: ContactServiceContactScalarWhereInput | ContactServiceContactScalarWhereInput[]
    OR?: ContactServiceContactScalarWhereInput[]
    NOT?: ContactServiceContactScalarWhereInput | ContactServiceContactScalarWhereInput[]
    id?: IntFilter<"ContactServiceContact"> | number
    serviceName?: StringFilter<"ContactServiceContact"> | string
    district?: StringFilter<"ContactServiceContact"> | string
    subDistrict?: StringFilter<"ContactServiceContact"> | string
    block?: StringFilter<"ContactServiceContact"> | string
    name?: StringFilter<"ContactServiceContact"> | string
    designation?: StringFilter<"ContactServiceContact"> | string
    contact?: StringFilter<"ContactServiceContact"> | string
    email?: StringFilter<"ContactServiceContact"> | string
    contactServiceId?: IntFilter<"ContactServiceContact"> | number
  }

  export type ContactServiceDocumentUpsertWithWhereUniqueWithoutContactServiceInput = {
    where: ContactServiceDocumentWhereUniqueInput
    update: XOR<ContactServiceDocumentUpdateWithoutContactServiceInput, ContactServiceDocumentUncheckedUpdateWithoutContactServiceInput>
    create: XOR<ContactServiceDocumentCreateWithoutContactServiceInput, ContactServiceDocumentUncheckedCreateWithoutContactServiceInput>
  }

  export type ContactServiceDocumentUpdateWithWhereUniqueWithoutContactServiceInput = {
    where: ContactServiceDocumentWhereUniqueInput
    data: XOR<ContactServiceDocumentUpdateWithoutContactServiceInput, ContactServiceDocumentUncheckedUpdateWithoutContactServiceInput>
  }

  export type ContactServiceDocumentUpdateManyWithWhereWithoutContactServiceInput = {
    where: ContactServiceDocumentScalarWhereInput
    data: XOR<ContactServiceDocumentUpdateManyMutationInput, ContactServiceDocumentUncheckedUpdateManyWithoutContactServiceInput>
  }

  export type ContactServiceDocumentScalarWhereInput = {
    AND?: ContactServiceDocumentScalarWhereInput | ContactServiceDocumentScalarWhereInput[]
    OR?: ContactServiceDocumentScalarWhereInput[]
    NOT?: ContactServiceDocumentScalarWhereInput | ContactServiceDocumentScalarWhereInput[]
    id?: IntFilter<"ContactServiceDocument"> | number
    slNo?: IntFilter<"ContactServiceDocument"> | number
    documentType?: StringFilter<"ContactServiceDocument"> | string
    validProof?: StringFilter<"ContactServiceDocument"> | string
    isRequired?: BoolFilter<"ContactServiceDocument"> | boolean
    contactServiceId?: IntFilter<"ContactServiceDocument"> | number
  }

  export type ContactServiceCreateWithoutContactsInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: ContactServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: ContactServiceCreateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceCreatecontactDetailsInput | string[]
    processDetails?: ContactServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    admin: AdminCreateNestedOneWithoutContactServicesInput
    documents?: ContactServiceDocumentCreateNestedManyWithoutContactServiceInput
  }

  export type ContactServiceUncheckedCreateWithoutContactsInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: ContactServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: ContactServiceCreateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceCreatecontactDetailsInput | string[]
    processDetails?: ContactServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    documents?: ContactServiceDocumentUncheckedCreateNestedManyWithoutContactServiceInput
  }

  export type ContactServiceCreateOrConnectWithoutContactsInput = {
    where: ContactServiceWhereUniqueInput
    create: XOR<ContactServiceCreateWithoutContactsInput, ContactServiceUncheckedCreateWithoutContactsInput>
  }

  export type PostCreateWithoutOfficeInput = {
    postName: string
    rank: string
    description?: string | null
    department?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: EmployeeCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutOfficeInput = {
    id?: number
    postName: string
    rank: string
    description?: string | null
    department?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: EmployeeUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutOfficeInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutOfficeInput, PostUncheckedCreateWithoutOfficeInput>
  }

  export type PostCreateManyOfficeInputEnvelope = {
    data: PostCreateManyOfficeInput | PostCreateManyOfficeInput[]
    skipDuplicates?: boolean
  }

  export type ContactServiceUpsertWithoutContactsInput = {
    update: XOR<ContactServiceUpdateWithoutContactsInput, ContactServiceUncheckedUpdateWithoutContactsInput>
    create: XOR<ContactServiceCreateWithoutContactsInput, ContactServiceUncheckedCreateWithoutContactsInput>
    where?: ContactServiceWhereInput
  }

  export type ContactServiceUpdateToOneWithWhereWithoutContactsInput = {
    where?: ContactServiceWhereInput
    data: XOR<ContactServiceUpdateWithoutContactsInput, ContactServiceUncheckedUpdateWithoutContactsInput>
  }

  export type ContactServiceUpdateWithoutContactsInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: ContactServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: ContactServiceUpdateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceUpdatecontactDetailsInput | string[]
    processDetails?: ContactServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneRequiredWithoutContactServicesNestedInput
    documents?: ContactServiceDocumentUpdateManyWithoutContactServiceNestedInput
  }

  export type ContactServiceUncheckedUpdateWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: ContactServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: ContactServiceUpdateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceUpdatecontactDetailsInput | string[]
    processDetails?: ContactServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: ContactServiceDocumentUncheckedUpdateManyWithoutContactServiceNestedInput
  }

  export type PostUpsertWithWhereUniqueWithoutOfficeInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutOfficeInput, PostUncheckedUpdateWithoutOfficeInput>
    create: XOR<PostCreateWithoutOfficeInput, PostUncheckedCreateWithoutOfficeInput>
  }

  export type PostUpdateWithWhereUniqueWithoutOfficeInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutOfficeInput, PostUncheckedUpdateWithoutOfficeInput>
  }

  export type PostUpdateManyWithWhereWithoutOfficeInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutOfficeInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: IntFilter<"Post"> | number
    postName?: StringFilter<"Post"> | string
    rank?: StringFilter<"Post"> | string
    description?: StringNullableFilter<"Post"> | string | null
    department?: StringNullableFilter<"Post"> | string | null
    status?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    officeId?: IntFilter<"Post"> | number
  }

  export type ContactServiceCreateWithoutDocumentsInput = {
    name: string
    summary: string
    type?: string | null
    targetAudience?: ContactServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: ContactServiceCreateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceCreatecontactDetailsInput | string[]
    processDetails?: ContactServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    admin: AdminCreateNestedOneWithoutContactServicesInput
    contacts?: ContactServiceContactCreateNestedManyWithoutContactServiceInput
  }

  export type ContactServiceUncheckedCreateWithoutDocumentsInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: ContactServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: number
    eligibilityDetails?: ContactServiceCreateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceCreatecontactDetailsInput | string[]
    processDetails?: ContactServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
    contacts?: ContactServiceContactUncheckedCreateNestedManyWithoutContactServiceInput
  }

  export type ContactServiceCreateOrConnectWithoutDocumentsInput = {
    where: ContactServiceWhereUniqueInput
    create: XOR<ContactServiceCreateWithoutDocumentsInput, ContactServiceUncheckedCreateWithoutDocumentsInput>
  }

  export type ContactServiceUpsertWithoutDocumentsInput = {
    update: XOR<ContactServiceUpdateWithoutDocumentsInput, ContactServiceUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ContactServiceCreateWithoutDocumentsInput, ContactServiceUncheckedCreateWithoutDocumentsInput>
    where?: ContactServiceWhereInput
  }

  export type ContactServiceUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ContactServiceWhereInput
    data: XOR<ContactServiceUpdateWithoutDocumentsInput, ContactServiceUncheckedUpdateWithoutDocumentsInput>
  }

  export type ContactServiceUpdateWithoutDocumentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: ContactServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: ContactServiceUpdateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceUpdatecontactDetailsInput | string[]
    processDetails?: ContactServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: AdminUpdateOneRequiredWithoutContactServicesNestedInput
    contacts?: ContactServiceContactUpdateManyWithoutContactServiceNestedInput
  }

  export type ContactServiceUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: ContactServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: IntFieldUpdateOperationsInput | number
    eligibilityDetails?: ContactServiceUpdateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceUpdatecontactDetailsInput | string[]
    processDetails?: ContactServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactServiceContactUncheckedUpdateManyWithoutContactServiceNestedInput
  }

  export type ContactServiceContactCreateWithoutPostsInput = {
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    contactService: ContactServiceCreateNestedOneWithoutContactsInput
  }

  export type ContactServiceContactUncheckedCreateWithoutPostsInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    contactServiceId: number
  }

  export type ContactServiceContactCreateOrConnectWithoutPostsInput = {
    where: ContactServiceContactWhereUniqueInput
    create: XOR<ContactServiceContactCreateWithoutPostsInput, ContactServiceContactUncheckedCreateWithoutPostsInput>
  }

  export type EmployeeCreateWithoutPostInput = {
    name: string
    email: string
    phone: string
    designation: string
    employeeId?: string | null
    joiningDate?: Date | string | null
    salary?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeUncheckedCreateWithoutPostInput = {
    id?: number
    name: string
    email: string
    phone: string
    designation: string
    employeeId?: string | null
    joiningDate?: Date | string | null
    salary?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCreateOrConnectWithoutPostInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPostInput, EmployeeUncheckedCreateWithoutPostInput>
  }

  export type EmployeeCreateManyPostInputEnvelope = {
    data: EmployeeCreateManyPostInput | EmployeeCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type ContactServiceContactUpsertWithoutPostsInput = {
    update: XOR<ContactServiceContactUpdateWithoutPostsInput, ContactServiceContactUncheckedUpdateWithoutPostsInput>
    create: XOR<ContactServiceContactCreateWithoutPostsInput, ContactServiceContactUncheckedCreateWithoutPostsInput>
    where?: ContactServiceContactWhereInput
  }

  export type ContactServiceContactUpdateToOneWithWhereWithoutPostsInput = {
    where?: ContactServiceContactWhereInput
    data: XOR<ContactServiceContactUpdateWithoutPostsInput, ContactServiceContactUncheckedUpdateWithoutPostsInput>
  }

  export type ContactServiceContactUpdateWithoutPostsInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contactService?: ContactServiceUpdateOneRequiredWithoutContactsNestedInput
  }

  export type ContactServiceContactUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contactServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeUpsertWithWhereUniqueWithoutPostInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutPostInput, EmployeeUncheckedUpdateWithoutPostInput>
    create: XOR<EmployeeCreateWithoutPostInput, EmployeeUncheckedCreateWithoutPostInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutPostInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutPostInput, EmployeeUncheckedUpdateWithoutPostInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutPostInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutPostInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: IntFilter<"Employee"> | number
    name?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    phone?: StringFilter<"Employee"> | string
    designation?: StringFilter<"Employee"> | string
    employeeId?: StringNullableFilter<"Employee"> | string | null
    joiningDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    salary?: FloatNullableFilter<"Employee"> | number | null
    status?: StringFilter<"Employee"> | string
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    postId?: IntFilter<"Employee"> | number
  }

  export type PostCreateWithoutEmployeesInput = {
    postName: string
    rank: string
    description?: string | null
    department?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    office: ContactServiceContactCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutEmployeesInput = {
    id?: number
    postName: string
    rank: string
    description?: string | null
    department?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    officeId: number
  }

  export type PostCreateOrConnectWithoutEmployeesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutEmployeesInput, PostUncheckedCreateWithoutEmployeesInput>
  }

  export type PostUpsertWithoutEmployeesInput = {
    update: XOR<PostUpdateWithoutEmployeesInput, PostUncheckedUpdateWithoutEmployeesInput>
    create: XOR<PostCreateWithoutEmployeesInput, PostUncheckedCreateWithoutEmployeesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutEmployeesInput, PostUncheckedUpdateWithoutEmployeesInput>
  }

  export type PostUpdateWithoutEmployeesInput = {
    postName?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    office?: ContactServiceContactUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutEmployeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    postName?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    officeId?: IntFieldUpdateOperationsInput | number
  }

  export type SchemeServiceCreateManyAdminInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: SchemeServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: SchemeServiceCreateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceCreateschemeDetailsInput | string[]
    processDetails?: SchemeServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
  }

  export type CertificateServiceCreateManyAdminInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: CertificateServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: CertificateServiceCreateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceCreatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
  }

  export type ContactServiceCreateManyAdminInput = {
    id?: number
    name: string
    summary: string
    type?: string | null
    targetAudience?: ContactServiceCreatetargetAudienceInput | string[]
    applicationMode: string
    onlineUrl?: string | null
    offlineAddress?: string | null
    status?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    eligibilityDetails?: ContactServiceCreateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceCreatecontactDetailsInput | string[]
    processDetails?: ContactServiceCreateprocessDetailsInput | string[]
    processNew?: string | null
    processUpdate?: string | null
    processLost?: string | null
    processSurrender?: string | null
    docNew?: string | null
    docUpdate?: string | null
    docLost?: string | null
    docSurrender?: string | null
  }

  export type SchemeServiceUpdateWithoutAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: SchemeServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: SchemeServiceUpdateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceUpdateschemeDetailsInput | string[]
    processDetails?: SchemeServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactPersonUpdateManyWithoutSchemeServiceNestedInput
    documents?: SupportiveDocumentUpdateManyWithoutSchemeServiceNestedInput
  }

  export type SchemeServiceUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: SchemeServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: SchemeServiceUpdateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceUpdateschemeDetailsInput | string[]
    processDetails?: SchemeServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactPersonUncheckedUpdateManyWithoutSchemeServiceNestedInput
    documents?: SupportiveDocumentUncheckedUpdateManyWithoutSchemeServiceNestedInput
  }

  export type SchemeServiceUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: SchemeServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: SchemeServiceUpdateeligibilityDetailsInput | string[]
    schemeDetails?: SchemeServiceUpdateschemeDetailsInput | string[]
    processDetails?: SchemeServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CertificateServiceUpdateWithoutAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: CertificateContactUpdateManyWithoutCertificateServiceNestedInput
    documents?: CertificateDocumentUpdateManyWithoutCertificateServiceNestedInput
    processSteps?: CertificateProcessStepUpdateManyWithoutCertificateServiceNestedInput
    eligibilityItems?: CertificateEligibilityUpdateManyWithoutCertificateServiceNestedInput
  }

  export type CertificateServiceUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: CertificateContactUncheckedUpdateManyWithoutCertificateServiceNestedInput
    documents?: CertificateDocumentUncheckedUpdateManyWithoutCertificateServiceNestedInput
    processSteps?: CertificateProcessStepUncheckedUpdateManyWithoutCertificateServiceNestedInput
    eligibilityItems?: CertificateEligibilityUncheckedUpdateManyWithoutCertificateServiceNestedInput
  }

  export type CertificateServiceUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: CertificateServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: CertificateServiceUpdateeligibilityDetailsInput | string[]
    certificateDetails?: CertificateServiceUpdatecertificateDetailsInput | string[]
    processDetails?: CertificateServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactServiceUpdateWithoutAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: ContactServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: ContactServiceUpdateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceUpdatecontactDetailsInput | string[]
    processDetails?: ContactServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactServiceContactUpdateManyWithoutContactServiceNestedInput
    documents?: ContactServiceDocumentUpdateManyWithoutContactServiceNestedInput
  }

  export type ContactServiceUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: ContactServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: ContactServiceUpdateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceUpdatecontactDetailsInput | string[]
    processDetails?: ContactServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactServiceContactUncheckedUpdateManyWithoutContactServiceNestedInput
    documents?: ContactServiceDocumentUncheckedUpdateManyWithoutContactServiceNestedInput
  }

  export type ContactServiceUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    targetAudience?: ContactServiceUpdatetargetAudienceInput | string[]
    applicationMode?: StringFieldUpdateOperationsInput | string
    onlineUrl?: NullableStringFieldUpdateOperationsInput | string | null
    offlineAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    eligibilityDetails?: ContactServiceUpdateeligibilityDetailsInput | string[]
    contactDetails?: ContactServiceUpdatecontactDetailsInput | string[]
    processDetails?: ContactServiceUpdateprocessDetailsInput | string[]
    processNew?: NullableStringFieldUpdateOperationsInput | string | null
    processUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    processLost?: NullableStringFieldUpdateOperationsInput | string | null
    processSurrender?: NullableStringFieldUpdateOperationsInput | string | null
    docNew?: NullableStringFieldUpdateOperationsInput | string | null
    docUpdate?: NullableStringFieldUpdateOperationsInput | string | null
    docLost?: NullableStringFieldUpdateOperationsInput | string | null
    docSurrender?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactPersonCreateManySchemeServiceInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
  }

  export type SupportiveDocumentCreateManySchemeServiceInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
  }

  export type ContactPersonUpdateWithoutSchemeServiceInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ContactPersonUncheckedUpdateWithoutSchemeServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ContactPersonUncheckedUpdateManyWithoutSchemeServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type SupportiveDocumentUpdateWithoutSchemeServiceInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SupportiveDocumentUncheckedUpdateWithoutSchemeServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SupportiveDocumentUncheckedUpdateManyWithoutSchemeServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CertificateContactCreateManyCertificateServiceInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
    applicationType?: string
  }

  export type CertificateDocumentCreateManyCertificateServiceInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
    applicationType?: string
  }

  export type CertificateProcessStepCreateManyCertificateServiceInput = {
    id?: number
    slNo: number
    stepDetails: string
    applicationType?: string
  }

  export type CertificateEligibilityCreateManyCertificateServiceInput = {
    id?: number
    eligibilityDetail: string
    applicationType?: string
  }

  export type CertificateContactUpdateWithoutCertificateServiceInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateContactUncheckedUpdateWithoutCertificateServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateContactUncheckedUpdateManyWithoutCertificateServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateDocumentUpdateWithoutCertificateServiceInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateDocumentUncheckedUpdateWithoutCertificateServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateDocumentUncheckedUpdateManyWithoutCertificateServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateProcessStepUpdateWithoutCertificateServiceInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    stepDetails?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateProcessStepUncheckedUpdateWithoutCertificateServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    stepDetails?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateProcessStepUncheckedUpdateManyWithoutCertificateServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    stepDetails?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateEligibilityUpdateWithoutCertificateServiceInput = {
    eligibilityDetail?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateEligibilityUncheckedUpdateWithoutCertificateServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    eligibilityDetail?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateEligibilityUncheckedUpdateManyWithoutCertificateServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    eligibilityDetail?: StringFieldUpdateOperationsInput | string
    applicationType?: StringFieldUpdateOperationsInput | string
  }

  export type ContactServiceContactCreateManyContactServiceInput = {
    id?: number
    serviceName: string
    district: string
    subDistrict: string
    block: string
    name: string
    designation: string
    contact: string
    email: string
  }

  export type ContactServiceDocumentCreateManyContactServiceInput = {
    id?: number
    slNo: number
    documentType: string
    validProof: string
    isRequired?: boolean
  }

  export type ContactServiceContactUpdateWithoutContactServiceInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutOfficeNestedInput
  }

  export type ContactServiceContactUncheckedUpdateWithoutContactServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type ContactServiceContactUncheckedUpdateManyWithoutContactServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceName?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: StringFieldUpdateOperationsInput | string
    block?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ContactServiceDocumentUpdateWithoutContactServiceInput = {
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactServiceDocumentUncheckedUpdateWithoutContactServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactServiceDocumentUncheckedUpdateManyWithoutContactServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    slNo?: IntFieldUpdateOperationsInput | number
    documentType?: StringFieldUpdateOperationsInput | string
    validProof?: StringFieldUpdateOperationsInput | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PostCreateManyOfficeInput = {
    id?: number
    postName: string
    rank: string
    description?: string | null
    department?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUpdateWithoutOfficeInput = {
    postName?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: EmployeeUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutOfficeInput = {
    id?: IntFieldUpdateOperationsInput | number
    postName?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: EmployeeUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutOfficeInput = {
    id?: IntFieldUpdateOperationsInput | number
    postName?: StringFieldUpdateOperationsInput | string
    rank?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateManyPostInput = {
    id?: number
    name: string
    email: string
    phone: string
    designation: string
    employeeId?: string | null
    joiningDate?: Date | string | null
    salary?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeUpdateWithoutPostInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    joiningDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    joiningDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    joiningDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}