
generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schemeServices      SchemeService[]
  certificateServices CertificateService[]
  contactServices     ContactService[]
}

model SchemeService {
  id                 Int      @id @default(autoincrement())
  name               String
  summary            String
  type               String?
  targetAudience     String[]
  applicationMode    String   @default("both") // online, offline, both
  onlineUrl          String?
  offlineAddress     String?
  status             String   @default("draft") // draft, pending, published
  isActive           Boolean  @default(true)
  eligibilityDetails String[]
  schemeDetails      String[]
  processDetails     String[]
  benefitDetails     String[]
  applicationProcess String[]
  requiredDocuments  String[]

  // Process flows
  processNew       String?
  processUpdate    String?
  processLost      String?
  processSurrender String?

  // Document requirements
  docNew       String?
  docUpdate    String?
  docLost      String?
  docSurrender String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Admin relation
  adminId Int
  admin   Admin @relation(fields: [adminId], references: [id])

  // Related entities
  contacts  ContactPerson[]
  documents SupportiveDocument[]
}

model CertificateService {
  id                 Int      @id @default(autoincrement())
  name               String
  summary            String
  type               String?
  targetAudience     String[]
  eligibilityDetails String[]
  certificateDetails String[]
  applicationProcess String[]
  requiredDocuments  String[]
  applicationMode    String   @default("both") // online, offline, both
  onlineUrl          String?
  offlineAddress     String?
  status             String   @default("draft") // draft, pending, published
  isActive           Boolean  @default(true)

  // Process flows
  processNew       String?
  processUpdate    String?
  processLost      String?
  processSurrender String?

  // Document requirements
  docNew       String?
  docUpdate    String?
  docLost      String?
  docSurrender String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Admin relation
  adminId Int
  admin   Admin @relation(fields: [adminId], references: [id])

  // Related entities
  contacts         CertificateContact[]
  documents        CertificateDocument[]
  processSteps     CertificateProcessStep[]
  eligibilityItems CertificateEligibility[]
}

model CertificateContact {
  id              Int    @id @default(autoincrement())
  serviceName     String
  district        String
  subDistrict     String
  block           String
  name            String
  designation     String
  contact         String
  email           String
  applicationType String @default("New Application") // New Application, Lost Application, etc.

  certificateServiceId Int
  certificateService   CertificateService @relation(fields: [certificateServiceId], references: [id], onDelete: Cascade)
}

model CertificateDocument {
  id              Int     @id @default(autoincrement())
  slNo            Int
  documentType    String
  validProof      String
  isRequired      Boolean @default(true)
  applicationType String  @default("New Application") // New Application, Lost Application, etc.

  certificateServiceId Int
  certificateService   CertificateService @relation(fields: [certificateServiceId], references: [id], onDelete: Cascade)
}

model CertificateProcessStep {
  id              Int    @id @default(autoincrement())
  slNo            Int
  stepDetails     String
  applicationType String @default("New Application") // New Application, Lost Application, etc.

  certificateServiceId Int
  certificateService   CertificateService @relation(fields: [certificateServiceId], references: [id], onDelete: Cascade)
}

model CertificateEligibility {
  id                Int    @id @default(autoincrement())
  eligibilityDetail String
  applicationType   String @default("New Application") // New Application, Lost Application, etc.

  certificateServiceId Int
  certificateService   CertificateService @relation(fields: [certificateServiceId], references: [id], onDelete: Cascade)
}

model ContactService {
  id              Int      @id @default(autoincrement())
  name            String
  summary         String
  type            String?
  targetAudience  String[]
  applicationMode String
  onlineUrl       String?
  offlineAddress  String?
  status          String   @default("draft") // draft, pending, published
  isActive        Boolean  @default(true) // Admin dashboard control
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Admin relation
  adminId Int
  admin   Admin @relation(fields: [adminId], references: [id])

  // Extended details
  eligibilityDetails String[]
  contactDetails     String[]
  processDetails     String[]

  // Process flows
  processNew       String?
  processUpdate    String?
  processLost      String?
  processSurrender String?

  // Document requirements
  docNew       String?
  docUpdate    String?
  docLost      String?
  docSurrender String?

  // Related entities
  contacts  ContactServiceContact[]
  documents ContactServiceDocument[]
}

model ContactServiceContact {
  id          Int    @id @default(autoincrement())
  serviceName String
  district    String
  subDistrict String
  block       String
  name        String
  designation String
  contact     String
  email       String

  contactServiceId Int
  contactService   ContactService @relation(fields: [contactServiceId], references: [id], onDelete: Cascade)
}

model ContactServiceDocument {
  id           Int     @id @default(autoincrement())
  slNo         Int
  documentType String
  validProof   String
  isRequired   Boolean @default(true)

  contactServiceId Int
  contactService   ContactService @relation(fields: [contactServiceId], references: [id], onDelete: Cascade)
}

model Grievance {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  phone       String
  subject     String
  description String
  department  String
  priority    String   @default("medium") // low, medium, high
  status      String   @default("pending") // pending, in_progress, resolved, closed
  source      String   @default("web") // web, whatsapp, mobile
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Feedback {
  id          Int      @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  rating      Int      @default(5) // 1-5 rating
  comment     String
  serviceType String
  source      String   @default("web") // web, whatsapp, mobile
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactPerson {
  id          Int    @id @default(autoincrement())
  serviceName String
  district    String
  subDistrict String
  block       String
  name        String
  designation String
  contact     String
  email       String

  schemeServiceId Int
  schemeService   SchemeService @relation(fields: [schemeServiceId], references: [id], onDelete: Cascade)
}

model SupportiveDocument {
  id           Int     @id @default(autoincrement())
  slNo         Int
  documentType String
  validProof   String
  isRequired   Boolean @default(true)

  schemeServiceId Int
  schemeService   SchemeService @relation(fields: [schemeServiceId], references: [id], onDelete: Cascade)
}
